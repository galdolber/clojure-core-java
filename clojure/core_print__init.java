package clojure;

import clojure.lang.*;

public class core_print__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((Namespace)RT.CURRENT_NS.deref()).importClass(java.io.Writer.class);
  const__2.setDynamic(true);
  const__2.setMeta((IPersistentMap)const__11);
  const__2.bindRoot(null);
  const__12.setDynamic(true);
  const__12.setMeta((IPersistentMap)const__14);
  const__12.bindRoot(null);
  const__15.setDynamic(true);
  const__15.setMeta((IPersistentMap)const__17);
  const__15.bindRoot(Boolean.FALSE);
  const__18.setMeta((IPersistentMap)const__23);
  const__18.bindRoot(new clojure.core_print_sequential());
  const__24.setMeta((IPersistentMap)const__27);
  const__24.bindRoot(new clojure.core_print_meta());
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__29), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5366()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)null), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5370()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)null), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5372()));
  const__31.setMeta((IPersistentMap)const__34);
  const__31.bindRoot(new clojure.core_print_ctor());
  const__35.setMeta((IPersistentMap)const__38);
  const__35.bindRoot(new clojure.core_print_object());
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__39), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5376()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__40), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5378()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__40), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5380()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__41), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5382()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__41), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5384()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__42), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5388()));
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__44, const__42);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__45, const__42);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__46, const__42);
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__47), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5392()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__47), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5394()));
  const__48.setMeta((IPersistentMap)const__51);
  const__48.bindRoot(new clojure.core_print_simple());
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__52), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5397()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__52), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5399()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__53), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5401()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__53), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5403()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__54), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5405()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__54), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5407()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__55), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5409()));
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__54, const__44);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__54, const__44);
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__54, const__46);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__54, const__46);
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__46), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5413()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__44), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5417()));
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__44, const__46);
  const__56.setMeta((IPersistentMap)const__60);
  const__56.bindRoot(const__68);
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__59), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5419()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__59), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5423()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__69), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5425()));
  const__70.setMeta((IPersistentMap)const__73);
  const__70.bindRoot(new clojure.core_print_map());
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__74), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5430()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__45), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5434()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__74), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5438()));
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__44, const__46);
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__44, const__75);
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__75, const__76);
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__44, const__45);
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__76), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5440()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__75), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5442()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__45), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5444()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__77), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5446()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__78), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5448()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__78), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5450()));
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__78, const__45);
  ((IFn)const__43.getRawRoot()).invoke(const__28.getRawRoot(), const__78, const__74);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__78, const__74);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__44, const__45);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__78, const__44);
  ((IFn)const__43.getRawRoot()).invoke(const__30.getRawRoot(), const__78, const__45);
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__79), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5452()));
  const__80.setMeta((IPersistentMap)const__82);
  const__80.bindRoot(const__84);
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__85), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5454()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__85), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5457()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__86), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5459()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__87), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5461()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__88), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5463()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__89), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5465()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__90), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5467()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__91), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5469()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__92), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5471()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__93), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5473()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__94), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5475()));
  const__95.setMeta((IPersistentMap)const__97);
  const__95.bindRoot(RT.map(((java.lang.Class)java.lang.Float.TYPE), "Float/TYPE", ((java.lang.Class)java.lang.Integer.TYPE), "Integer/TYPE", ((java.lang.Class)java.lang.Long.TYPE), "Long/TYPE", ((java.lang.Class)java.lang.Boolean.TYPE), "Boolean/TYPE", ((java.lang.Class)java.lang.Character.TYPE), "Character/TYPE", ((java.lang.Class)java.lang.Double.TYPE), "Double/TYPE", ((java.lang.Class)java.lang.Byte.TYPE), "Byte/TYPE", ((java.lang.Class)java.lang.Short.TYPE), "Short/TYPE"));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__98), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5477()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__98), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5479()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__89), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5481()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__90), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5483()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__99), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5485()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__99), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5492()));
  ((clojure.lang.MultiFn)const__30.getRawRoot()).addMethod(((java.lang.Object)const__100), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5494()));
  ((clojure.lang.MultiFn)const__28.getRawRoot()).addMethod(((java.lang.Object)const__101), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.core_fn__5496()));
  const__102.setMeta((IPersistentMap)const__104);
  const__102.bindRoot(Boolean.TRUE);
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Var const__2;
 private static clojure.lang.Keyword const__3;
 private static clojure.lang.Keyword const__4;
 private static java.lang.Integer const__5;
 private static clojure.lang.Keyword const__6;
 private static java.lang.Integer const__7;
 private static clojure.lang.Keyword const__8;
 private static clojure.lang.Keyword const__9;
 private static clojure.lang.Keyword const__10;
 private static clojure.lang.IPersistentMap const__11;
 private static clojure.lang.Var const__12;
 private static java.lang.Integer const__13;
 private static clojure.lang.IPersistentMap const__14;
 private static clojure.lang.Var const__15;
 private static java.lang.Integer const__16;
 private static clojure.lang.IPersistentMap const__17;
 private static clojure.lang.Var const__18;
 private static java.lang.Integer const__19;
 private static clojure.lang.Keyword const__20;
 private static clojure.lang.IPersistentList const__21;
 private static clojure.lang.Keyword const__22;
 private static clojure.lang.IPersistentMap const__23;
 private static clojure.lang.Var const__24;
 private static java.lang.Integer const__25;
 private static clojure.lang.IPersistentList const__26;
 private static clojure.lang.IPersistentMap const__27;
 private static clojure.lang.Var const__28;
 private static clojure.lang.Keyword const__29;
 private static clojure.lang.Var const__30;
 private static clojure.lang.Var const__31;
 private static java.lang.Integer const__32;
 private static clojure.lang.IPersistentList const__33;
 private static clojure.lang.IPersistentMap const__34;
 private static clojure.lang.Var const__35;
 private static java.lang.Integer const__36;
 private static clojure.lang.IPersistentList const__37;
 private static clojure.lang.IPersistentMap const__38;
 private static java.lang.Class const__39;
 private static java.lang.Class const__40;
 private static java.lang.Class const__41;
 private static java.lang.Class const__42;
 private static clojure.lang.Var const__43;
 private static java.lang.Class const__44;
 private static java.lang.Class const__45;
 private static java.lang.Class const__46;
 private static java.lang.Class const__47;
 private static clojure.lang.Var const__48;
 private static java.lang.Integer const__49;
 private static clojure.lang.IPersistentList const__50;
 private static clojure.lang.IPersistentMap const__51;
 private static java.lang.Class const__52;
 private static java.lang.Class const__53;
 private static java.lang.Class const__54;
 private static java.lang.Class const__55;
 private static clojure.lang.Var const__56;
 private static java.lang.Integer const__57;
 private static clojure.lang.Keyword const__58;
 private static java.lang.Class const__59;
 private static clojure.lang.IPersistentMap const__60;
 private static java.lang.Character const__61;
 private static java.lang.Character const__62;
 private static java.lang.Character const__63;
 private static java.lang.Character const__64;
 private static java.lang.Character const__65;
 private static java.lang.Character const__66;
 private static java.lang.Character const__67;
 private static clojure.lang.IPersistentMap const__68;
 private static java.lang.Class const__69;
 private static clojure.lang.Var const__70;
 private static java.lang.Integer const__71;
 private static clojure.lang.IPersistentList const__72;
 private static clojure.lang.IPersistentMap const__73;
 private static java.lang.Class const__74;
 private static java.lang.Class const__75;
 private static java.lang.Class const__76;
 private static java.lang.Class const__77;
 private static java.lang.Class const__78;
 private static java.lang.Class const__79;
 private static clojure.lang.Var const__80;
 private static java.lang.Integer const__81;
 private static clojure.lang.IPersistentMap const__82;
 private static java.lang.Character const__83;
 private static clojure.lang.IPersistentMap const__84;
 private static java.lang.Class const__85;
 private static java.lang.Class const__86;
 private static java.lang.Class const__87;
 private static java.lang.Class const__88;
 private static java.lang.Class const__89;
 private static java.lang.Class const__90;
 private static java.lang.Class const__91;
 private static java.lang.Class const__92;
 private static java.lang.Class const__93;
 private static java.lang.Class const__94;
 private static clojure.lang.Var const__95;
 private static java.lang.Integer const__96;
 private static clojure.lang.IPersistentMap const__97;
 private static java.lang.Class const__98;
 private static java.lang.Class const__99;
 private static java.lang.Class const__100;
 private static java.lang.Class const__101;
 private static clojure.lang.Var const__102;
 private static java.lang.Integer const__103;
 private static clojure.lang.IPersistentMap const__104;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__2 = (clojure.lang.Var)RT.var("clojure.core", "*print-length*");
  const__3 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__5 = (java.lang.Integer)1;
  const__6 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__7 = (java.lang.Integer)15;
  const__8 = (clojure.lang.Keyword)Keyword.intern(null, "dynamic");
  const__9 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__10 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__11 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.", Keyword.intern(null, "line"), 15, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__12 = (clojure.lang.Var)RT.var("clojure.core", "*print-level*");
  const__13 = (java.lang.Integer)26;
  const__14 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.", Keyword.intern(null, "line"), 26, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__15 = (clojure.lang.Var)RT.var("clojure.core", "*verbose-defrecords*");
  const__16 = (java.lang.Integer)38;
  const__17 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 38, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__18 = (clojure.lang.Var)RT.var("clojure.core", "print-sequential");
  const__19 = (java.lang.Integer)40;
  const__20 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__21 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "begin")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "print-one"), ((clojure.lang.IObj)Symbol.intern(null, "sep")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "end")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "sequence"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__22 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__23 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "begin")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "print-one"), ((clojure.lang.IObj)Symbol.intern(null, "sep")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "end")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "sequence"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 40, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__24 = (clojure.lang.Var)RT.var("clojure.core", "print-meta");
  const__25 = (java.lang.Integer)64;
  const__26 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__27 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 64, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__28 = (clojure.lang.Var)RT.var("clojure.core", "print-method");
  const__29 = (clojure.lang.Keyword)Keyword.intern(null, "default");
  const__30 = (clojure.lang.Var)RT.var("clojure.core", "print-dup");
  const__31 = (clojure.lang.Var)RT.var("clojure.core", "print-ctor");
  const__32 = (java.lang.Integer)83;
  const__33 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), Symbol.intern(null, "print-args"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__34 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), Symbol.intern(null, "print-args"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 83, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__35 = (clojure.lang.Var)RT.var("clojure.core", "print-object");
  const__36 = (java.lang.Integer)90;
  const__37 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__38 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 90, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__39 = (java.lang.Class)java.lang.Object.class;
  const__40 = (java.lang.Class)clojure.lang.Keyword.class;
  const__41 = (java.lang.Class)java.lang.Number.class;
  const__42 = (java.lang.Class)clojure.lang.Fn.class;
  const__43 = (clojure.lang.Var)RT.var("clojure.core", "prefer-method");
  const__44 = (java.lang.Class)clojure.lang.IPersistentCollection.class;
  const__45 = (java.lang.Class)java.util.Map.class;
  const__46 = (java.lang.Class)java.util.Collection.class;
  const__47 = (java.lang.Class)java.lang.Boolean.class;
  const__48 = (clojure.lang.Var)RT.var("clojure.core", "print-simple");
  const__49 = (java.lang.Integer)130;
  const__50 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__51 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "o"), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 130, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__52 = (java.lang.Class)clojure.lang.Symbol.class;
  const__53 = (java.lang.Class)clojure.lang.Var.class;
  const__54 = (java.lang.Class)clojure.lang.ISeq.class;
  const__55 = (java.lang.Class)clojure.lang.IPersistentList.class;
  const__56 = (clojure.lang.Var)RT.var("clojure.core", "char-escape-string");
  const__57 = (java.lang.Integer)171;
  const__58 = (clojure.lang.Keyword)Keyword.intern(null, "tag");
  const__59 = (java.lang.Class)java.lang.String.class;
  const__60 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns escape string for char or nil if none", Keyword.intern(null, "line"), 171, Keyword.intern(null, "file"), "clojure/core_print.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__61 = (java.lang.Character)Character.valueOf((char)10);
  const__62 = (java.lang.Character)Character.valueOf((char)9);
  const__63 = (java.lang.Character)Character.valueOf((char)13);
  const__64 = (java.lang.Character)Character.valueOf((char)34);
  const__65 = (java.lang.Character)Character.valueOf((char)92);
  const__66 = (java.lang.Character)Character.valueOf((char)12);
  const__67 = (java.lang.Character)Character.valueOf((char)8);
  const__68 = (clojure.lang.IPersistentMap)RT.map(Character.valueOf((char)34), "\\\"", Character.valueOf((char)8), "\\b", Character.valueOf((char)9), "\\t", Character.valueOf((char)10), "\\n", Character.valueOf((char)12), "\\f", Character.valueOf((char)13), "\\r", Character.valueOf((char)92), "\\\\");
  const__69 = (java.lang.Class)clojure.lang.IPersistentVector.class;
  const__70 = (clojure.lang.Var)RT.var("clojure.core", "print-map");
  const__71 = (java.lang.Integer)200;
  const__72 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "print-one"), Symbol.intern(null, "w"))));
  const__73 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "print-one"), Symbol.intern(null, "w")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 200, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__74 = (java.lang.Class)clojure.lang.IPersistentMap.class;
  const__75 = (java.lang.Class)java.util.RandomAccess.class;
  const__76 = (java.lang.Class)java.util.List.class;
  const__77 = (java.lang.Class)java.util.Set.class;
  const__78 = (java.lang.Class)clojure.lang.IRecord.class;
  const__79 = (java.lang.Class)clojure.lang.IPersistentSet.class;
  const__80 = (clojure.lang.Var)RT.var("clojure.core", "char-name-string");
  const__81 = (java.lang.Integer)285;
  const__82 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns name string for char or nil if none", Keyword.intern(null, "line"), 285, Keyword.intern(null, "file"), "clojure/core_print.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__83 = (java.lang.Character)Character.valueOf((char)32);
  const__84 = (clojure.lang.IPersistentMap)RT.map(Character.valueOf((char)32), "space", Character.valueOf((char)8), "backspace", Character.valueOf((char)9), "tab", Character.valueOf((char)10), "newline", Character.valueOf((char)12), "formfeed", Character.valueOf((char)13), "return");
  const__85 = (java.lang.Class)java.lang.Character.class;
  const__86 = (java.lang.Class)java.lang.Long.class;
  const__87 = (java.lang.Class)java.lang.Double.class;
  const__88 = (java.lang.Class)clojure.lang.Ratio.class;
  const__89 = (java.lang.Class)java.math.BigDecimal.class;
  const__90 = (java.lang.Class)clojure.lang.BigInt.class;
  const__91 = (java.lang.Class)clojure.lang.PersistentHashMap.class;
  const__92 = (java.lang.Class)clojure.lang.PersistentHashSet.class;
  const__93 = (java.lang.Class)clojure.lang.PersistentVector.class;
  const__94 = (java.lang.Class)clojure.lang.LazilyPersistentVector.class;
  const__95 = (clojure.lang.Var)RT.var("clojure.core", "primitives-classnames");
  const__96 = (java.lang.Integer)315;
  const__97 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 315, Keyword.intern(null, "file"), "clojure/core_print.clj");
  const__98 = (java.lang.Class)java.lang.Class.class;
  const__99 = (java.lang.Class)java.util.regex.Pattern.class;
 }
 static void __init1() {
  const__100 = (java.lang.Class)clojure.lang.Namespace.class;
  const__101 = (java.lang.Class)clojure.lang.IDeref.class;
  const__102 = (clojure.lang.Var)RT.var("clojure.core", "print-initialized");
  const__103 = (java.lang.Integer)392;
  const__104 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 392, Keyword.intern(null, "file"), "clojure/core_print.clj");
 }
 static {
  __init0();
  __init1();
  clojure.lang.Compiler.pushNSandLoader(clojure.core_print__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
