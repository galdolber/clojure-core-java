package clojure;

import clojure.lang.*;

public class core__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((IFn)new clojure.core_loading__1323__auto__()).invoke();
  if (((clojure.lang.Symbol)const__1).equals(((java.lang.Object)const__2))) {
  } else {
   clojure.lang.LockingTransaction.runInTransaction((java.util.concurrent.Callable)((java.util.concurrent.Callable)new clojure.core_fn__3861()));
  }
  const__3.setMeta((IPersistentMap)const__9);
  const__10.setMeta((IPersistentMap)const__12);
  const__13.setMeta((IPersistentMap)const__19);
  const__13.bindRoot(((clojure.lang.IFn)clojure.lang.PersistentList.creator));
  const__20.setMeta((IPersistentMap)const__24);
  const__20.bindRoot(new clojure.core_cons());
  const__25.setMeta((IPersistentMap)const__28);
  const__25.bindRoot(new clojure.core_let());
  const__29.setMeta((IPersistentMap)const__31);
  const__29.bindRoot(new clojure.core_loop());
  const__32.setMeta((IPersistentMap)const__34);
  const__32.bindRoot(new clojure.core_fn());
  const__35.setMeta((IPersistentMap)const__38);
  const__35.bindRoot(new clojure.core_first());
  const__39.setMeta((IPersistentMap)const__44);
  const__39.bindRoot(new clojure.core_next());
  const__45.setMeta((IPersistentMap)const__48);
  const__45.bindRoot(new clojure.core_rest());
  const__49.setMeta((IPersistentMap)const__52);
  const__49.bindRoot(new clojure.core_conj());
  const__53.setMeta((IPersistentMap)const__56);
  const__53.bindRoot(new clojure.core_second());
  const__57.setMeta((IPersistentMap)const__60);
  const__57.bindRoot(new clojure.core_ffirst());
  const__61.setMeta((IPersistentMap)const__64);
  const__61.bindRoot(new clojure.core_nfirst());
  const__65.setMeta((IPersistentMap)const__68);
  const__65.bindRoot(new clojure.core_fnext());
  const__69.setMeta((IPersistentMap)const__72);
  const__69.bindRoot(new clojure.core_nnext());
  const__73.setMeta((IPersistentMap)const__76);
  const__73.bindRoot(new clojure.core_seq());
  const__77.setMeta((IPersistentMap)const__80);
  const__77.bindRoot(new clojure.core_instance_QMARK_());
  const__81.setMeta((IPersistentMap)const__84);
  const__81.bindRoot(new clojure.core_seq_QMARK_());
  const__85.setMeta((IPersistentMap)const__88);
  const__85.bindRoot(new clojure.core_char_QMARK_());
  const__89.setMeta((IPersistentMap)const__92);
  const__89.bindRoot(new clojure.core_string_QMARK_());
  const__93.setMeta((IPersistentMap)const__96);
  const__93.bindRoot(new clojure.core_map_QMARK_());
  const__97.setMeta((IPersistentMap)const__100);
  const__97.bindRoot(new clojure.core_vector_QMARK_());
  const__101.setMeta((IPersistentMap)const__104);
  const__101.bindRoot(new clojure.core_assoc());
  const__105.setMeta((IPersistentMap)const__108);
  const__105.bindRoot(new clojure.core_meta());
  const__109.setMeta((IPersistentMap)const__112);
  const__109.bindRoot(new clojure.core_with_meta());
  const__113.setDynamic(true);
  const__113.setMeta((IPersistentMap)const__117);
  const__113.bindRoot(new clojure.core_assert_valid_fdecl());
  const__118.setMeta((IPersistentMap)const__120);
  const__118.bindRoot(new clojure.core_sigs());
  const__121.setMeta((IPersistentMap)const__124);
  const__121.bindRoot(new clojure.core_last());
  const__125.setMeta((IPersistentMap)const__128);
  const__125.bindRoot(new clojure.core_butlast());
  const__129.setMeta((IPersistentMap)const__132);
  const__129.bindRoot(new clojure.core_defn());
  ((clojure.lang.Var)const__129).setMacro();
  const__133.setMeta((IPersistentMap)const__136);
  const__133.bindRoot(new clojure.core_cast());
  const__137.setMeta((IPersistentMap)const__140);
  const__137.bindRoot(new clojure.core_to_array());
  const__141.setMeta((IPersistentMap)const__144);
  const__141.bindRoot(new clojure.core_vector());
  const__145.setMeta((IPersistentMap)const__148);
  const__145.bindRoot(new clojure.core_vec());
  const__149.setMeta((IPersistentMap)const__152);
  const__149.bindRoot(new clojure.core_hash_map());
  const__153.setMeta((IPersistentMap)const__156);
  const__153.bindRoot(new clojure.core_hash_set());
  const__157.setMeta((IPersistentMap)const__160);
  const__157.bindRoot(new clojure.core_sorted_map());
  const__161.setMeta((IPersistentMap)const__164);
  const__161.bindRoot(new clojure.core_sorted_map_by());
  const__165.setMeta((IPersistentMap)const__168);
  const__165.bindRoot(new clojure.core_sorted_set());
  const__169.setMeta((IPersistentMap)const__172);
  const__169.bindRoot(new clojure.core_sorted_set_by());
  const__173.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__174, const__17, const__175, const__176, new clojure.core_nil_QMARK___inliner(), const__22, Boolean.TRUE, const__15, "1.0", const__41, const__177, const__16, "Returns true if x is nil, false otherwise."));
  const__173.bindRoot(new clojure.core_nil_QMARK_());
  const__178.setMeta((IPersistentMap)const__181);
  const__178.bindRoot(new clojure.core_defmacro());
  ((clojure.lang.Var)const__178).setMacro();
  const__182.setMeta((IPersistentMap)const__185);
  const__182.bindRoot(new clojure.core_when());
  ((clojure.lang.Var)const__182).setMacro();
  const__186.setMeta((IPersistentMap)const__189);
  const__186.bindRoot(new clojure.core_when_not());
  ((clojure.lang.Var)const__186).setMacro();
  const__190.setMeta((IPersistentMap)const__193);
  const__190.bindRoot(new clojure.core_false_QMARK_());
  const__194.setMeta((IPersistentMap)const__197);
  const__194.bindRoot(new clojure.core_true_QMARK_());
  const__198.setMeta((IPersistentMap)const__201);
  const__198.bindRoot(new clojure.core_not());
  const__202.setMeta((IPersistentMap)const__206);
  const__202.bindRoot(new clojure.core_str());
  const__207.setMeta((IPersistentMap)const__210);
  const__207.bindRoot(new clojure.core_symbol_QMARK_());
  const__211.setMeta((IPersistentMap)const__214);
  const__211.bindRoot(new clojure.core_keyword_QMARK_());
  const__215.setMeta((IPersistentMap)const__219);
  const__215.bindRoot(new clojure.core_symbol());
  const__220.setMeta((IPersistentMap)const__223);
  const__220.bindRoot(new clojure.core_gensym());
  const__224.setMeta((IPersistentMap)const__227);
  const__224.bindRoot(new clojure.core_cond());
  ((clojure.lang.Var)const__224).setMacro();
  const__228.setMeta((IPersistentMap)const__232);
  const__228.bindRoot(new clojure.core_keyword());
  const__233.setMeta((IPersistentMap)const__236);
  const__233.bindRoot(new clojure.core_find_keyword());
  const__237.setMeta((IPersistentMap)const__240);
  const__237.bindRoot(new clojure.core_spread());
  const__241.setMeta((IPersistentMap)const__244);
  const__241.bindRoot(new clojure.core_list_STAR_());
  const__245.setMeta((IPersistentMap)const__248);
  const__245.bindRoot(new clojure.core_apply());
  const__249.setMeta((IPersistentMap)const__252);
  const__249.bindRoot(new clojure.core_vary_meta());
  const__253.setMeta((IPersistentMap)const__256);
  const__253.bindRoot(new clojure.core_lazy_seq());
  ((clojure.lang.Var)const__253).setMacro();
  const__257.setMeta((IPersistentMap)const__261);
  const__257.bindRoot(new clojure.core_chunk_buffer());
  const__262.setMeta((IPersistentMap)const__265);
  const__262.bindRoot(new clojure.core_chunk_append());
  const__266.setMeta((IPersistentMap)const__270);
  const__266.bindRoot(new clojure.core_chunk());
  const__271.setMeta((IPersistentMap)const__274);
  const__271.bindRoot(new clojure.core_chunk_first());
  const__275.setMeta((IPersistentMap)const__278);
  const__275.bindRoot(new clojure.core_chunk_rest());
  const__279.setMeta((IPersistentMap)const__282);
  const__279.bindRoot(new clojure.core_chunk_next());
  const__283.setMeta((IPersistentMap)const__286);
  const__283.bindRoot(new clojure.core_chunk_cons());
  const__287.setMeta((IPersistentMap)const__290);
  const__287.bindRoot(new clojure.core_chunked_seq_QMARK_());
  const__291.setMeta((IPersistentMap)const__294);
  const__291.bindRoot(new clojure.core_concat());
  const__295.setMeta((IPersistentMap)const__298);
  const__295.bindRoot(new clojure.core_delay());
  ((clojure.lang.Var)const__295).setMacro();
  const__299.setMeta((IPersistentMap)const__302);
  const__299.bindRoot(new clojure.core_delay_QMARK_());
  const__303.setMeta((IPersistentMap)const__306);
  const__303.bindRoot(new clojure.core_force());
  const__307.setMeta((IPersistentMap)const__310);
  const__307.bindRoot(new clojure.core_if_not());
  ((clojure.lang.Var)const__307).setMacro();
  const__311.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__312, const__17, const__313, const__15, "1.0", const__314, const__316, const__176, new clojure.core_identical_QMARK___inliner(), const__16, "Tests if 2 arguments are the same object"));
  const__311.bindRoot(new clojure.core_identical_QMARK_());
  const__317.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__318, const__17, const__319, const__15, "1.0", const__314, const__320, const__176, new clojure.core__EQ___inliner(), const__16, "Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison."));
  const__317.bindRoot(new clojure.core__EQ_());
  const__321.setMeta((IPersistentMap)const__324);
  const__321.bindRoot(new clojure.core_not_EQ_());
  const__325.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__326, const__17, const__327, const__15, "1.0", const__176, new clojure.core_compare__inliner(), const__16, "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable"));
  const__325.bindRoot(new clojure.core_compare());
  const__328.setMeta((IPersistentMap)const__331);
  const__328.bindRoot(new clojure.core_and());
  ((clojure.lang.Var)const__328).setMacro();
  const__332.setMeta((IPersistentMap)const__335);
  const__332.bindRoot(new clojure.core_or());
  ((clojure.lang.Var)const__332).setMacro();
  const__336.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__337, const__17, const__338, const__15, "1.0", const__176, new clojure.core_zero_QMARK___inliner(), const__16, "Returns true if num is zero, else false"));
  const__336.bindRoot(new clojure.core_zero_QMARK_());
  const__339.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__340, const__17, const__341, const__15, "1.0", const__176, new clojure.core_count__inliner(), const__16, "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Java Collections and Maps"));
  const__339.bindRoot(new clojure.core_count());
  const__342.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__343, const__17, const__344, const__15, "1.0", const__176, new clojure.core_int__inliner(), const__16, "Coerce to int"));
  const__342.bindRoot(new clojure.core_int());
  const__345.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__346, const__17, const__347, const__15, "1.0", const__314, const__349, const__176, new clojure.core_nth__inliner(), const__16, "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, Java arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences."));
  const__345.bindRoot(new clojure.core_nth());
  const__350.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__351, const__17, const__352, const__15, "1.0", const__314, const__353, const__176, new clojure.core__LT___inliner(), const__16, "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false."));
  const__350.bindRoot(new clojure.core__LT_());
  const__354.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__355, const__17, const__356, const__15, "1.0", const__176, new clojure.core_inc_SINGLEQUOTE___inliner(), const__16, "Returns a number one greater than num. Supports arbitrary precision.\n  See also: inc"));
  const__354.bindRoot(new clojure.core_inc_SINGLEQUOTE_());
  const__357.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__358, const__17, const__359, const__15, "1.2", const__176, new clojure.core_inc__inliner(), const__16, "Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'"));
  const__357.bindRoot(new clojure.core_inc());
  const__360.setMeta((IPersistentMap)const__363);
  const__360.bindRoot(new clojure.core_reduce1());
  const__364.setMeta((IPersistentMap)const__367);
  const__364.bindRoot(new clojure.core_reverse());
  const__368.setMeta((IPersistentMap)const__371);
  const__368.bindRoot(new clojure.core_nary_inline());
  const__372.setMeta((IPersistentMap)const__375);
  const__372.bindRoot(new clojure.core__GT_1_QMARK_());
  const__376.setMeta((IPersistentMap)const__379);
  const__376.bindRoot(new clojure.core__GT_0_QMARK_());
  const__380.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__381, const__17, const__382, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__383), const__16, "Returns the sum of nums. (+) returns 0. Supports arbitrary precision.\n  See also: +"));
  const__380.bindRoot(new clojure.core__PLUS__SINGLEQUOTE_());
  const__384.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__385, const__17, const__386, const__15, "1.2", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__387, const__388), const__16, "Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'"));
  const__384.bindRoot(new clojure.core__PLUS_());
  const__389.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__390, const__17, const__391, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__392), const__16, "Returns the product of nums. (*) returns 1. Supports arbitrary precision.\n  See also: *"));
  const__389.bindRoot(new clojure.core__STAR__SINGLEQUOTE_());
  const__393.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__394, const__17, const__395, const__15, "1.2", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__396, const__397), const__16, "Returns the product of nums. (*) returns 1. Does not auto-promote\n  longs, will throw on overflow. See also: *'"));
  const__393.bindRoot(new clojure.core__STAR_());
  const__398.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__399, const__17, const__400, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__401), const__16, "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."));
  const__398.bindRoot(new clojure.core__SLASH_());
  const__402.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__403, const__17, const__404, const__15, "1.0", const__314, const__376.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__405), const__16, "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Supports arbitrary precision.\n  See also: -"));
  const__402.bindRoot(new clojure.core___SINGLEQUOTE_());
  const__406.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__407, const__17, const__408, const__15, "1.2", const__314, const__376.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__409, const__410), const__16, "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Does not auto-promote\n  longs, will throw on overflow. See also: -'"));
  const__406.bindRoot(new clojure.core__());
  const__411.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__412, const__17, const__413, const__15, "1.0", const__314, const__414, const__176, new clojure.core__LT__EQ___inliner(), const__16, "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false."));
  const__411.bindRoot(new clojure.core__LT__EQ_());
  const__415.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__416, const__17, const__417, const__15, "1.0", const__314, const__418, const__176, new clojure.core__GT___inliner(), const__16, "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false."));
  const__415.bindRoot(new clojure.core__GT_());
  const__419.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__420, const__17, const__421, const__15, "1.0", const__314, const__422, const__176, new clojure.core__GT__EQ___inliner(), const__16, "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false."));
  const__419.bindRoot(new clojure.core__GT__EQ_());
  const__423.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__424, const__17, const__425, const__15, "1.0", const__314, const__426, const__176, new clojure.core__EQ__EQ___inliner(), const__16, "Returns non-nil if nums all have the equivalent\n  value (type-independent), otherwise false"));
  const__423.bindRoot(new clojure.core__EQ__EQ_());
  const__427.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__428, const__17, const__429, const__176, ((IFn)const__368.getRawRoot()).invoke(const__430), const__314, const__372.getRawRoot(), const__15, "1.0", const__16, "Returns the greatest of the nums."));
  const__427.bindRoot(new clojure.core_max());
  const__431.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__432, const__17, const__433, const__176, ((IFn)const__368.getRawRoot()).invoke(const__434), const__314, const__372.getRawRoot(), const__15, "1.0", const__16, "Returns the least of the nums."));
  const__431.bindRoot(new clojure.core_min());
  const__435.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__436, const__17, const__437, const__15, "1.0", const__176, new clojure.core_dec_SINGLEQUOTE___inliner(), const__16, "Returns a number one less than num. Supports arbitrary precision.\n  See also: dec"));
  const__435.bindRoot(new clojure.core_dec_SINGLEQUOTE_());
  const__438.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__439, const__17, const__440, const__15, "1.2", const__176, new clojure.core_dec__inliner(), const__16, "Returns a number one less than num. Does not auto-promote\n  longs, will throw on overflow. See also: dec'"));
  const__438.bindRoot(new clojure.core_dec());
  const__441.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__442, const__17, const__443, const__15, "1.0", const__176, new clojure.core_unchecked_inc_int__inliner(), const__16, "Returns a number one greater than x, an int.\n  Note - uses a primitive operator subject to overflow."));
  const__441.bindRoot(new clojure.core_unchecked_inc_int());
  const__444.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__445, const__17, const__446, const__15, "1.0", const__176, new clojure.core_unchecked_inc__inliner(), const__16, "Returns a number one greater than x, a long.\n  Note - uses a primitive operator subject to overflow."));
  const__444.bindRoot(new clojure.core_unchecked_inc());
  const__447.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__448, const__17, const__449, const__15, "1.0", const__176, new clojure.core_unchecked_dec_int__inliner(), const__16, "Returns a number one less than x, an int.\n  Note - uses a primitive operator subject to overflow."));
  const__447.bindRoot(new clojure.core_unchecked_dec_int());
  const__450.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__451, const__17, const__452, const__15, "1.0", const__176, new clojure.core_unchecked_dec__inliner(), const__16, "Returns a number one less than x, a long.\n  Note - uses a primitive operator subject to overflow."));
  const__450.bindRoot(new clojure.core_unchecked_dec());
  const__453.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__454, const__17, const__455, const__15, "1.0", const__176, new clojure.core_unchecked_negate_int__inliner(), const__16, "Returns the negation of x, an int.\n  Note - uses a primitive operator subject to overflow."));
  const__453.bindRoot(new clojure.core_unchecked_negate_int());
  const__456.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__457, const__17, const__458, const__15, "1.0", const__176, new clojure.core_unchecked_negate__inliner(), const__16, "Returns the negation of x, a long.\n  Note - uses a primitive operator subject to overflow."));
  const__456.bindRoot(new clojure.core_unchecked_negate());
  const__459.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__460, const__17, const__461, const__15, "1.0", const__176, new clojure.core_unchecked_add_int__inliner(), const__16, "Returns the sum of x and y, both int.\n  Note - uses a primitive operator subject to overflow."));
  const__459.bindRoot(new clojure.core_unchecked_add_int());
  const__462.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__463, const__17, const__464, const__15, "1.0", const__176, new clojure.core_unchecked_add__inliner(), const__16, "Returns the sum of x and y, both long.\n  Note - uses a primitive operator subject to overflow."));
  const__462.bindRoot(new clojure.core_unchecked_add());
  const__465.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__466, const__17, const__467, const__15, "1.0", const__176, new clojure.core_unchecked_subtract_int__inliner(), const__16, "Returns the difference of x and y, both int.\n  Note - uses a primitive operator subject to overflow."));
  const__465.bindRoot(new clojure.core_unchecked_subtract_int());
  const__468.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__469, const__17, const__470, const__15, "1.0", const__176, new clojure.core_unchecked_subtract__inliner(), const__16, "Returns the difference of x and y, both long.\n  Note - uses a primitive operator subject to overflow."));
  const__468.bindRoot(new clojure.core_unchecked_subtract());
  const__471.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__472, const__17, const__473, const__15, "1.0", const__176, new clojure.core_unchecked_multiply_int__inliner(), const__16, "Returns the product of x and y, both int.\n  Note - uses a primitive operator subject to overflow."));
  const__471.bindRoot(new clojure.core_unchecked_multiply_int());
  const__474.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__475, const__17, const__476, const__15, "1.0", const__176, new clojure.core_unchecked_multiply__inliner(), const__16, "Returns the product of x and y, both long.\n  Note - uses a primitive operator subject to overflow."));
  const__474.bindRoot(new clojure.core_unchecked_multiply());
  const__477.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__478, const__17, const__479, const__15, "1.0", const__176, new clojure.core_unchecked_divide_int__inliner(), const__16, "Returns the division of x by y, both int.\n  Note - uses a primitive operator subject to truncation."));
  const__477.bindRoot(new clojure.core_unchecked_divide_int());
  const__480.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__481, const__17, const__482, const__15, "1.0", const__176, new clojure.core_unchecked_remainder_int__inliner(), const__16, "Returns the remainder of division of x by y, both int.\n  Note - uses a primitive operator subject to truncation."));
  const__480.bindRoot(new clojure.core_unchecked_remainder_int());
  const__483.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__484, const__17, const__485, const__15, "1.0", const__176, new clojure.core_pos_QMARK___inliner(), const__16, "Returns true if num is greater than zero, else false"));
  const__483.bindRoot(new clojure.core_pos_QMARK_());
  const__486.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__487, const__17, const__488, const__15, "1.0", const__176, new clojure.core_neg_QMARK___inliner(), const__16, "Returns true if num is less than zero, else false"));
  const__486.bindRoot(new clojure.core_neg_QMARK_());
  const__489.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__490, const__17, const__491, const__176, new clojure.core_quot__inliner(), const__22, Boolean.TRUE, const__15, "1.0", const__16, "quot[ient] of dividing numerator by denominator."));
  const__489.bindRoot(new clojure.core_quot());
  const__492.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__493, const__17, const__494, const__176, new clojure.core_rem__inliner(), const__22, Boolean.TRUE, const__15, "1.0", const__16, "remainder of dividing numerator by denominator."));
  const__492.bindRoot(new clojure.core_rem());
  const__495.setMeta((IPersistentMap)const__498);
  const__495.bindRoot(new clojure.core_rationalize());
  const__499.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__500, const__17, const__501, const__15, "1.0", const__176, new clojure.core_bit_not__inliner(), const__16, "Bitwise complement"));
  const__499.bindRoot(new clojure.core_bit_not());
  const__502.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__503, const__17, const__504, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__505), const__16, "Bitwise and"));
  const__502.bindRoot(new clojure.core_bit_and());
  const__506.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__507, const__17, const__508, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__509), const__16, "Bitwise or"));
  const__506.bindRoot(new clojure.core_bit_or());
  const__510.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__511, const__17, const__512, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__513), const__16, "Bitwise exclusive or"));
  const__510.bindRoot(new clojure.core_bit_xor());
  const__514.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__515, const__17, const__516, const__22, Boolean.TRUE, const__15, "1.0", const__314, const__372.getRawRoot(), const__176, ((IFn)const__368.getRawRoot()).invoke(const__517), const__16, "Bitwise and with complement"));
  const__514.bindRoot(new clojure.core_bit_and_not());
  const__518.setMeta((IPersistentMap)const__521);
  const__518.bindRoot(new clojure.core_bit_clear());
  const__522.setMeta((IPersistentMap)const__525);
  const__522.bindRoot(new clojure.core_bit_set());
  const__526.setMeta((IPersistentMap)const__529);
  const__526.bindRoot(new clojure.core_bit_flip());
  const__530.setMeta((IPersistentMap)const__533);
  const__530.bindRoot(new clojure.core_bit_test());
  const__534.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__535, const__17, const__536, const__15, "1.0", const__176, new clojure.core_bit_shift_left__inliner(), const__16, "Bitwise shift left"));
  const__534.bindRoot(new clojure.core_bit_shift_left());
  const__537.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__538, const__17, const__539, const__15, "1.0", const__176, new clojure.core_bit_shift_right__inliner(), const__16, "Bitwise shift right"));
  const__537.bindRoot(new clojure.core_bit_shift_right());
  const__540.setMeta((IPersistentMap)const__543);
  const__540.bindRoot(new clojure.core_integer_QMARK_());
  const__544.setMeta((IPersistentMap)const__547);
  const__544.bindRoot(new clojure.core_even_QMARK_());
  const__548.setMeta((IPersistentMap)const__551);
  const__548.bindRoot(new clojure.core_odd_QMARK_());
  const__552.setMeta((IPersistentMap)const__555);
  const__552.bindRoot(new clojure.core_complement());
  const__556.setMeta((IPersistentMap)const__559);
  const__556.bindRoot(new clojure.core_constantly());
  const__560.setMeta((IPersistentMap)const__563);
  const__560.bindRoot(new clojure.core_identity());
  const__564.setMeta((IPersistentMap)const__567);
  const__564.bindRoot(new clojure.core_peek());
  const__568.setMeta((IPersistentMap)const__571);
  const__568.bindRoot(new clojure.core_pop());
  const__572.setMeta((IPersistentMap)const__575);
  const__572.bindRoot(new clojure.core_contains_QMARK_());
  const__576.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__577, const__17, const__578, const__15, "1.0", const__314, const__579, const__176, new clojure.core_get__inliner(), const__16, "Returns the value mapped to key, not-found or nil if key not present."));
  const__576.bindRoot(new clojure.core_get());
  const__580.setMeta((IPersistentMap)const__583);
  const__580.bindRoot(new clojure.core_dissoc());
  const__584.setMeta((IPersistentMap)const__587);
  const__584.bindRoot(new clojure.core_disj());
  const__588.setMeta((IPersistentMap)const__591);
  const__588.bindRoot(new clojure.core_find());
  const__592.setMeta((IPersistentMap)const__595);
  const__592.bindRoot(new clojure.core_select_keys());
  const__596.setMeta((IPersistentMap)const__599);
  const__596.bindRoot(new clojure.core_keys());
  const__600.setMeta((IPersistentMap)const__603);
  const__600.bindRoot(new clojure.core_vals());
  const__604.setMeta((IPersistentMap)const__607);
  const__604.bindRoot(new clojure.core_key());
  const__608.setMeta((IPersistentMap)const__611);
  const__608.bindRoot(new clojure.core_val());
  const__612.setMeta((IPersistentMap)const__615);
  const__612.bindRoot(new clojure.core_rseq());
  const__616.setMeta((IPersistentMap)const__619);
  const__616.bindRoot(new clojure.core_name());
  const__620.setMeta((IPersistentMap)const__623);
  const__620.bindRoot(new clojure.core_namespace());
  const__624.setMeta((IPersistentMap)const__627);
  const__624.bindRoot(new clojure.core_locking());
  ((clojure.lang.Var)const__624).setMacro();
  const__628.setMeta((IPersistentMap)const__631);
  const__628.bindRoot(new clojure.core__DOT__DOT_());
  ((clojure.lang.Var)const__628).setMacro();
  const__632.setMeta((IPersistentMap)const__635);
  const__632.bindRoot(new clojure.core___GT_());
  ((clojure.lang.Var)const__632).setMacro();
  const__636.setMeta((IPersistentMap)const__639);
  const__636.bindRoot(new clojure.core___GT__GT_());
  ((clojure.lang.Var)const__636).setMacro();
  const__640.setMeta((IPersistentMap)const__642);
  const__643.setMeta((IPersistentMap)const__646);
  const__643.bindRoot(new clojure.core_check_valid_options());
  const__647.setMeta((IPersistentMap)const__649);
  const__650.setMeta((IPersistentMap)const__653);
  const__650.bindRoot(new clojure.core_defmulti());
  ((clojure.lang.Var)const__650).setMacro();
  const__654.setMeta((IPersistentMap)const__657);
  const__654.bindRoot(new clojure.core_defmethod());
  ((clojure.lang.Var)const__654).setMacro();
  const__658.setMeta((IPersistentMap)const__661);
  const__658.bindRoot(new clojure.core_remove_all_methods());
  const__662.setMeta((IPersistentMap)const__665);
  const__662.bindRoot(new clojure.core_remove_method());
  const__666.setMeta((IPersistentMap)const__669);
  const__666.bindRoot(new clojure.core_prefer_method());
  const__670.setMeta((IPersistentMap)const__673);
  const__670.bindRoot(new clojure.core_methods());
  const__674.setMeta((IPersistentMap)const__677);
  const__674.bindRoot(new clojure.core_get_method());
  const__678.setMeta((IPersistentMap)const__681);
  const__678.bindRoot(new clojure.core_prefers());
  const__682.setMeta((IPersistentMap)const__685);
  const__682.bindRoot(new clojure.core_assert_args());
  ((clojure.lang.Var)const__682).setMacro();
  const__686.setMeta((IPersistentMap)const__689);
  const__686.bindRoot(new clojure.core_if_let());
  ((clojure.lang.Var)const__686).setMacro();
  const__690.setMeta((IPersistentMap)const__693);
  const__690.bindRoot(new clojure.core_when_let());
  ((clojure.lang.Var)const__690).setMacro();
  const__694.setMeta((IPersistentMap)const__697);
  const__694.bindRoot(new clojure.core_push_thread_bindings());
  const__698.setMeta((IPersistentMap)const__701);
  const__698.bindRoot(new clojure.core_pop_thread_bindings());
  const__702.setMeta((IPersistentMap)const__705);
  const__702.bindRoot(new clojure.core_get_thread_bindings());
  const__706.setMeta((IPersistentMap)const__709);
  const__706.bindRoot(new clojure.core_binding());
  ((clojure.lang.Var)const__706).setMacro();
  const__710.setMeta((IPersistentMap)const__713);
  const__710.bindRoot(new clojure.core_with_bindings_STAR_());
  const__714.setMeta((IPersistentMap)const__717);
  const__714.bindRoot(new clojure.core_with_bindings());
  ((clojure.lang.Var)const__714).setMacro();
  const__718.setMeta((IPersistentMap)const__721);
  const__718.bindRoot(new clojure.core_bound_fn_STAR_());
  const__722.setMeta((IPersistentMap)const__725);
  const__722.bindRoot(new clojure.core_bound_fn());
  ((clojure.lang.Var)const__722).setMacro();
  const__726.setMeta((IPersistentMap)const__729);
  const__726.bindRoot(new clojure.core_find_var());
  const__730.setMeta((IPersistentMap)const__733);
  const__730.bindRoot(new clojure.core_binding_conveyor_fn());
  const__734.setMeta((IPersistentMap)const__737);
  const__734.bindRoot(new clojure.core_setup_reference());
  const__738.setMeta((IPersistentMap)const__741);
  const__738.bindRoot(new clojure.core_agent());
  const__742.setMeta((IPersistentMap)const__745);
  const__742.bindRoot(new clojure.core_set_agent_send_executor_BANG_());
  const__746.setMeta((IPersistentMap)const__749);
  const__746.bindRoot(new clojure.core_set_agent_send_off_executor_BANG_());
  const__750.setMeta((IPersistentMap)const__753);
  const__750.bindRoot(new clojure.core_send_via());
  const__754.setMeta((IPersistentMap)const__757);
  const__754.bindRoot(new clojure.core_send());
  const__758.setMeta((IPersistentMap)const__761);
  const__758.bindRoot(new clojure.core_send_off());
  const__762.setMeta((IPersistentMap)const__765);
  const__762.bindRoot(new clojure.core_release_pending_sends());
  const__766.setMeta((IPersistentMap)const__769);
  const__766.bindRoot(new clojure.core_add_watch());
  const__770.setMeta((IPersistentMap)const__773);
  const__770.bindRoot(new clojure.core_remove_watch());
  const__774.setMeta((IPersistentMap)const__777);
  const__774.bindRoot(new clojure.core_agent_error());
  const__778.setMeta((IPersistentMap)const__781);
  const__778.bindRoot(new clojure.core_restart_agent());
  const__782.setMeta((IPersistentMap)const__785);
  const__782.bindRoot(new clojure.core_set_error_handler_BANG_());
  const__786.setMeta((IPersistentMap)const__789);
  const__786.bindRoot(new clojure.core_error_handler());
  const__790.setMeta((IPersistentMap)const__793);
  const__790.bindRoot(new clojure.core_set_error_mode_BANG_());
  const__794.setMeta((IPersistentMap)const__797);
  const__794.bindRoot(new clojure.core_error_mode());
  const__798.setMeta((IPersistentMap)const__802);
  const__798.bindRoot(new clojure.core_agent_errors());
  const__803.setMeta((IPersistentMap)const__806);
  const__803.bindRoot(new clojure.core_clear_agent_errors());
  const__807.setMeta((IPersistentMap)const__810);
  const__807.bindRoot(new clojure.core_shutdown_agents());
  const__811.setMeta((IPersistentMap)const__814);
  const__811.bindRoot(new clojure.core_ref());
  const__815.setMeta((IPersistentMap)const__818);
  const__815.bindRoot(new clojure.core_deref_future());
  const__819.setMeta((IPersistentMap)const__822);
  const__819.bindRoot(new clojure.core_deref());
  const__823.setMeta((IPersistentMap)const__826);
  const__823.bindRoot(new clojure.core_atom());
  const__827.setMeta((IPersistentMap)const__830);
  const__827.bindRoot(new clojure.core_swap_BANG_());
  const__831.setMeta((IPersistentMap)const__834);
  const__831.bindRoot(new clojure.core_compare_and_set_BANG_());
  const__835.setMeta((IPersistentMap)const__838);
  const__835.bindRoot(new clojure.core_reset_BANG_());
  const__839.setMeta((IPersistentMap)const__842);
  const__839.bindRoot(new clojure.core_set_validator_BANG_());
  const__843.setMeta((IPersistentMap)const__846);
  const__843.bindRoot(new clojure.core_get_validator());
  const__847.setMeta((IPersistentMap)const__850);
  const__847.bindRoot(new clojure.core_alter_meta_BANG_());
  const__851.setMeta((IPersistentMap)const__854);
  const__851.bindRoot(new clojure.core_reset_meta_BANG_());
  const__855.setMeta((IPersistentMap)const__858);
  const__855.bindRoot(new clojure.core_commute());
  const__859.setMeta((IPersistentMap)const__862);
  const__859.bindRoot(new clojure.core_alter());
  const__863.setMeta((IPersistentMap)const__866);
  const__863.bindRoot(new clojure.core_ref_set());
  const__867.setMeta((IPersistentMap)const__870);
  const__867.bindRoot(new clojure.core_ref_history_count());
  const__871.setMeta((IPersistentMap)const__874);
  const__871.bindRoot(new clojure.core_ref_min_history());
  const__875.setMeta((IPersistentMap)const__878);
  const__875.bindRoot(new clojure.core_ref_max_history());
  const__879.setMeta((IPersistentMap)const__882);
  const__879.bindRoot(new clojure.core_ensure());
  const__883.setMeta((IPersistentMap)const__886);
  const__883.bindRoot(new clojure.core_sync());
  ((clojure.lang.Var)const__883).setMacro();
  const__887.setMeta((IPersistentMap)const__890);
  const__887.bindRoot(new clojure.core_io_BANG_());
  ((clojure.lang.Var)const__887).setMacro();
  const__891.setMeta((IPersistentMap)const__894);
  const__891.bindRoot(new clojure.core_comp());
  const__895.setMeta((IPersistentMap)const__898);
  const__895.bindRoot(new clojure.core_juxt());
  const__899.setMeta((IPersistentMap)const__902);
  const__899.bindRoot(new clojure.core_partial());
  const__903.setMeta((IPersistentMap)const__906);
  const__903.bindRoot(new clojure.core_sequence());
  const__907.setMeta((IPersistentMap)const__910);
  const__907.bindRoot(new clojure.core_every_QMARK_());
  const__911.setMeta((IPersistentMap)const__914);
  const__911.bindRoot(((IFn)const__891.getRawRoot()).invoke(const__198.getRawRoot(), const__907.getRawRoot()));
  const__915.setMeta((IPersistentMap)const__918);
  const__915.bindRoot(new clojure.core_some());
  const__919.setMeta((IPersistentMap)const__922);
  const__919.bindRoot(((IFn)const__891.getRawRoot()).invoke(const__198.getRawRoot(), const__915.getRawRoot()));
  const__923.setMeta((IPersistentMap)const__926);
  const__923.bindRoot(new clojure.core_dotimes());
  ((clojure.lang.Var)const__923).setMacro();
  const__640.setMeta((IPersistentMap)const__929);
  const__640.bindRoot(new clojure.core_map());
  const__930.setMeta((IPersistentMap)const__933);
  const__930.bindRoot(new clojure.core_mapcat());
  const__934.setMeta((IPersistentMap)const__937);
  const__934.bindRoot(new clojure.core_filter());
  const__938.setMeta((IPersistentMap)const__941);
  const__938.bindRoot(new clojure.core_remove());
  const__942.setMeta((IPersistentMap)const__945);
  const__942.bindRoot(new clojure.core_take());
  const__946.setMeta((IPersistentMap)const__949);
  const__946.bindRoot(new clojure.core_take_while());
  const__950.setMeta((IPersistentMap)const__953);
  const__950.bindRoot(new clojure.core_drop());
  const__954.setMeta((IPersistentMap)const__957);
  const__954.bindRoot(new clojure.core_drop_last());
  const__958.setMeta((IPersistentMap)const__961);
  const__958.bindRoot(new clojure.core_take_last());
  const__962.setMeta((IPersistentMap)const__965);
  const__962.bindRoot(new clojure.core_drop_while());
  const__966.setMeta((IPersistentMap)const__969);
  const__966.bindRoot(new clojure.core_cycle());
  const__970.setMeta((IPersistentMap)const__973);
  const__970.bindRoot(new clojure.core_split_at());
  const__974.setMeta((IPersistentMap)const__977);
  const__974.bindRoot(new clojure.core_split_with());
  const__978.setMeta((IPersistentMap)const__981);
  const__978.bindRoot(new clojure.core_repeat());
  const__982.setMeta((IPersistentMap)const__985);
  const__982.bindRoot(new clojure.core_replicate());
  const__986.setMeta((IPersistentMap)const__989);
  const__986.bindRoot(new clojure.core_iterate());
  const__990.setMeta((IPersistentMap)const__993);
  const__990.bindRoot(new clojure.core_range());
  const__994.setMeta((IPersistentMap)const__997);
  const__994.bindRoot(new clojure.core_merge());
  const__998.setMeta((IPersistentMap)const__1001);
  const__998.bindRoot(new clojure.core_merge_with());
  const__1002.setMeta((IPersistentMap)const__1005);
  const__1002.bindRoot(new clojure.core_zipmap());
  const__1006.setMeta((IPersistentMap)const__1009);
  const__1006.bindRoot(new clojure.core_declare());
  ((clojure.lang.Var)const__1006).setMacro();
  const__1010.setMeta((IPersistentMap)const__1013);
  const__1010.bindRoot(new clojure.core_line_seq());
  const__1014.setMeta((IPersistentMap)const__1017);
  const__1014.bindRoot(new clojure.core_comparator());
  const__1018.setMeta((IPersistentMap)const__1021);
  const__1018.bindRoot(new clojure.core_sort());
  const__1022.setMeta((IPersistentMap)const__1025);
  const__1022.bindRoot(new clojure.core_sort_by());
  const__1026.setMeta((IPersistentMap)const__1029);
  const__1026.bindRoot(new clojure.core_dorun());
  const__1030.setMeta((IPersistentMap)const__1033);
  const__1030.bindRoot(new clojure.core_doall());
  const__1034.setMeta((IPersistentMap)const__1037);
  const__1034.bindRoot(new clojure.core_nthnext());
  const__1038.setMeta((IPersistentMap)const__1041);
  const__1038.bindRoot(new clojure.core_nthrest());
  const__1042.setMeta((IPersistentMap)const__1045);
  const__1042.bindRoot(new clojure.core_partition());
  const__1046.setMeta((IPersistentMap)const__1049);
  const__1046.bindRoot(new clojure.core_eval());
  const__1050.setMeta((IPersistentMap)const__1053);
  const__1050.bindRoot(new clojure.core_doseq());
  ((clojure.lang.Var)const__1050).setMacro();
  const__1054.setMeta((IPersistentMap)const__1057);
  const__1054.bindRoot(new clojure.core_await());
  const__1058.setMeta((IPersistentMap)const__1061);
  const__1058.bindRoot(new clojure.core_await1());
  const__1062.setMeta((IPersistentMap)const__1065);
  const__1062.bindRoot(new clojure.core_await_for());
  const__923.setMeta((IPersistentMap)const__1068);
  const__923.bindRoot(new clojure.core_dotimes());
  ((clojure.lang.Var)const__923).setMacro();
  const__1069.setMeta((IPersistentMap)const__1072);
  const__1069.bindRoot(new clojure.core_transient());
  const__1073.setMeta((IPersistentMap)const__1076);
  const__1073.bindRoot(new clojure.core_persistent_BANG_());
  const__1077.setMeta((IPersistentMap)const__1080);
  const__1077.bindRoot(new clojure.core_conj_BANG_());
  const__1081.setMeta((IPersistentMap)const__1084);
  const__1081.bindRoot(new clojure.core_assoc_BANG_());
  const__1085.setMeta((IPersistentMap)const__1088);
  const__1085.bindRoot(new clojure.core_dissoc_BANG_());
  const__1089.setMeta((IPersistentMap)const__1092);
  const__1089.bindRoot(new clojure.core_pop_BANG_());
  const__1093.setMeta((IPersistentMap)const__1096);
  const__1093.bindRoot(new clojure.core_disj_BANG_());
  const__1097.setMeta((IPersistentMap)const__1100);
  const__1097.bindRoot(new clojure.core_into1());
  const__1101.setMeta((IPersistentMap)const__1104);
  const__1101.bindRoot(new clojure.core_import());
  ((clojure.lang.Var)const__1101).setMacro();
  const__1105.setMeta((IPersistentMap)const__1108);
  const__1105.bindRoot(new clojure.core_into_array());
  const__1109.setMeta((IPersistentMap)const__1112);
  const__1109.bindRoot(new clojure.core_array());
  const__1113.setMeta((IPersistentMap)const__1116);
  const__1113.bindRoot(new clojure.core_class());
  const__1117.setMeta((IPersistentMap)const__1120);
  const__1117.bindRoot(new clojure.core_type());
  const__1121.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1122, const__17, const__1123, const__15, "1.0", const__176, new clojure.core_num__inliner(), const__41, const__1124, const__16, "Coerce to Number"));
  const__1121.bindRoot(new clojure.core_num());
  const__1125.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1126, const__17, const__1127, const__15, "1.0", const__176, new clojure.core_long__inliner(), const__16, "Coerce to long"));
  const__1125.bindRoot(new clojure.core_long());
  const__1128.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1129, const__17, const__1130, const__15, "1.0", const__176, new clojure.core_float__inliner(), const__16, "Coerce to float"));
  const__1128.bindRoot(new clojure.core_float());
  const__1131.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1132, const__17, const__1133, const__15, "1.0", const__176, new clojure.core_double__inliner(), const__16, "Coerce to double"));
  const__1131.bindRoot(new clojure.core_double());
  const__1134.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1135, const__17, const__1136, const__15, "1.0", const__176, new clojure.core_short__inliner(), const__16, "Coerce to short"));
  const__1134.bindRoot(new clojure.core_short());
  const__1137.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1138, const__17, const__1139, const__15, "1.0", const__176, new clojure.core_byte__inliner(), const__16, "Coerce to byte"));
  const__1137.bindRoot(new clojure.core_byte());
  const__1140.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1141, const__17, const__1142, const__15, "1.1", const__176, new clojure.core_char__inliner(), const__16, "Coerce to char"));
  const__1140.bindRoot(new clojure.core_char());
  const__1143.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1144, const__17, const__1145, const__15, "1.0", const__176, new clojure.core_boolean__inliner(), const__16, "Coerce to boolean"));
  const__1143.bindRoot(new clojure.core_boolean());
  const__1146.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1147, const__17, const__1148, const__15, "1.3", const__176, new clojure.core_unchecked_byte__inliner(), const__16, "Coerce to byte. Subject to rounding or truncation."));
  const__1146.bindRoot(new clojure.core_unchecked_byte());
  const__1149.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1150, const__17, const__1151, const__15, "1.3", const__176, new clojure.core_unchecked_short__inliner(), const__16, "Coerce to short. Subject to rounding or truncation."));
  const__1149.bindRoot(new clojure.core_unchecked_short());
  const__1152.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1153, const__17, const__1154, const__15, "1.3", const__176, new clojure.core_unchecked_char__inliner(), const__16, "Coerce to char. Subject to rounding or truncation."));
  const__1152.bindRoot(new clojure.core_unchecked_char());
  const__1155.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1156, const__17, const__1157, const__15, "1.3", const__176, new clojure.core_unchecked_int__inliner(), const__16, "Coerce to int. Subject to rounding or truncation."));
  const__1155.bindRoot(new clojure.core_unchecked_int());
  const__1158.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1159, const__17, const__1160, const__15, "1.3", const__176, new clojure.core_unchecked_long__inliner(), const__16, "Coerce to long. Subject to rounding or truncation."));
  const__1158.bindRoot(new clojure.core_unchecked_long());
  const__1161.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1162, const__17, const__1163, const__15, "1.3", const__176, new clojure.core_unchecked_float__inliner(), const__16, "Coerce to float. Subject to rounding."));
  const__1161.bindRoot(new clojure.core_unchecked_float());
  const__1164.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1165, const__17, const__1166, const__15, "1.3", const__176, new clojure.core_unchecked_double__inliner(), const__16, "Coerce to double. Subject to rounding."));
  const__1164.bindRoot(new clojure.core_unchecked_double());
  const__1167.setMeta((IPersistentMap)const__1170);
  const__1167.bindRoot(new clojure.core_number_QMARK_());
  const__1171.setMeta((IPersistentMap)const__1174);
  const__1171.bindRoot(new clojure.core_mod());
  const__1175.setMeta((IPersistentMap)const__1178);
  const__1175.bindRoot(new clojure.core_ratio_QMARK_());
  const__1179.setMeta((IPersistentMap)const__1183);
  const__1179.bindRoot(new clojure.core_numerator());
  const__1184.setMeta((IPersistentMap)const__1187);
  const__1184.bindRoot(new clojure.core_denominator());
  const__1188.setMeta((IPersistentMap)const__1191);
  const__1188.bindRoot(new clojure.core_decimal_QMARK_());
  const__1192.setMeta((IPersistentMap)const__1195);
  const__1192.bindRoot(new clojure.core_float_QMARK_());
  const__1196.setMeta((IPersistentMap)const__1199);
  const__1196.bindRoot(new clojure.core_rational_QMARK_());
  const__1200.setMeta((IPersistentMap)const__1204);
  const__1200.bindRoot(new clojure.core_bigint());
  const__1205.setMeta((IPersistentMap)const__1208);
  const__1205.bindRoot(new clojure.core_biginteger());
  const__1209.setMeta((IPersistentMap)const__1213);
  const__1209.bindRoot(new clojure.core_bigdec());
  const__1214.setDynamic(true);
  const__1214.setMeta((IPersistentMap)const__1216);
  const__1214.bindRoot(Boolean.FALSE);
  ((IFn)new clojure.core_fn__4439()).invoke();
  ((IFn)new clojure.core_fn__4445()).invoke();
  const__1217.setMeta((IPersistentMap)const__1220);
  const__1217.bindRoot(new clojure.core_pr_on());
  const__1221.setDynamic(true);
  const__1221.setMeta((IPersistentMap)const__1224);
  const__1221.bindRoot(new clojure.core_pr());
  const__1225.setMeta((IPersistentMap)const__1227);
  const__1225.bindRoot(((java.lang.String)java.lang.System.getProperty((java.lang.String)((java.lang.String)"line.separator"))));
  const__1228.setMeta((IPersistentMap)const__1231);
  const__1228.bindRoot(new clojure.core_newline());
  const__1232.setMeta((IPersistentMap)const__1235);
  const__1232.bindRoot(new clojure.core_flush());
  const__1236.setMeta((IPersistentMap)const__1239);
  const__1236.bindRoot(new clojure.core_prn());
  const__1240.setMeta((IPersistentMap)const__1243);
  const__1240.bindRoot(new clojure.core_print());
  const__1244.setMeta((IPersistentMap)const__1247);
  const__1244.bindRoot(new clojure.core_println());
  const__1248.setMeta((IPersistentMap)const__1251);
  const__1248.bindRoot(new clojure.core_read());
  const__1252.setMeta((IPersistentMap)const__1255);
  const__1252.bindRoot(new clojure.core_read_line());
  const__1256.setMeta((IPersistentMap)const__1259);
  const__1256.bindRoot(new clojure.core_read_string());
  const__1260.setMeta((IPersistentMap)const__1263);
  const__1260.bindRoot(new clojure.core_subvec());
  const__1264.setMeta((IPersistentMap)const__1267);
  const__1264.bindRoot(new clojure.core_with_open());
  ((clojure.lang.Var)const__1264).setMacro();
  const__1268.setMeta((IPersistentMap)const__1271);
  const__1268.bindRoot(new clojure.core_doto());
  ((clojure.lang.Var)const__1268).setMacro();
  const__1272.setMeta((IPersistentMap)const__1275);
  const__1272.bindRoot(new clojure.core_memfn());
  ((clojure.lang.Var)const__1272).setMacro();
  const__1276.setMeta((IPersistentMap)const__1279);
  const__1276.bindRoot(new clojure.core_time());
  ((clojure.lang.Var)const__1276).setMacro();
  ((Namespace)RT.CURRENT_NS.deref()).importClass(java.lang.reflect.Array.class);
  const__1280.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1281, const__17, const__1282, const__15, "1.0", const__176, new clojure.core_alength__inliner(), const__16, "Returns the length of the Java array. Works on arrays of all\n  types."));
  const__1280.bindRoot(new clojure.core_alength());
  const__1283.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1284, const__17, const__1285, const__15, "1.0", const__176, new clojure.core_aclone__inliner(), const__16, "Returns a clone of the Java array. Works on arrays of known\n  types."));
  const__1283.bindRoot(new clojure.core_aclone());
  const__1286.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1287, const__17, const__1288, const__15, "1.0", const__314, const__1289, const__176, new clojure.core_aget__inliner(), const__16, "Returns the value at the index/indices. Works on Java arrays of all\n  types."));
  const__1286.bindRoot(new clojure.core_aget());
  const__1290.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1291, const__17, const__1292, const__15, "1.0", const__314, const__1293, const__176, new clojure.core_aset__inliner(), const__16, "Sets the value at the index/indices. Works on Java arrays of\n  reference types. Returns val."));
  const__1290.bindRoot(new clojure.core_aset());
  const__1294.setMeta((IPersistentMap)const__1297);
  const__1294.bindRoot(new clojure.core_def_aset());
  ((clojure.lang.Var)const__1294).setMacro();
  const__1298.setMeta((IPersistentMap)const__1301);
  const__1298.bindRoot(new clojure.core_aset_int());
  const__1302.setMeta((IPersistentMap)const__1305);
  const__1302.bindRoot(new clojure.core_aset_long());
  const__1306.setMeta((IPersistentMap)const__1309);
  const__1306.bindRoot(new clojure.core_aset_boolean());
  const__1310.setMeta((IPersistentMap)const__1313);
  const__1310.bindRoot(new clojure.core_aset_float());
  const__1314.setMeta((IPersistentMap)const__1317);
  const__1314.bindRoot(new clojure.core_aset_double());
  const__1318.setMeta((IPersistentMap)const__1321);
  const__1318.bindRoot(new clojure.core_aset_short());
  const__1322.setMeta((IPersistentMap)const__1325);
  const__1322.bindRoot(new clojure.core_aset_byte());
  const__1326.setMeta((IPersistentMap)const__1329);
  const__1326.bindRoot(new clojure.core_aset_char());
  const__1330.setMeta((IPersistentMap)const__1333);
  const__1330.bindRoot(new clojure.core_make_array());
  const__1334.setMeta((IPersistentMap)const__1337);
  const__1334.bindRoot(new clojure.core_to_array_2d());
  const__1338.setMeta((IPersistentMap)const__1341);
  const__1338.bindRoot(new clojure.core_macroexpand_1());
  const__1342.setMeta((IPersistentMap)const__1345);
  const__1342.bindRoot(new clojure.core_macroexpand());
  const__1346.setMeta((IPersistentMap)const__1349);
  const__1346.bindRoot(new clojure.core_create_struct());
  const__1350.setMeta((IPersistentMap)const__1353);
  const__1350.bindRoot(new clojure.core_defstruct());
  ((clojure.lang.Var)const__1350).setMacro();
  const__1354.setMeta((IPersistentMap)const__1357);
  const__1354.bindRoot(new clojure.core_struct_map());
  const__1358.setMeta((IPersistentMap)const__1361);
  const__1358.bindRoot(new clojure.core_struct());
  const__1362.setMeta((IPersistentMap)const__1365);
  const__1362.bindRoot(new clojure.core_accessor());
  const__1366.setMeta((IPersistentMap)const__1369);
  const__1366.bindRoot(new clojure.core_load_reader());
  const__1370.setMeta((IPersistentMap)const__1373);
  const__1370.bindRoot(new clojure.core_load_string());
  const__1374.setMeta((IPersistentMap)const__1377);
  const__1374.bindRoot(new clojure.core_set());
  const__1378.setMeta((IPersistentMap)const__1381);
  const__1378.bindRoot(new clojure.core_filter_key());
  const__1382.setMeta((IPersistentMap)const__1385);
  const__1382.bindRoot(new clojure.core_find_ns());
  const__1386.setMeta((IPersistentMap)const__1389);
  const__1386.bindRoot(new clojure.core_create_ns());
  const__1390.setMeta((IPersistentMap)const__1393);
  const__1390.bindRoot(new clojure.core_remove_ns());
  const__1394.setMeta((IPersistentMap)const__1397);
  const__1394.bindRoot(new clojure.core_all_ns());
  const__1398.setMeta((IPersistentMap)const__1401);
  const__1398.bindRoot(new clojure.core_the_ns());
  const__1402.setMeta((IPersistentMap)const__1405);
  const__1402.bindRoot(new clojure.core_ns_name());
  const__1406.setMeta((IPersistentMap)const__1409);
  const__1406.bindRoot(new clojure.core_ns_map());
  const__1410.setMeta((IPersistentMap)const__1413);
  const__1410.bindRoot(new clojure.core_ns_unmap());
  const__1414.setMeta((IPersistentMap)const__1417);
  const__1414.bindRoot(new clojure.core_ns_publics());
  const__1418.setMeta((IPersistentMap)const__1421);
  const__1418.bindRoot(new clojure.core_ns_imports());
  const__1422.setMeta((IPersistentMap)const__1425);
  const__1422.bindRoot(new clojure.core_ns_interns());
  const__1426.setMeta((IPersistentMap)const__1429);
  const__1426.bindRoot(new clojure.core_refer());
  const__1430.setMeta((IPersistentMap)const__1433);
  const__1430.bindRoot(new clojure.core_ns_refers());
  const__1434.setMeta((IPersistentMap)const__1437);
  const__1434.bindRoot(new clojure.core_alias());
  const__1438.setMeta((IPersistentMap)const__1441);
  const__1438.bindRoot(new clojure.core_ns_aliases());
  const__1442.setMeta((IPersistentMap)const__1445);
  const__1442.bindRoot(new clojure.core_ns_unalias());
  const__1446.setMeta((IPersistentMap)const__1449);
  const__1446.bindRoot(new clojure.core_take_nth());
  const__1450.setMeta((IPersistentMap)const__1453);
  const__1450.bindRoot(new clojure.core_interleave());
  const__1454.setMeta((IPersistentMap)const__1457);
  const__1454.bindRoot(new clojure.core_var_get());
  const__1458.setMeta((IPersistentMap)const__1461);
  const__1458.bindRoot(new clojure.core_var_set());
  const__1462.setMeta((IPersistentMap)const__1465);
  const__1462.bindRoot(new clojure.core_with_local_vars());
  ((clojure.lang.Var)const__1462).setMacro();
  const__1466.setMeta((IPersistentMap)const__1469);
  const__1466.bindRoot(new clojure.core_ns_resolve());
  const__1470.setMeta((IPersistentMap)const__1473);
  const__1470.bindRoot(new clojure.core_resolve());
  const__1474.setMeta((IPersistentMap)const__1477);
  const__1474.bindRoot(new clojure.core_array_map());
  const__1478.setMeta((IPersistentMap)const__1481);
  const__1478.bindRoot(new clojure.core_destructure());
  const__25.setMeta((IPersistentMap)const__1487);
  const__25.bindRoot(new clojure.core_let());
  ((clojure.lang.Var)const__25).setMacro();
  const__1488.setMeta((IPersistentMap)const__1491);
  const__1488.bindRoot(new clojure.core_maybe_destructured());
  const__32.setMeta((IPersistentMap)const__1495);
  const__32.bindRoot(new clojure.core_fn());
  ((clojure.lang.Var)const__32).setMacro();
  const__29.setMeta((IPersistentMap)const__1499);
  const__29.bindRoot(new clojure.core_loop());
  ((clojure.lang.Var)const__29).setMacro();
  const__1500.setMeta((IPersistentMap)const__1503);
  const__1500.bindRoot(new clojure.core_when_first());
  ((clojure.lang.Var)const__1500).setMacro();
  const__1504.setMeta((IPersistentMap)const__1507);
  const__1504.bindRoot(new clojure.core_lazy_cat());
  ((clojure.lang.Var)const__1504).setMacro();
  const__1508.setMeta((IPersistentMap)const__1511);
  const__1508.bindRoot(new clojure.core_for());
  ((clojure.lang.Var)const__1508).setMacro();
  const__1512.setMeta((IPersistentMap)const__1515);
  const__1512.bindRoot(new clojure.core_comment());
  ((clojure.lang.Var)const__1512).setMacro();
  const__1516.setMeta((IPersistentMap)const__1519);
  const__1516.bindRoot(new clojure.core_with_out_str());
  ((clojure.lang.Var)const__1516).setMacro();
  const__1520.setMeta((IPersistentMap)const__1523);
  const__1520.bindRoot(new clojure.core_with_in_str());
  ((clojure.lang.Var)const__1520).setMacro();
  const__1524.setMeta((IPersistentMap)const__1527);
  const__1524.bindRoot(new clojure.core_pr_str());
  const__1528.setMeta((IPersistentMap)const__1531);
  const__1528.bindRoot(new clojure.core_prn_str());
  const__1532.setMeta((IPersistentMap)const__1535);
  const__1532.bindRoot(new clojure.core_print_str());
  const__1536.setMeta((IPersistentMap)const__1539);
  const__1536.bindRoot(new clojure.core_println_str());
  ((Namespace)RT.CURRENT_NS.deref()).importClass(clojure.lang.ExceptionInfo.class);
  ((Namespace)RT.CURRENT_NS.deref()).importClass(clojure.lang.IExceptionInfo.class);
  const__1540.setMeta((IPersistentMap)const__1543);
  const__1540.bindRoot(new clojure.core_ex_info());
  const__1544.setMeta((IPersistentMap)const__1547);
  const__1544.bindRoot(new clojure.core_ex_data());
  const__1548.setMeta((IPersistentMap)const__1551);
  const__1548.bindRoot(new clojure.core_assert());
  ((clojure.lang.Var)const__1548).setMacro();
  const__1552.setMeta((IPersistentMap)const__1555);
  const__1552.bindRoot(new clojure.core_test());
  const__1556.setMeta((IPersistentMap)const__1560);
  const__1556.bindRoot(new clojure.core_re_pattern());
  const__1561.setMeta((IPersistentMap)const__1565);
  const__1561.bindRoot(new clojure.core_re_matcher());
  const__1566.setMeta((IPersistentMap)const__1569);
  const__1566.bindRoot(new clojure.core_re_groups());
  const__1570.setMeta((IPersistentMap)const__1573);
  const__1570.bindRoot(new clojure.core_re_seq());
  const__1574.setMeta((IPersistentMap)const__1577);
  const__1574.bindRoot(new clojure.core_re_matches());
  const__1578.setMeta((IPersistentMap)const__1581);
  const__1578.bindRoot(new clojure.core_re_find());
  const__1582.setMeta((IPersistentMap)const__1585);
  const__1582.bindRoot(new clojure.core_rand());
  const__1586.setMeta((IPersistentMap)const__1589);
  const__1586.bindRoot(new clojure.core_rand_int());
  const__1590.setMeta((IPersistentMap)const__1593);
  const__1590.bindRoot(new clojure.core_defn_());
  ((clojure.lang.Var)const__1590).setMacro();
  const__1594.setMeta((IPersistentMap)const__1597);
  const__1594.bindRoot(new clojure.core_tree_seq());
  const__1598.setMeta((IPersistentMap)const__1601);
  const__1598.bindRoot(new clojure.core_file_seq());
  const__1602.setMeta((IPersistentMap)const__1605);
  const__1602.bindRoot(new clojure.core_xml_seq());
  const__1606.setMeta((IPersistentMap)const__1609);
  const__1606.bindRoot(new clojure.core_special_symbol_QMARK_());
  const__1610.setMeta((IPersistentMap)const__1613);
  const__1610.bindRoot(new clojure.core_var_QMARK_());
  const__1614.setMeta((IPersistentMap)const__1617);
  const__1614.bindRoot(new clojure.core_subs());
  const__1618.setMeta((IPersistentMap)const__1621);
  const__1618.bindRoot(new clojure.core_max_key());
  const__1622.setMeta((IPersistentMap)const__1625);
  const__1622.bindRoot(new clojure.core_min_key());
  const__1626.setMeta((IPersistentMap)const__1629);
  const__1626.bindRoot(new clojure.core_distinct());
  const__1630.setMeta((IPersistentMap)const__1633);
  const__1630.bindRoot(new clojure.core_replace());
  const__1634.setMeta((IPersistentMap)const__1637);
  const__1634.bindRoot(new clojure.core_dosync());
  ((clojure.lang.Var)const__1634).setMacro();
  const__1638.setMeta((IPersistentMap)const__1641);
  const__1638.bindRoot(new clojure.core_with_precision());
  ((clojure.lang.Var)const__1638).setMacro();
  const__1642.setMeta((IPersistentMap)const__1645);
  const__1642.bindRoot(new clojure.core_mk_bound_fn());
  const__1646.setMeta((IPersistentMap)const__1649);
  const__1646.bindRoot(new clojure.core_subseq());
  const__1650.setMeta((IPersistentMap)const__1653);
  const__1650.bindRoot(new clojure.core_rsubseq());
  const__1654.setMeta((IPersistentMap)const__1657);
  const__1654.bindRoot(new clojure.core_repeatedly());
  const__1658.setMeta((IPersistentMap)const__1661);
  const__1658.bindRoot(new clojure.core_add_classpath());
  const__1662.setMeta((IPersistentMap)const__1665);
  const__1662.bindRoot(new clojure.core_hash());
  const__1666.setMeta((IPersistentMap)const__1669);
  const__1666.bindRoot(new clojure.core_interpose());
  const__1670.setMeta((IPersistentMap)const__1673);
  const__1670.bindRoot(new clojure.core_definline());
  ((clojure.lang.Var)const__1670).setMacro();
  const__1674.setMeta((IPersistentMap)const__1677);
  const__1674.bindRoot(new clojure.core_empty());
  const__1678.setMeta((IPersistentMap)const__1681);
  const__1678.bindRoot(new clojure.core_amap());
  ((clojure.lang.Var)const__1678).setMacro();
  const__1682.setMeta((IPersistentMap)const__1685);
  const__1682.bindRoot(new clojure.core_areduce());
  ((clojure.lang.Var)const__1682).setMacro();
  const__1686.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1687, const__17, const__1688, const__15, "1.0", const__314, const__1690, const__176, new clojure.core_float_array__inliner(), const__16, "Creates an array of floats"));
  const__1686.bindRoot(new clojure.core_float_array());
  const__1691.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1692, const__17, const__1693, const__15, "1.1", const__314, const__1694, const__176, new clojure.core_boolean_array__inliner(), const__16, "Creates an array of booleans"));
  const__1691.bindRoot(new clojure.core_boolean_array());
  const__1695.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1696, const__17, const__1697, const__15, "1.1", const__314, const__1698, const__176, new clojure.core_byte_array__inliner(), const__16, "Creates an array of bytes"));
  const__1695.bindRoot(new clojure.core_byte_array());
  const__1699.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1700, const__17, const__1701, const__15, "1.1", const__314, const__1702, const__176, new clojure.core_char_array__inliner(), const__16, "Creates an array of chars"));
  const__1699.bindRoot(new clojure.core_char_array());
  const__1703.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1704, const__17, const__1705, const__15, "1.1", const__314, const__1706, const__176, new clojure.core_short_array__inliner(), const__16, "Creates an array of shorts"));
  const__1703.bindRoot(new clojure.core_short_array());
  const__1707.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1708, const__17, const__1709, const__15, "1.0", const__314, const__1710, const__176, new clojure.core_double_array__inliner(), const__16, "Creates an array of doubles"));
  const__1707.bindRoot(new clojure.core_double_array());
  const__1711.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1712, const__17, const__1713, const__15, "1.2", const__314, const__1714, const__176, new clojure.core_object_array__inliner(), const__16, "Creates an array of objects"));
  const__1711.bindRoot(new clojure.core_object_array());
  const__1715.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1716, const__17, const__1717, const__15, "1.0", const__314, const__1718, const__176, new clojure.core_int_array__inliner(), const__16, "Creates an array of ints"));
  const__1715.bindRoot(new clojure.core_int_array());
  const__1719.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__1720, const__17, const__1721, const__15, "1.0", const__314, const__1722, const__176, new clojure.core_long_array__inliner(), const__16, "Creates an array of longs"));
  const__1719.bindRoot(new clojure.core_long_array());
  const__1723.setMeta((IPersistentMap)const__1726);
  const__1723.bindRoot(new clojure.core_booleans());
  ((IFn)const__847.getRawRoot()).invoke(const__1723, const__101.getRawRoot(), const__176, new clojure.core_booleans());
  const__1727.setMeta((IPersistentMap)const__1730);
  const__1727.bindRoot(new clojure.core_bytes());
  ((IFn)const__847.getRawRoot()).invoke(const__1727, const__101.getRawRoot(), const__176, new clojure.core_bytes());
  const__1731.setMeta((IPersistentMap)const__1734);
  const__1731.bindRoot(new clojure.core_chars());
  ((IFn)const__847.getRawRoot()).invoke(const__1731, const__101.getRawRoot(), const__176, new clojure.core_chars());
  const__1735.setMeta((IPersistentMap)const__1738);
  const__1735.bindRoot(new clojure.core_shorts());
  ((IFn)const__847.getRawRoot()).invoke(const__1735, const__101.getRawRoot(), const__176, new clojure.core_shorts());
  const__1739.setMeta((IPersistentMap)const__1742);
  const__1739.bindRoot(new clojure.core_floats());
  ((IFn)const__847.getRawRoot()).invoke(const__1739, const__101.getRawRoot(), const__176, new clojure.core_floats());
  const__1743.setMeta((IPersistentMap)const__1746);
  const__1743.bindRoot(new clojure.core_ints());
  ((IFn)const__847.getRawRoot()).invoke(const__1743, const__101.getRawRoot(), const__176, new clojure.core_ints());
  const__1747.setMeta((IPersistentMap)const__1750);
  const__1747.bindRoot(new clojure.core_doubles());
  ((IFn)const__847.getRawRoot()).invoke(const__1747, const__101.getRawRoot(), const__176, new clojure.core_doubles());
  const__1751.setMeta((IPersistentMap)const__1754);
  const__1751.bindRoot(new clojure.core_longs());
  ((IFn)const__847.getRawRoot()).invoke(const__1751, const__101.getRawRoot(), const__176, new clojure.core_longs());
  ((Namespace)RT.CURRENT_NS.deref()).importClass(java.util.concurrent.BlockingQueue.class);
  ((Namespace)RT.CURRENT_NS.deref()).importClass(java.util.concurrent.LinkedBlockingQueue.class);
  const__1755.setMeta((IPersistentMap)const__1758);
  const__1755.bindRoot(new clojure.core_seque());
  const__1759.setMeta((IPersistentMap)const__1762);
  const__1759.bindRoot(new clojure.core_class_QMARK_());
  const__1763.setMeta((IPersistentMap)const__1766);
  const__1763.bindRoot(new clojure.core_is_annotation_QMARK_());
  const__1767.setMeta((IPersistentMap)const__1770);
  const__1767.bindRoot(new clojure.core_is_runtime_annotation_QMARK_());
  const__1771.setMeta((IPersistentMap)const__1774);
  const__1771.bindRoot(new clojure.core_descriptor());
  const__1775.setMeta((IPersistentMap)const__1778);
  const__1779.setMeta((IPersistentMap)const__1781);
  const__1782.setMeta((IPersistentMap)const__1785);
  const__1782.bindRoot(new clojure.core_print_annotation_value());
  const__1786.setMeta((IPersistentMap)const__1789);
  const__1786.bindRoot(new clojure.core_add_annotation());
  const__1775.setMeta((IPersistentMap)const__1792);
  const__1775.bindRoot(new clojure.core_process_annotation());
  const__1779.setMeta((IPersistentMap)const__1795);
  const__1779.bindRoot(new clojure.core_process_print_annotation());
  const__1796.setMeta((IPersistentMap)const__1799);
  const__1796.bindRoot(new clojure.core_add_annotations());
  const__1800.setMeta((IPersistentMap)const__1803);
  const__1800.bindRoot(new clojure.core_alter_var_root());
  const__1804.setMeta((IPersistentMap)const__1807);
  const__1804.bindRoot(new clojure.core_bound_QMARK_());
  const__1808.setMeta((IPersistentMap)const__1811);
  const__1808.bindRoot(new clojure.core_thread_bound_QMARK_());
  const__1812.setMeta((IPersistentMap)const__1815);
  const__1812.bindRoot(new clojure.core_make_hierarchy());
  const__647.setMeta((IPersistentMap)const__1817);
  const__647.bindRoot(((IFn)const__1812.getRawRoot()).invoke());
  const__1818.setMeta((IPersistentMap)const__1821);
  const__1818.bindRoot(new clojure.core_not_empty());
  const__1822.setMeta((IPersistentMap)const__1825);
  const__1822.bindRoot(new clojure.core_bases());
  const__1826.setMeta((IPersistentMap)const__1829);
  const__1826.bindRoot(new clojure.core_supers());
  const__1830.setMeta((IPersistentMap)const__1833);
  const__1830.bindRoot(new clojure.core_isa_QMARK_());
  const__1834.setMeta((IPersistentMap)const__1837);
  const__1834.bindRoot(new clojure.core_parents());
  const__1838.setMeta((IPersistentMap)const__1841);
  const__1838.bindRoot(new clojure.core_ancestors());
  const__1842.setMeta((IPersistentMap)const__1845);
  const__1842.bindRoot(new clojure.core_descendants());
  const__1846.setMeta((IPersistentMap)const__1849);
  const__1846.bindRoot(new clojure.core_derive());
  const__1850.setMeta((IPersistentMap)const__1852);
  const__1853.setMeta((IPersistentMap)const__1856);
  const__1853.bindRoot(new clojure.core_underive());
  const__1857.setMeta((IPersistentMap)const__1860);
  const__1857.bindRoot(new clojure.core_distinct_QMARK_());
  const__1861.setMeta((IPersistentMap)const__1864);
  const__1861.bindRoot(new clojure.core_iterator_seq());
  const__1865.setMeta((IPersistentMap)const__1868);
  const__1865.bindRoot(new clojure.core_enumeration_seq());
  const__1869.setMeta((IPersistentMap)const__1872);
  const__1869.bindRoot(new clojure.core_format());
  const__1873.setMeta((IPersistentMap)const__1876);
  const__1873.bindRoot(new clojure.core_printf());
  const__1877.setMeta((IPersistentMap)const__1879);
  const__1880.setMeta((IPersistentMap)const__1883);
  const__1880.bindRoot(new clojure.core_with_loading_context());
  ((clojure.lang.Var)const__1880).setMacro();
  const__1884.setMeta((IPersistentMap)const__1887);
  const__1884.bindRoot(new clojure.core_ns());
  ((clojure.lang.Var)const__1884).setMacro();
  const__1888.setMeta((IPersistentMap)const__1891);
  const__1888.bindRoot(new clojure.core_refer_clojure());
  ((clojure.lang.Var)const__1888).setMacro();
  const__1892.setMeta((IPersistentMap)const__1895);
  const__1892.bindRoot(new clojure.core_defonce());
  ((clojure.lang.Var)const__1892).setMacro();
  ((IFn)new clojure.core_fn__4954()).invoke();
  ((IFn)new clojure.core_fn__4957()).invoke();
  ((IFn)new clojure.core_fn__4960()).invoke();
  const__1896.setMeta((IPersistentMap)const__1899);
  const__1896.bindRoot(new clojure.core_throw_if());
  const__1900.setMeta((IPersistentMap)const__1903);
  const__1900.bindRoot(new clojure.core_libspec_QMARK_());
  const__1904.setMeta((IPersistentMap)const__1907);
  const__1904.bindRoot(new clojure.core_prependss());
  const__1908.setMeta((IPersistentMap)const__1911);
  const__1908.bindRoot(new clojure.core_root_resource());
  const__1912.setMeta((IPersistentMap)const__1915);
  const__1912.bindRoot(new clojure.core_root_directory());
  const__1916.setMeta((IPersistentMap)const__1918);
  const__1919.setMeta((IPersistentMap)const__1922);
  const__1919.bindRoot(new clojure.core_load_one());
  const__1923.setMeta((IPersistentMap)const__1926);
  const__1923.bindRoot(new clojure.core_load_all());
  const__1927.setMeta((IPersistentMap)const__1930);
  const__1927.bindRoot(new clojure.core_load_lib());
  const__1931.setMeta((IPersistentMap)const__1934);
  const__1931.bindRoot(new clojure.core_load_libs());
  const__1935.setMeta((IPersistentMap)const__1938);
  const__1935.bindRoot(new clojure.core_check_cyclic_dependency());
  const__1939.setMeta((IPersistentMap)const__1942);
  const__1939.bindRoot(new clojure.core_require());
  const__1943.setMeta((IPersistentMap)const__1946);
  const__1943.bindRoot(new clojure.core_use());
  const__1947.setMeta((IPersistentMap)const__1950);
  const__1947.bindRoot(new clojure.core_loaded_libs());
  const__1916.setMeta((IPersistentMap)const__1953);
  const__1916.bindRoot(new clojure.core_load());
  const__1954.setMeta((IPersistentMap)const__1957);
  const__1954.bindRoot(new clojure.core_compile());
  const__1958.setMeta((IPersistentMap)const__1961);
  const__1958.bindRoot(new clojure.core_get_in());
  const__1962.setMeta((IPersistentMap)const__1965);
  const__1962.bindRoot(new clojure.core_assoc_in());
  const__1966.setMeta((IPersistentMap)const__1969);
  const__1966.bindRoot(new clojure.core_update_in());
  const__1970.setMeta((IPersistentMap)const__1973);
  const__1970.bindRoot(new clojure.core_empty_QMARK_());
  const__1974.setMeta((IPersistentMap)const__1977);
  const__1974.bindRoot(new clojure.core_coll_QMARK_());
  const__1978.setMeta((IPersistentMap)const__1981);
  const__1978.bindRoot(new clojure.core_list_QMARK_());
  const__1982.setMeta((IPersistentMap)const__1985);
  const__1982.bindRoot(new clojure.core_set_QMARK_());
  const__1986.setMeta((IPersistentMap)const__1989);
  const__1986.bindRoot(new clojure.core_ifn_QMARK_());
  const__1990.setMeta((IPersistentMap)const__1993);
  const__1990.bindRoot(new clojure.core_fn_QMARK_());
  const__1994.setMeta((IPersistentMap)const__1997);
  const__1994.bindRoot(new clojure.core_associative_QMARK_());
  const__1998.setMeta((IPersistentMap)const__2001);
  const__1998.bindRoot(new clojure.core_sequential_QMARK_());
  const__2002.setMeta((IPersistentMap)const__2005);
  const__2002.bindRoot(new clojure.core_sorted_QMARK_());
  const__2006.setMeta((IPersistentMap)const__2009);
  const__2006.bindRoot(new clojure.core_counted_QMARK_());
  const__2010.setMeta((IPersistentMap)const__2013);
  const__2010.bindRoot(new clojure.core_reversible_QMARK_());
  const__2014.setDynamic(true);
  const__2014.setMeta((IPersistentMap)const__2016);
  const__2017.setDynamic(true);
  const__2017.setMeta((IPersistentMap)const__2019);
  const__2020.setDynamic(true);
  const__2020.setMeta((IPersistentMap)const__2022);
  const__2023.setDynamic(true);
  const__2023.setMeta((IPersistentMap)const__2025);
  const__2026.setMeta((IPersistentMap)const__2029);
  const__2026.bindRoot(new clojure.core_trampoline());
  const__2030.setMeta((IPersistentMap)const__2033);
  const__2030.bindRoot(new clojure.core_intern());
  const__2034.setMeta((IPersistentMap)const__2037);
  const__2034.bindRoot(new clojure.core_while());
  ((clojure.lang.Var)const__2034).setMacro();
  const__2038.setMeta((IPersistentMap)const__2041);
  const__2038.bindRoot(new clojure.core_memoize());
  const__1834.setMeta((IPersistentMap)const__2043);
  const__1834.bindRoot(((IFn)const__2038.getRawRoot()).invoke(const__1834.getRawRoot()));
  const__1822.setMeta((IPersistentMap)const__2045);
  const__1822.bindRoot(((IFn)const__2038.getRawRoot()).invoke(const__1822.getRawRoot()));
  const__2046.setMeta((IPersistentMap)const__2049);
  const__2046.bindRoot(new clojure.core_condp());
  ((clojure.lang.Var)const__2046).setMacro();
  ((IFn)const__847.getRawRoot()).invoke(const__2050, const__101.getRawRoot(), const__15, "1.0");
  ((IFn)const__847.getRawRoot()).invoke(const__0, const__101.getRawRoot(), const__15, "1.0");
  ((IFn)const__847.getRawRoot()).invoke(const__2051, const__101.getRawRoot(), const__15, "1.0");
  const__2052.setMeta((IPersistentMap)const__2055);
  const__2052.bindRoot(new clojure.core_add_doc_and_meta());
  ((clojure.lang.Var)const__2052).setMacro();
  ((IFn)const__847.getRawRoot()).invoke(const__2056, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2057, const__16, "The path of the file being evaluated, as a String.\n\n  When there is no file, e.g. in the REPL, the value is not defined."));
  ((IFn)const__847.getRawRoot()).invoke(const__2058, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2059, const__16, "A sequence of the supplied command line arguments, or nil if\n  none were supplied"));
  ((IFn)const__847.getRawRoot()).invoke(const__2060, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2061, const__16, "When set to true, the compiler will emit warnings when reflection is\n  needed to resolve Java method calls or field accesses.\n\n  Defaults to false."));
  ((IFn)const__847.getRawRoot()).invoke(const__2062, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2063, const__16, "Specifies the directory where 'compile' will write out .class\n  files. This directory must be in the classpath for 'compile' to\n  work.\n\n  Defaults to \"classes\""));
  ((IFn)const__847.getRawRoot()).invoke(const__2064, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2065, const__16, "Set to true when compiling files, false otherwise."));
  ((IFn)const__847.getRawRoot()).invoke(const__2066, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2067, const__16, "While bound to true, compilations of +, -, *, inc, dec and the\n  coercions will be done without overflow checks. Default: false."));
  ((IFn)const__847.getRawRoot()).invoke(const__2068, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2069, const__16, "A map of keys to options.\n  Note, when binding dynamically make sure to merge with previous value.\n  Supported options:\n  :elide-meta - a collection of metadata keys to elide during compilation.\n  :disable-locals-clearing - set to true to disable clearing, useful for using a debugger\n  Alpha, subject to change."));
  ((IFn)const__847.getRawRoot()).invoke(const__2070, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2071, const__16, "A clojure.lang.Namespace object representing the current namespace."));
  ((IFn)const__847.getRawRoot()).invoke(const__2072, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2073, const__16, "A java.io.Reader object representing standard input for read operations.\n\n  Defaults to System/in, wrapped in a LineNumberingPushbackReader"));
  ((IFn)const__847.getRawRoot()).invoke(const__2074, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2075, const__16, "A java.io.Writer object representing standard output for print operations.\n\n  Defaults to System/out, wrapped in an OutputStreamWriter"));
  ((IFn)const__847.getRawRoot()).invoke(const__2076, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2077, const__16, "A java.io.Writer object representing standard error for print operations.\n\n  Defaults to System/err, wrapped in a PrintWriter"));
  ((IFn)const__847.getRawRoot()).invoke(const__2078, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2079, const__16, "When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."));
  ((IFn)const__847.getRawRoot()).invoke(const__2080, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2081, const__16, "If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."));
  ((IFn)const__847.getRawRoot()).invoke(const__2082, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2083, const__16, "When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."));
  ((IFn)const__847.getRawRoot()).invoke(const__2084, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2085, const__16, "When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"));
  ((IFn)const__847.getRawRoot()).invoke(const__2086, const__994.getRawRoot(), ((IFn)const__101.getRawRoot()).invoke(const__2087, const__16, "Defaults to true (or value specified by system property, see below)\n  ***This setting implies that the full power of the reader is in play,\n  including syntax that can cause code to execute. It should never be\n  used with untrusted sources. See also: clojure.edn/read.***\n\n  When set to logical false in the thread-local binding,\n  the eval reader (#=) and record/type literal syntax are disabled in read/load.\n  Example (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\n  The default binding can be controlled by the system property\n  'clojure.read.eval' System properties can be set on the command line\n  like this:\n\n  java -Dclojure.read.eval=false ...\n\n  The system property can also be set to 'unknown' via\n  -Dclojure.read.eval=unknown, in which case the default binding\n  is :unknown and all reads will fail in contexts where *read-eval*\n  has not been explicitly bound to either true or false. This setting\n  can be a useful diagnostic tool to ensure that all of your reads\n  occur in considered contexts. You can also accomplish this in a\n  particular scope by binding *read-eval* to :unknown\n  "));
  const__2088.setMeta((IPersistentMap)const__2091);
  const__2088.bindRoot(new clojure.core_future_QMARK_());
  const__2092.setMeta((IPersistentMap)const__2095);
  const__2092.bindRoot(new clojure.core_future_done_QMARK_());
  const__2096.setMeta((IPersistentMap)const__2101);
  const__2096.bindRoot(new clojure.core_letfn());
  ((clojure.lang.Var)const__2096).setMacro();
  const__2102.setMeta((IPersistentMap)const__2105);
  const__2102.bindRoot(new clojure.core_fnil());
  const__2106.setMeta((IPersistentMap)const__2109);
  const__2106.bindRoot(new clojure.core_shift_mask());
  const__2110.setMeta((IPersistentMap)const__2112);
  const__2110.bindRoot(const__2113);
  const__2114.setMeta((IPersistentMap)const__2116);
  const__2114.bindRoot(Numbers.num(clojure.lang.Numbers.shiftLeft((long)1L, ((java.lang.Object)const__2110.getRawRoot()))));
  const__2117.setMeta((IPersistentMap)const__2120);
  const__2117.bindRoot(new clojure.core_maybe_min_hash());
  const__2121.setMeta((IPersistentMap)const__2124);
  const__2121.bindRoot(new clojure.core_case_map());
  const__2125.setMeta((IPersistentMap)const__2128);
  const__2125.bindRoot(new clojure.core_fits_table_QMARK_());
  const__2129.setMeta((IPersistentMap)const__2132);
  const__2129.bindRoot(new clojure.core_prep_ints());
  const__2133.setMeta((IPersistentMap)const__2136);
  const__2133.bindRoot(new clojure.core_merge_hash_collisions());
  const__2137.setMeta((IPersistentMap)const__2140);
  const__2137.bindRoot(new clojure.core_prep_hashes());
  const__2141.setMeta((IPersistentMap)const__2144);
  const__2141.bindRoot(new clojure.core_case());
  ((clojure.lang.Var)const__2141).setMacro();
  const__2145.setMeta((IPersistentMap)const__2148);
  const__2145.bindRoot(new clojure.core_reduced());
  const__2149.setMeta((IPersistentMap)RT.mapUniqueKeys(const__4, "clojure/core.clj", const__5, const__6, const__7, const__2150, const__17, const__2151, const__15, "1.5", const__314, const__2152, const__176, new clojure.core_reduced_QMARK___inliner(), const__16, "Returns true if x is the result of a call to reduced"));
  const__2149.bindRoot(new clojure.core_reduced_QMARK_());
  ((IFn)const__847.getRawRoot()).invoke(((IFn)const__1382.getRawRoot()).invoke(const__2153), const__101.getRawRoot(), const__16, "Fundamental library of the Clojure language");
  ((IFn)const__1916.getRawRoot()).invoke("core_proxy");
  ((IFn)const__1916.getRawRoot()).invoke("core_print");
  ((IFn)const__1916.getRawRoot()).invoke("genclass");
  ((IFn)const__1916.getRawRoot()).invoke("core_deftype");
  ((IFn)const__1916.getRawRoot()).invoke("core/protocols");
  ((IFn)const__1916.getRawRoot()).invoke("gvec");
  ((IFn)const__1916.getRawRoot()).invoke("instant");
  ((IFn)const__1916.getRawRoot()).invoke("uuid");
  const__2154.setMeta((IPersistentMap)const__2157);
  const__2154.bindRoot(new clojure.core_reduce());
  ((IFn)const__2158.getRawRoot()).invoke(const__2159, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6299()));
  ((IFn)const__2158.getRawRoot()).invoke(const__2162, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6301()));
  ((IFn)const__2158.getRawRoot()).invoke(const__2163, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6303()));
  ((IFn)const__2158.getRawRoot()).invoke(const__2164, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6305()));
  ((IFn)const__2158.getRawRoot()).invoke(const__2165, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6307()));
  ((IFn)const__2158.getRawRoot()).invoke(null, const__2160.getRawRoot(), RT.mapUniqueKeys(const__2161, new clojure.core_fn__6313()));
  const__2166.setMeta((IPersistentMap)const__2169);
  const__2166.bindRoot(new clojure.core_reduce_kv());
  const__2170.setMeta((IPersistentMap)const__2173);
  const__2170.bindRoot(new clojure.core_into());
  const__2174.setMeta((IPersistentMap)const__2177);
  const__2174.bindRoot(new clojure.core_mapv());
  const__2178.setMeta((IPersistentMap)const__2181);
  const__2178.bindRoot(new clojure.core_filterv());
  ((IFn)const__1939.getRawRoot()).invoke(const__2182);
  const__2183.setMeta((IPersistentMap)const__2186);
  const__2183.bindRoot(new clojure.core_normalize_slurp_opts());
  const__2187.setMeta((IPersistentMap)const__2190);
  const__2187.bindRoot(new clojure.core_slurp());
  const__2191.setMeta((IPersistentMap)const__2194);
  const__2191.bindRoot(new clojure.core_spit());
  const__2195.setMeta((IPersistentMap)const__2198);
  const__2195.bindRoot(new clojure.core_future_call());
  const__2199.setMeta((IPersistentMap)const__2202);
  const__2199.bindRoot(new clojure.core_future());
  ((clojure.lang.Var)const__2199).setMacro();
  const__2203.setMeta((IPersistentMap)const__2206);
  const__2203.bindRoot(new clojure.core_future_cancel());
  const__2207.setMeta((IPersistentMap)const__2210);
  const__2207.bindRoot(new clojure.core_future_cancelled_QMARK_());
  const__2211.setMeta((IPersistentMap)const__2214);
  const__2211.bindRoot(new clojure.core_pmap());
  const__2215.setMeta((IPersistentMap)const__2218);
  const__2215.bindRoot(new clojure.core_pcalls());
  const__2219.setMeta((IPersistentMap)const__2222);
  const__2219.bindRoot(new clojure.core_pvalues());
  ((clojure.lang.Var)const__2219).setMacro();
  const__2223.setDynamic(true);
  const__2223.setMeta((IPersistentMap)const__2225);
  const__2223.bindRoot(const__2231);
  const__2232.setMeta((IPersistentMap)const__2235);
  const__2232.bindRoot(new clojure.core_clojure_version());
  const__2236.setMeta((IPersistentMap)const__2239);
  const__2236.bindRoot(new clojure.core_promise());
  const__2240.setMeta((IPersistentMap)const__2243);
  const__2240.bindRoot(new clojure.core_deliver());
  const__1850.setMeta((IPersistentMap)const__2246);
  const__1850.bindRoot(new clojure.core_flatten());
  const__2247.setMeta((IPersistentMap)const__2250);
  const__2247.bindRoot(new clojure.core_group_by());
  const__2251.setMeta((IPersistentMap)const__2254);
  const__2251.bindRoot(new clojure.core_partition_by());
  const__2255.setMeta((IPersistentMap)const__2258);
  const__2255.bindRoot(new clojure.core_frequencies());
  const__2259.setMeta((IPersistentMap)const__2262);
  const__2259.bindRoot(new clojure.core_reductions());
  const__2263.setMeta((IPersistentMap)const__2266);
  const__2263.bindRoot(new clojure.core_rand_nth());
  const__2267.setMeta((IPersistentMap)const__2270);
  const__2267.bindRoot(new clojure.core_partition_all());
  const__2271.setMeta((IPersistentMap)const__2274);
  const__2271.bindRoot(new clojure.core_shuffle());
  const__2275.setMeta((IPersistentMap)const__2278);
  const__2275.bindRoot(new clojure.core_map_indexed());
  const__2279.setMeta((IPersistentMap)const__2282);
  const__2279.bindRoot(new clojure.core_keep());
  const__2283.setMeta((IPersistentMap)const__2286);
  const__2283.bindRoot(new clojure.core_keep_indexed());
  const__2287.setMeta((IPersistentMap)const__2290);
  const__2287.bindRoot(new clojure.core_every_pred());
  const__2291.setMeta((IPersistentMap)const__2294);
  const__2291.bindRoot(new clojure.core_some_fn());
  const__113.setDynamic(true);
  const__113.setMeta((IPersistentMap)const__2297);
  const__113.bindRoot(new clojure.core_assert_valid_fdecl());
  const__2298.setMeta((IPersistentMap)const__2301);
  const__2298.bindRoot(new clojure.core_with_redefs_fn());
  const__2302.setMeta((IPersistentMap)const__2305);
  const__2302.bindRoot(new clojure.core_with_redefs());
  ((clojure.lang.Var)const__2302).setMacro();
  const__2306.setMeta((IPersistentMap)const__2309);
  const__2306.bindRoot(new clojure.core_realized_QMARK_());
  const__2310.setMeta((IPersistentMap)const__2313);
  const__2310.bindRoot(new clojure.core_cond__GT_());
  ((clojure.lang.Var)const__2310).setMacro();
  const__2314.setMeta((IPersistentMap)const__2317);
  const__2314.bindRoot(new clojure.core_cond__GT__GT_());
  ((clojure.lang.Var)const__2314).setMacro();
  const__2318.setMeta((IPersistentMap)const__2321);
  const__2318.bindRoot(new clojure.core_as__GT_());
  ((clojure.lang.Var)const__2318).setMacro();
  const__2322.setMeta((IPersistentMap)const__2325);
  const__2322.bindRoot(new clojure.core_some__GT_());
  ((clojure.lang.Var)const__2322).setMacro();
  const__2326.setMeta((IPersistentMap)const__2329);
  const__2326.bindRoot(new clojure.core_some__GT__GT_());
  ((clojure.lang.Var)const__2326).setMacro();
  const__2330.setMeta((IPersistentMap)const__2332);
  const__2330.bindRoot(RT.mapUniqueKeys(const__2333, const__2334, const__2335, const__2336));
  const__2337.setDynamic(true);
  const__2337.setMeta((IPersistentMap)const__2339);
  const__2337.bindRoot(clojure.lang.PersistentArrayMap.EMPTY);
  const__2340.setDynamic(true);
  const__2340.setMeta((IPersistentMap)const__2342);
  const__2340.bindRoot(null);
  const__2343.setMeta((IPersistentMap)const__2346);
  const__2343.bindRoot(new clojure.core_sel());
  const__2347.setMeta((IPersistentMap)const__2350);
  const__2347.bindRoot(new clojure.core_objc_class());
  const__2351.setMeta((IPersistentMap)const__2354);
  const__2351.bindRoot(new clojure.core_$());
  ((clojure.lang.Var)const__2351).setMacro();
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Symbol const__2;
 private static clojure.lang.Var const__3;
 private static clojure.lang.Keyword const__4;
 private static clojure.lang.Keyword const__5;
 private static java.lang.Integer const__6;
 private static clojure.lang.Keyword const__7;
 private static java.lang.Integer const__8;
 private static clojure.lang.IPersistentMap const__9;
 private static clojure.lang.Var const__10;
 private static java.lang.Integer const__11;
 private static clojure.lang.IPersistentMap const__12;
 private static clojure.lang.Var const__13;
 private static java.lang.Integer const__14;
 private static clojure.lang.Keyword const__15;
 private static clojure.lang.Keyword const__16;
 private static clojure.lang.Keyword const__17;
 private static clojure.lang.IPersistentList const__18;
 private static clojure.lang.IPersistentMap const__19;
 private static clojure.lang.Var const__20;
 private static java.lang.Integer const__21;
 private static clojure.lang.Keyword const__22;
 private static clojure.lang.IPersistentList const__23;
 private static clojure.lang.IPersistentMap const__24;
 private static clojure.lang.Var const__25;
 private static java.lang.Integer const__26;
 private static clojure.lang.Keyword const__27;
 private static clojure.lang.IPersistentMap const__28;
 private static clojure.lang.Var const__29;
 private static java.lang.Integer const__30;
 private static clojure.lang.IPersistentMap const__31;
 private static clojure.lang.Var const__32;
 private static java.lang.Integer const__33;
 private static clojure.lang.IPersistentMap const__34;
 private static clojure.lang.Var const__35;
 private static java.lang.Integer const__36;
 private static clojure.lang.IPersistentList const__37;
 private static clojure.lang.IPersistentMap const__38;
 private static clojure.lang.Var const__39;
 private static java.lang.Integer const__40;
 private static clojure.lang.Keyword const__41;
 private static java.lang.Class const__42;
 private static clojure.lang.IPersistentList const__43;
 private static clojure.lang.IPersistentMap const__44;
 private static clojure.lang.Var const__45;
 private static java.lang.Integer const__46;
 private static clojure.lang.IPersistentList const__47;
 private static clojure.lang.IPersistentMap const__48;
 private static clojure.lang.Var const__49;
 private static java.lang.Integer const__50;
 private static clojure.lang.IPersistentList const__51;
 private static clojure.lang.IPersistentMap const__52;
 private static clojure.lang.Var const__53;
 private static java.lang.Integer const__54;
 private static clojure.lang.IPersistentList const__55;
 private static clojure.lang.IPersistentMap const__56;
 private static clojure.lang.Var const__57;
 private static java.lang.Integer const__58;
 private static clojure.lang.IPersistentList const__59;
 private static clojure.lang.IPersistentMap const__60;
 private static clojure.lang.Var const__61;
 private static java.lang.Integer const__62;
 private static clojure.lang.IPersistentList const__63;
 private static clojure.lang.IPersistentMap const__64;
 private static clojure.lang.Var const__65;
 private static java.lang.Integer const__66;
 private static clojure.lang.IPersistentList const__67;
 private static clojure.lang.IPersistentMap const__68;
 private static clojure.lang.Var const__69;
 private static java.lang.Integer const__70;
 private static clojure.lang.IPersistentList const__71;
 private static clojure.lang.IPersistentMap const__72;
 private static clojure.lang.Var const__73;
 private static java.lang.Integer const__74;
 private static clojure.lang.IPersistentList const__75;
 private static clojure.lang.IPersistentMap const__76;
 private static clojure.lang.Var const__77;
 private static java.lang.Integer const__78;
 private static clojure.lang.IPersistentList const__79;
 private static clojure.lang.IPersistentMap const__80;
 private static clojure.lang.Var const__81;
 private static java.lang.Integer const__82;
 private static clojure.lang.IPersistentList const__83;
 private static clojure.lang.IPersistentMap const__84;
 private static clojure.lang.Var const__85;
 private static java.lang.Integer const__86;
 private static clojure.lang.IPersistentList const__87;
 private static clojure.lang.IPersistentMap const__88;
 private static clojure.lang.Var const__89;
 private static java.lang.Integer const__90;
 private static clojure.lang.IPersistentList const__91;
 private static clojure.lang.IPersistentMap const__92;
 private static clojure.lang.Var const__93;
 private static java.lang.Integer const__94;
 private static clojure.lang.IPersistentList const__95;
 private static clojure.lang.IPersistentMap const__96;
 private static clojure.lang.Var const__97;
 private static java.lang.Integer const__98;
 private static clojure.lang.IPersistentList const__99;
 private static clojure.lang.IPersistentMap const__100;
 private static clojure.lang.Var const__101;
 private static java.lang.Integer const__102;
 private static clojure.lang.IPersistentList const__103;
 private static clojure.lang.IPersistentMap const__104;
 private static clojure.lang.Var const__105;
 private static java.lang.Integer const__106;
 private static clojure.lang.IPersistentList const__107;
 private static clojure.lang.IPersistentMap const__108;
 private static clojure.lang.Var const__109;
 private static java.lang.Integer const__110;
 private static clojure.lang.IPersistentList const__111;
 private static clojure.lang.IPersistentMap const__112;
 private static clojure.lang.Var const__113;
 private static java.lang.Integer const__114;
 private static clojure.lang.Keyword const__115;
 private static clojure.lang.Keyword const__116;
 private static clojure.lang.IPersistentMap const__117;
 private static clojure.lang.Var const__118;
 private static java.lang.Integer const__119;
 private static clojure.lang.IPersistentMap const__120;
 private static clojure.lang.Var const__121;
 private static java.lang.Integer const__122;
 private static clojure.lang.IPersistentList const__123;
 private static clojure.lang.IPersistentMap const__124;
 private static clojure.lang.Var const__125;
 private static java.lang.Integer const__126;
 private static clojure.lang.IPersistentList const__127;
 private static clojure.lang.IPersistentMap const__128;
 private static clojure.lang.Var const__129;
 private static java.lang.Integer const__130;
 private static clojure.lang.IPersistentList const__131;
 private static clojure.lang.IPersistentMap const__132;
 private static clojure.lang.Var const__133;
 private static java.lang.Integer const__134;
 private static clojure.lang.IPersistentList const__135;
 private static clojure.lang.IPersistentMap const__136;
 private static clojure.lang.Var const__137;
 private static java.lang.Integer const__138;
 private static clojure.lang.IPersistentList const__139;
 private static clojure.lang.IPersistentMap const__140;
 private static clojure.lang.Var const__141;
 private static java.lang.Integer const__142;
 private static clojure.lang.IPersistentList const__143;
 private static clojure.lang.IPersistentMap const__144;
 private static clojure.lang.Var const__145;
 private static java.lang.Integer const__146;
 private static clojure.lang.IPersistentList const__147;
 private static clojure.lang.IPersistentMap const__148;
 private static clojure.lang.Var const__149;
 private static java.lang.Integer const__150;
 private static clojure.lang.IPersistentList const__151;
 private static clojure.lang.IPersistentMap const__152;
 private static clojure.lang.Var const__153;
 private static java.lang.Integer const__154;
 private static clojure.lang.IPersistentList const__155;
 private static clojure.lang.IPersistentMap const__156;
 private static clojure.lang.Var const__157;
 private static java.lang.Integer const__158;
 private static clojure.lang.IPersistentList const__159;
 private static clojure.lang.IPersistentMap const__160;
 private static clojure.lang.Var const__161;
 private static java.lang.Integer const__162;
 private static clojure.lang.IPersistentList const__163;
 private static clojure.lang.IPersistentMap const__164;
 private static clojure.lang.Var const__165;
 private static java.lang.Integer const__166;
 private static clojure.lang.IPersistentList const__167;
 private static clojure.lang.IPersistentMap const__168;
 private static clojure.lang.Var const__169;
 private static java.lang.Integer const__170;
 private static clojure.lang.IPersistentList const__171;
 private static clojure.lang.IPersistentMap const__172;
 private static clojure.lang.Var const__173;
 private static java.lang.Integer const__174;
 private static clojure.lang.IPersistentList const__175;
 private static clojure.lang.Keyword const__176;
 private static java.lang.Class const__177;
 private static clojure.lang.Var const__178;
 private static java.lang.Integer const__179;
 private static clojure.lang.IPersistentList const__180;
 private static clojure.lang.IPersistentMap const__181;
 private static clojure.lang.Var const__182;
 private static java.lang.Integer const__183;
 private static clojure.lang.IPersistentList const__184;
 private static clojure.lang.IPersistentMap const__185;
 private static clojure.lang.Var const__186;
 private static java.lang.Integer const__187;
 private static clojure.lang.IPersistentList const__188;
 private static clojure.lang.IPersistentMap const__189;
 private static clojure.lang.Var const__190;
 private static java.lang.Integer const__191;
 private static clojure.lang.IPersistentList const__192;
 private static clojure.lang.IPersistentMap const__193;
 private static clojure.lang.Var const__194;
 private static java.lang.Integer const__195;
 private static clojure.lang.IPersistentList const__196;
 private static clojure.lang.IPersistentMap const__197;
 private static clojure.lang.Var const__198;
 private static java.lang.Integer const__199;
 private static clojure.lang.IPersistentList const__200;
 private static clojure.lang.IPersistentMap const__201;
 private static clojure.lang.Var const__202;
 private static java.lang.Integer const__203;
 private static clojure.lang.IPersistentList const__204;
 private static java.lang.Class const__205;
 private static clojure.lang.IPersistentMap const__206;
 private static clojure.lang.Var const__207;
 private static java.lang.Integer const__208;
 private static clojure.lang.IPersistentList const__209;
 private static clojure.lang.IPersistentMap const__210;
 private static clojure.lang.Var const__211;
 private static java.lang.Integer const__212;
 private static clojure.lang.IPersistentList const__213;
 private static clojure.lang.IPersistentMap const__214;
 private static clojure.lang.Var const__215;
 private static java.lang.Integer const__216;
 private static clojure.lang.IPersistentList const__217;
 private static java.lang.Class const__218;
 private static clojure.lang.IPersistentMap const__219;
 private static clojure.lang.Var const__220;
 private static java.lang.Integer const__221;
 private static clojure.lang.IPersistentList const__222;
 private static clojure.lang.IPersistentMap const__223;
 private static clojure.lang.Var const__224;
 private static java.lang.Integer const__225;
 private static clojure.lang.IPersistentList const__226;
 private static clojure.lang.IPersistentMap const__227;
 private static clojure.lang.Var const__228;
 private static java.lang.Integer const__229;
 private static clojure.lang.IPersistentList const__230;
 private static java.lang.Class const__231;
 private static clojure.lang.IPersistentMap const__232;
 private static clojure.lang.Var const__233;
 private static java.lang.Integer const__234;
 private static clojure.lang.IPersistentList const__235;
 private static clojure.lang.IPersistentMap const__236;
 private static clojure.lang.Var const__237;
 private static java.lang.Integer const__238;
 private static clojure.lang.IPersistentList const__239;
 private static clojure.lang.IPersistentMap const__240;
 private static clojure.lang.Var const__241;
 private static java.lang.Integer const__242;
 private static clojure.lang.IPersistentList const__243;
 private static clojure.lang.IPersistentMap const__244;
 private static clojure.lang.Var const__245;
 private static java.lang.Integer const__246;
 private static clojure.lang.IPersistentList const__247;
 private static clojure.lang.IPersistentMap const__248;
 private static clojure.lang.Var const__249;
 private static java.lang.Integer const__250;
 private static clojure.lang.IPersistentList const__251;
 private static clojure.lang.IPersistentMap const__252;
 private static clojure.lang.Var const__253;
 private static java.lang.Integer const__254;
 private static clojure.lang.IPersistentList const__255;
 private static clojure.lang.IPersistentMap const__256;
 private static clojure.lang.Var const__257;
 private static java.lang.Integer const__258;
 private static clojure.lang.IPersistentList const__259;
 private static java.lang.Class const__260;
 private static clojure.lang.IPersistentMap const__261;
 private static clojure.lang.Var const__262;
 private static java.lang.Integer const__263;
 private static clojure.lang.IPersistentList const__264;
 private static clojure.lang.IPersistentMap const__265;
 private static clojure.lang.Var const__266;
 private static java.lang.Integer const__267;
 private static clojure.lang.IPersistentList const__268;
 private static java.lang.Class const__269;
 private static clojure.lang.IPersistentMap const__270;
 private static clojure.lang.Var const__271;
 private static java.lang.Integer const__272;
 private static clojure.lang.IPersistentList const__273;
 private static clojure.lang.IPersistentMap const__274;
 private static clojure.lang.Var const__275;
 private static java.lang.Integer const__276;
 private static clojure.lang.IPersistentList const__277;
 private static clojure.lang.IPersistentMap const__278;
 private static clojure.lang.Var const__279;
 private static java.lang.Integer const__280;
 private static clojure.lang.IPersistentList const__281;
 private static clojure.lang.IPersistentMap const__282;
 private static clojure.lang.Var const__283;
 private static java.lang.Integer const__284;
 private static clojure.lang.IPersistentList const__285;
 private static clojure.lang.IPersistentMap const__286;
 private static clojure.lang.Var const__287;
 private static java.lang.Integer const__288;
 private static clojure.lang.IPersistentList const__289;
 private static clojure.lang.IPersistentMap const__290;
 private static clojure.lang.Var const__291;
 private static java.lang.Integer const__292;
 private static clojure.lang.IPersistentList const__293;
 private static clojure.lang.IPersistentMap const__294;
 private static clojure.lang.Var const__295;
 private static java.lang.Integer const__296;
 private static clojure.lang.IPersistentList const__297;
 private static clojure.lang.IPersistentMap const__298;
 private static clojure.lang.Var const__299;
 private static java.lang.Integer const__300;
 private static clojure.lang.IPersistentList const__301;
 private static clojure.lang.IPersistentMap const__302;
 private static clojure.lang.Var const__303;
 private static java.lang.Integer const__304;
 private static clojure.lang.IPersistentList const__305;
 private static clojure.lang.IPersistentMap const__306;
 private static clojure.lang.Var const__307;
 private static java.lang.Integer const__308;
 private static clojure.lang.IPersistentList const__309;
 private static clojure.lang.IPersistentMap const__310;
 private static clojure.lang.Var const__311;
 private static java.lang.Integer const__312;
 private static clojure.lang.IPersistentList const__313;
 private static clojure.lang.Keyword const__314;
 private static java.lang.Long const__315;
 private static clojure.lang.PersistentHashSet const__316;
 private static clojure.lang.Var const__317;
 private static java.lang.Integer const__318;
 private static clojure.lang.IPersistentList const__319;
 private static clojure.lang.PersistentHashSet const__320;
 private static clojure.lang.Var const__321;
 private static java.lang.Integer const__322;
 private static clojure.lang.IPersistentList const__323;
 private static clojure.lang.IPersistentMap const__324;
 private static clojure.lang.Var const__325;
 private static java.lang.Integer const__326;
 private static clojure.lang.IPersistentList const__327;
 private static clojure.lang.Var const__328;
 private static java.lang.Integer const__329;
 private static clojure.lang.IPersistentList const__330;
 private static clojure.lang.IPersistentMap const__331;
 private static clojure.lang.Var const__332;
 private static java.lang.Integer const__333;
 private static clojure.lang.IPersistentList const__334;
 private static clojure.lang.IPersistentMap const__335;
 private static clojure.lang.Var const__336;
 private static java.lang.Integer const__337;
 private static clojure.lang.IPersistentList const__338;
 private static clojure.lang.Var const__339;
 private static java.lang.Integer const__340;
 private static clojure.lang.IPersistentList const__341;
 private static clojure.lang.Var const__342;
 private static java.lang.Integer const__343;
 private static clojure.lang.IPersistentList const__344;
 private static clojure.lang.Var const__345;
 private static java.lang.Integer const__346;
 private static clojure.lang.IPersistentList const__347;
 private static java.lang.Long const__348;
 private static clojure.lang.PersistentHashSet const__349;
 private static clojure.lang.Var const__350;
 private static java.lang.Integer const__351;
 private static clojure.lang.IPersistentList const__352;
 private static clojure.lang.PersistentHashSet const__353;
 private static clojure.lang.Var const__354;
 private static java.lang.Integer const__355;
 private static clojure.lang.IPersistentList const__356;
 private static clojure.lang.Var const__357;
 private static java.lang.Integer const__358;
 private static clojure.lang.IPersistentList const__359;
 private static clojure.lang.Var const__360;
 private static java.lang.Integer const__361;
 private static clojure.lang.IPersistentList const__362;
 private static clojure.lang.IPersistentMap const__363;
 private static clojure.lang.Var const__364;
 private static java.lang.Integer const__365;
 private static clojure.lang.IPersistentList const__366;
 private static clojure.lang.IPersistentMap const__367;
 private static clojure.lang.Var const__368;
 private static java.lang.Integer const__369;
 private static clojure.lang.IPersistentList const__370;
 private static clojure.lang.IPersistentMap const__371;
 private static clojure.lang.Var const__372;
 private static java.lang.Integer const__373;
 private static clojure.lang.IPersistentList const__374;
 private static clojure.lang.IPersistentMap const__375;
 private static clojure.lang.Var const__376;
 private static java.lang.Integer const__377;
 private static clojure.lang.IPersistentList const__378;
 private static clojure.lang.IPersistentMap const__379;
 private static clojure.lang.Var const__380;
 private static java.lang.Integer const__381;
 private static clojure.lang.IPersistentList const__382;
 private static clojure.lang.Symbol const__383;
 private static clojure.lang.Var const__384;
 private static java.lang.Integer const__385;
 private static clojure.lang.IPersistentList const__386;
 private static clojure.lang.Symbol const__387;
 private static clojure.lang.Symbol const__388;
 private static clojure.lang.Var const__389;
 private static java.lang.Integer const__390;
 private static clojure.lang.IPersistentList const__391;
 private static clojure.lang.Symbol const__392;
 private static clojure.lang.Var const__393;
 private static java.lang.Integer const__394;
 private static clojure.lang.IPersistentList const__395;
 private static clojure.lang.Symbol const__396;
 private static clojure.lang.Symbol const__397;
 private static clojure.lang.Var const__398;
 private static java.lang.Integer const__399;
 private static clojure.lang.IPersistentList const__400;
 private static clojure.lang.Symbol const__401;
 private static clojure.lang.Var const__402;
 private static java.lang.Integer const__403;
 private static clojure.lang.IPersistentList const__404;
 private static clojure.lang.Symbol const__405;
 private static clojure.lang.Var const__406;
 private static java.lang.Integer const__407;
 private static clojure.lang.IPersistentList const__408;
 private static clojure.lang.Symbol const__409;
 private static clojure.lang.Symbol const__410;
 private static clojure.lang.Var const__411;
 private static java.lang.Integer const__412;
 private static clojure.lang.IPersistentList const__413;
 private static clojure.lang.PersistentHashSet const__414;
 private static clojure.lang.Var const__415;
 private static java.lang.Integer const__416;
 private static clojure.lang.IPersistentList const__417;
 private static clojure.lang.PersistentHashSet const__418;
 private static clojure.lang.Var const__419;
 private static java.lang.Integer const__420;
 private static clojure.lang.IPersistentList const__421;
 private static clojure.lang.PersistentHashSet const__422;
 private static clojure.lang.Var const__423;
 private static java.lang.Integer const__424;
 private static clojure.lang.IPersistentList const__425;
 private static clojure.lang.PersistentHashSet const__426;
 private static clojure.lang.Var const__427;
 private static java.lang.Integer const__428;
 private static clojure.lang.IPersistentList const__429;
 private static clojure.lang.Symbol const__430;
 private static clojure.lang.Var const__431;
 private static java.lang.Integer const__432;
 private static clojure.lang.IPersistentList const__433;
 private static clojure.lang.Symbol const__434;
 private static clojure.lang.Var const__435;
 private static java.lang.Integer const__436;
 private static clojure.lang.IPersistentList const__437;
 private static clojure.lang.Var const__438;
 private static java.lang.Integer const__439;
 private static clojure.lang.IPersistentList const__440;
 private static clojure.lang.Var const__441;
 private static java.lang.Integer const__442;
 private static clojure.lang.IPersistentList const__443;
 private static clojure.lang.Var const__444;
 private static java.lang.Integer const__445;
 private static clojure.lang.IPersistentList const__446;
 private static clojure.lang.Var const__447;
 private static java.lang.Integer const__448;
 private static clojure.lang.IPersistentList const__449;
 private static clojure.lang.Var const__450;
 private static java.lang.Integer const__451;
 private static clojure.lang.IPersistentList const__452;
 private static clojure.lang.Var const__453;
 private static java.lang.Integer const__454;
 private static clojure.lang.IPersistentList const__455;
 private static clojure.lang.Var const__456;
 private static java.lang.Integer const__457;
 private static clojure.lang.IPersistentList const__458;
 private static clojure.lang.Var const__459;
 private static java.lang.Integer const__460;
 private static clojure.lang.IPersistentList const__461;
 private static clojure.lang.Var const__462;
 private static java.lang.Integer const__463;
 private static clojure.lang.IPersistentList const__464;
 private static clojure.lang.Var const__465;
 private static java.lang.Integer const__466;
 private static clojure.lang.IPersistentList const__467;
 private static clojure.lang.Var const__468;
 private static java.lang.Integer const__469;
 private static clojure.lang.IPersistentList const__470;
 private static clojure.lang.Var const__471;
 private static java.lang.Integer const__472;
 private static clojure.lang.IPersistentList const__473;
 private static clojure.lang.Var const__474;
 private static java.lang.Integer const__475;
 private static clojure.lang.IPersistentList const__476;
 private static clojure.lang.Var const__477;
 private static java.lang.Integer const__478;
 private static clojure.lang.IPersistentList const__479;
 private static clojure.lang.Var const__480;
 private static java.lang.Integer const__481;
 private static clojure.lang.IPersistentList const__482;
 private static clojure.lang.Var const__483;
 private static java.lang.Integer const__484;
 private static clojure.lang.IPersistentList const__485;
 private static clojure.lang.Var const__486;
 private static java.lang.Integer const__487;
 private static clojure.lang.IPersistentList const__488;
 private static clojure.lang.Var const__489;
 private static java.lang.Integer const__490;
 private static clojure.lang.IPersistentList const__491;
 private static clojure.lang.Var const__492;
 private static java.lang.Integer const__493;
 private static clojure.lang.IPersistentList const__494;
 private static clojure.lang.Var const__495;
 private static java.lang.Integer const__496;
 private static clojure.lang.IPersistentList const__497;
 private static clojure.lang.IPersistentMap const__498;
 private static clojure.lang.Var const__499;
 private static java.lang.Integer const__500;
 private static clojure.lang.IPersistentList const__501;
 private static clojure.lang.Var const__502;
 private static java.lang.Integer const__503;
 private static clojure.lang.IPersistentList const__504;
 private static clojure.lang.Symbol const__505;
 private static clojure.lang.Var const__506;
 private static java.lang.Integer const__507;
 private static clojure.lang.IPersistentList const__508;
 private static clojure.lang.Symbol const__509;
 private static clojure.lang.Var const__510;
 private static java.lang.Integer const__511;
 private static clojure.lang.IPersistentList const__512;
 private static clojure.lang.Symbol const__513;
 private static clojure.lang.Var const__514;
 private static java.lang.Integer const__515;
 private static clojure.lang.IPersistentList const__516;
 private static clojure.lang.Symbol const__517;
 private static clojure.lang.Var const__518;
 private static java.lang.Integer const__519;
 private static clojure.lang.IPersistentList const__520;
 private static clojure.lang.IPersistentMap const__521;
 private static clojure.lang.Var const__522;
 private static java.lang.Integer const__523;
 private static clojure.lang.IPersistentList const__524;
 private static clojure.lang.IPersistentMap const__525;
 private static clojure.lang.Var const__526;
 private static java.lang.Integer const__527;
 private static clojure.lang.IPersistentList const__528;
 private static clojure.lang.IPersistentMap const__529;
 private static clojure.lang.Var const__530;
 private static java.lang.Integer const__531;
 private static clojure.lang.IPersistentList const__532;
 private static clojure.lang.IPersistentMap const__533;
 private static clojure.lang.Var const__534;
 private static java.lang.Integer const__535;
 private static clojure.lang.IPersistentList const__536;
 private static clojure.lang.Var const__537;
 private static java.lang.Integer const__538;
 private static clojure.lang.IPersistentList const__539;
 private static clojure.lang.Var const__540;
 private static java.lang.Integer const__541;
 private static clojure.lang.IPersistentList const__542;
 private static clojure.lang.IPersistentMap const__543;
 private static clojure.lang.Var const__544;
 private static java.lang.Integer const__545;
 private static clojure.lang.IPersistentList const__546;
 private static clojure.lang.IPersistentMap const__547;
 private static clojure.lang.Var const__548;
 private static java.lang.Integer const__549;
 private static clojure.lang.IPersistentList const__550;
 private static clojure.lang.IPersistentMap const__551;
 private static clojure.lang.Var const__552;
 private static java.lang.Integer const__553;
 private static clojure.lang.IPersistentList const__554;
 private static clojure.lang.IPersistentMap const__555;
 private static clojure.lang.Var const__556;
 private static java.lang.Integer const__557;
 private static clojure.lang.IPersistentList const__558;
 private static clojure.lang.IPersistentMap const__559;
 private static clojure.lang.Var const__560;
 private static java.lang.Integer const__561;
 private static clojure.lang.IPersistentList const__562;
 private static clojure.lang.IPersistentMap const__563;
 private static clojure.lang.Var const__564;
 private static java.lang.Integer const__565;
 private static clojure.lang.IPersistentList const__566;
 private static clojure.lang.IPersistentMap const__567;
 private static clojure.lang.Var const__568;
 private static java.lang.Integer const__569;
 private static clojure.lang.IPersistentList const__570;
 private static clojure.lang.IPersistentMap const__571;
 private static clojure.lang.Var const__572;
 private static java.lang.Integer const__573;
 private static clojure.lang.IPersistentList const__574;
 private static clojure.lang.IPersistentMap const__575;
 private static clojure.lang.Var const__576;
 private static java.lang.Integer const__577;
 private static clojure.lang.IPersistentList const__578;
 private static clojure.lang.PersistentHashSet const__579;
 private static clojure.lang.Var const__580;
 private static java.lang.Integer const__581;
 private static clojure.lang.IPersistentList const__582;
 private static clojure.lang.IPersistentMap const__583;
 private static clojure.lang.Var const__584;
 private static java.lang.Integer const__585;
 private static clojure.lang.IPersistentList const__586;
 private static clojure.lang.IPersistentMap const__587;
 private static clojure.lang.Var const__588;
 private static java.lang.Integer const__589;
 private static clojure.lang.IPersistentList const__590;
 private static clojure.lang.IPersistentMap const__591;
 private static clojure.lang.Var const__592;
 private static java.lang.Integer const__593;
 private static clojure.lang.IPersistentList const__594;
 private static clojure.lang.IPersistentMap const__595;
 private static clojure.lang.Var const__596;
 private static java.lang.Integer const__597;
 private static clojure.lang.IPersistentList const__598;
 private static clojure.lang.IPersistentMap const__599;
 private static clojure.lang.Var const__600;
 private static java.lang.Integer const__601;
 private static clojure.lang.IPersistentList const__602;
 private static clojure.lang.IPersistentMap const__603;
 private static clojure.lang.Var const__604;
 private static java.lang.Integer const__605;
 private static clojure.lang.IPersistentList const__606;
 private static clojure.lang.IPersistentMap const__607;
 private static clojure.lang.Var const__608;
 private static java.lang.Integer const__609;
 private static clojure.lang.IPersistentList const__610;
 private static clojure.lang.IPersistentMap const__611;
 private static clojure.lang.Var const__612;
 private static java.lang.Integer const__613;
 private static clojure.lang.IPersistentList const__614;
 private static clojure.lang.IPersistentMap const__615;
 private static clojure.lang.Var const__616;
 private static java.lang.Integer const__617;
 private static clojure.lang.IPersistentList const__618;
 private static clojure.lang.IPersistentMap const__619;
 private static clojure.lang.Var const__620;
 private static java.lang.Integer const__621;
 private static clojure.lang.IPersistentList const__622;
 private static clojure.lang.IPersistentMap const__623;
 private static clojure.lang.Var const__624;
 private static java.lang.Integer const__625;
 private static clojure.lang.IPersistentList const__626;
 private static clojure.lang.IPersistentMap const__627;
 private static clojure.lang.Var const__628;
 private static java.lang.Integer const__629;
 private static clojure.lang.IPersistentList const__630;
 private static clojure.lang.IPersistentMap const__631;
 private static clojure.lang.Var const__632;
 private static java.lang.Integer const__633;
 private static clojure.lang.IPersistentList const__634;
 private static clojure.lang.IPersistentMap const__635;
 private static clojure.lang.Var const__636;
 private static java.lang.Integer const__637;
 private static clojure.lang.IPersistentList const__638;
 private static clojure.lang.IPersistentMap const__639;
 private static clojure.lang.Var const__640;
 private static java.lang.Integer const__641;
 private static clojure.lang.IPersistentMap const__642;
 private static clojure.lang.Var const__643;
 private static java.lang.Integer const__644;
 private static clojure.lang.IPersistentList const__645;
 private static clojure.lang.IPersistentMap const__646;
 private static clojure.lang.Var const__647;
 private static java.lang.Integer const__648;
 private static clojure.lang.IPersistentMap const__649;
 private static clojure.lang.Var const__650;
 private static java.lang.Integer const__651;
 private static clojure.lang.IPersistentList const__652;
 private static clojure.lang.IPersistentMap const__653;
 private static clojure.lang.Var const__654;
 private static java.lang.Integer const__655;
 private static clojure.lang.IPersistentList const__656;
 private static clojure.lang.IPersistentMap const__657;
 private static clojure.lang.Var const__658;
 private static java.lang.Integer const__659;
 private static clojure.lang.IPersistentList const__660;
 private static clojure.lang.IPersistentMap const__661;
 private static clojure.lang.Var const__662;
 private static java.lang.Integer const__663;
 private static clojure.lang.IPersistentList const__664;
 private static clojure.lang.IPersistentMap const__665;
 private static clojure.lang.Var const__666;
 private static java.lang.Integer const__667;
 private static clojure.lang.IPersistentList const__668;
 private static clojure.lang.IPersistentMap const__669;
 private static clojure.lang.Var const__670;
 private static java.lang.Integer const__671;
 private static clojure.lang.IPersistentList const__672;
 private static clojure.lang.IPersistentMap const__673;
 private static clojure.lang.Var const__674;
 private static java.lang.Integer const__675;
 private static clojure.lang.IPersistentList const__676;
 private static clojure.lang.IPersistentMap const__677;
 private static clojure.lang.Var const__678;
 private static java.lang.Integer const__679;
 private static clojure.lang.IPersistentList const__680;
 private static clojure.lang.IPersistentMap const__681;
 private static clojure.lang.Var const__682;
 private static java.lang.Integer const__683;
 private static clojure.lang.IPersistentList const__684;
 private static clojure.lang.IPersistentMap const__685;
 private static clojure.lang.Var const__686;
 private static java.lang.Integer const__687;
 private static clojure.lang.IPersistentList const__688;
 private static clojure.lang.IPersistentMap const__689;
 private static clojure.lang.Var const__690;
 private static java.lang.Integer const__691;
 private static clojure.lang.IPersistentList const__692;
 private static clojure.lang.IPersistentMap const__693;
 private static clojure.lang.Var const__694;
 private static java.lang.Integer const__695;
 private static clojure.lang.IPersistentList const__696;
 private static clojure.lang.IPersistentMap const__697;
 private static clojure.lang.Var const__698;
 private static java.lang.Integer const__699;
 private static clojure.lang.IPersistentList const__700;
 private static clojure.lang.IPersistentMap const__701;
 private static clojure.lang.Var const__702;
 private static java.lang.Integer const__703;
 private static clojure.lang.IPersistentList const__704;
 private static clojure.lang.IPersistentMap const__705;
 private static clojure.lang.Var const__706;
 private static java.lang.Integer const__707;
 private static clojure.lang.IPersistentList const__708;
 private static clojure.lang.IPersistentMap const__709;
 private static clojure.lang.Var const__710;
 private static java.lang.Integer const__711;
 private static clojure.lang.IPersistentList const__712;
 private static clojure.lang.IPersistentMap const__713;
 private static clojure.lang.Var const__714;
 private static java.lang.Integer const__715;
 private static clojure.lang.IPersistentList const__716;
 private static clojure.lang.IPersistentMap const__717;
 private static clojure.lang.Var const__718;
 private static java.lang.Integer const__719;
 private static clojure.lang.IPersistentList const__720;
 private static clojure.lang.IPersistentMap const__721;
 private static clojure.lang.Var const__722;
 private static java.lang.Integer const__723;
 private static clojure.lang.IPersistentList const__724;
 private static clojure.lang.IPersistentMap const__725;
 private static clojure.lang.Var const__726;
 private static java.lang.Integer const__727;
 private static clojure.lang.IPersistentList const__728;
 private static clojure.lang.IPersistentMap const__729;
 private static clojure.lang.Var const__730;
 private static java.lang.Integer const__731;
 private static clojure.lang.IPersistentList const__732;
 private static clojure.lang.IPersistentMap const__733;
 private static clojure.lang.Var const__734;
 private static java.lang.Integer const__735;
 private static clojure.lang.IPersistentList const__736;
 private static clojure.lang.IPersistentMap const__737;
 private static clojure.lang.Var const__738;
 private static java.lang.Integer const__739;
 private static clojure.lang.IPersistentList const__740;
 private static clojure.lang.IPersistentMap const__741;
 private static clojure.lang.Var const__742;
 private static java.lang.Integer const__743;
 private static clojure.lang.IPersistentList const__744;
 private static clojure.lang.IPersistentMap const__745;
 private static clojure.lang.Var const__746;
 private static java.lang.Integer const__747;
 private static clojure.lang.IPersistentList const__748;
 private static clojure.lang.IPersistentMap const__749;
 private static clojure.lang.Var const__750;
 private static java.lang.Integer const__751;
 private static clojure.lang.IPersistentList const__752;
 private static clojure.lang.IPersistentMap const__753;
 private static clojure.lang.Var const__754;
 private static java.lang.Integer const__755;
 private static clojure.lang.IPersistentList const__756;
 private static clojure.lang.IPersistentMap const__757;
 private static clojure.lang.Var const__758;
 private static java.lang.Integer const__759;
 private static clojure.lang.IPersistentList const__760;
 private static clojure.lang.IPersistentMap const__761;
 private static clojure.lang.Var const__762;
 private static java.lang.Integer const__763;
 private static clojure.lang.IPersistentList const__764;
 private static clojure.lang.IPersistentMap const__765;
 private static clojure.lang.Var const__766;
 private static java.lang.Integer const__767;
 private static clojure.lang.IPersistentList const__768;
 private static clojure.lang.IPersistentMap const__769;
 private static clojure.lang.Var const__770;
 private static java.lang.Integer const__771;
 private static clojure.lang.IPersistentList const__772;
 private static clojure.lang.IPersistentMap const__773;
 private static clojure.lang.Var const__774;
 private static java.lang.Integer const__775;
 private static clojure.lang.IPersistentList const__776;
 private static clojure.lang.IPersistentMap const__777;
 private static clojure.lang.Var const__778;
 private static java.lang.Integer const__779;
 private static clojure.lang.IPersistentList const__780;
 private static clojure.lang.IPersistentMap const__781;
 private static clojure.lang.Var const__782;
 private static java.lang.Integer const__783;
 private static clojure.lang.IPersistentList const__784;
 private static clojure.lang.IPersistentMap const__785;
 private static clojure.lang.Var const__786;
 private static java.lang.Integer const__787;
 private static clojure.lang.IPersistentList const__788;
 private static clojure.lang.IPersistentMap const__789;
 private static clojure.lang.Var const__790;
 private static java.lang.Integer const__791;
 private static clojure.lang.IPersistentList const__792;
 private static clojure.lang.IPersistentMap const__793;
 private static clojure.lang.Var const__794;
 private static java.lang.Integer const__795;
 private static clojure.lang.IPersistentList const__796;
 private static clojure.lang.IPersistentMap const__797;
 private static clojure.lang.Var const__798;
 private static java.lang.Integer const__799;
 private static clojure.lang.IPersistentList const__800;
 private static clojure.lang.Keyword const__801;
 private static clojure.lang.IPersistentMap const__802;
 private static clojure.lang.Var const__803;
 private static java.lang.Integer const__804;
 private static clojure.lang.IPersistentList const__805;
 private static clojure.lang.IPersistentMap const__806;
 private static clojure.lang.Var const__807;
 private static java.lang.Integer const__808;
 private static clojure.lang.IPersistentList const__809;
 private static clojure.lang.IPersistentMap const__810;
 private static clojure.lang.Var const__811;
 private static java.lang.Integer const__812;
 private static clojure.lang.IPersistentList const__813;
 private static clojure.lang.IPersistentMap const__814;
 private static clojure.lang.Var const__815;
 private static java.lang.Integer const__816;
 private static clojure.lang.IPersistentList const__817;
 private static clojure.lang.IPersistentMap const__818;
 private static clojure.lang.Var const__819;
 private static java.lang.Integer const__820;
 private static clojure.lang.IPersistentList const__821;
 private static clojure.lang.IPersistentMap const__822;
 private static clojure.lang.Var const__823;
 private static java.lang.Integer const__824;
 private static clojure.lang.IPersistentList const__825;
 private static clojure.lang.IPersistentMap const__826;
 private static clojure.lang.Var const__827;
 private static java.lang.Integer const__828;
 private static clojure.lang.IPersistentList const__829;
 private static clojure.lang.IPersistentMap const__830;
 private static clojure.lang.Var const__831;
 private static java.lang.Integer const__832;
 private static clojure.lang.IPersistentList const__833;
 private static clojure.lang.IPersistentMap const__834;
 private static clojure.lang.Var const__835;
 private static java.lang.Integer const__836;
 private static clojure.lang.IPersistentList const__837;
 private static clojure.lang.IPersistentMap const__838;
 private static clojure.lang.Var const__839;
 private static java.lang.Integer const__840;
 private static clojure.lang.IPersistentList const__841;
 private static clojure.lang.IPersistentMap const__842;
 private static clojure.lang.Var const__843;
 private static java.lang.Integer const__844;
 private static clojure.lang.IPersistentList const__845;
 private static clojure.lang.IPersistentMap const__846;
 private static clojure.lang.Var const__847;
 private static java.lang.Integer const__848;
 private static clojure.lang.IPersistentList const__849;
 private static clojure.lang.IPersistentMap const__850;
 private static clojure.lang.Var const__851;
 private static java.lang.Integer const__852;
 private static clojure.lang.IPersistentList const__853;
 private static clojure.lang.IPersistentMap const__854;
 private static clojure.lang.Var const__855;
 private static java.lang.Integer const__856;
 private static clojure.lang.IPersistentList const__857;
 private static clojure.lang.IPersistentMap const__858;
 private static clojure.lang.Var const__859;
 private static java.lang.Integer const__860;
 private static clojure.lang.IPersistentList const__861;
 private static clojure.lang.IPersistentMap const__862;
 private static clojure.lang.Var const__863;
 private static java.lang.Integer const__864;
 private static clojure.lang.IPersistentList const__865;
 private static clojure.lang.IPersistentMap const__866;
 private static clojure.lang.Var const__867;
 private static java.lang.Integer const__868;
 private static clojure.lang.IPersistentList const__869;
 private static clojure.lang.IPersistentMap const__870;
 private static clojure.lang.Var const__871;
 private static java.lang.Integer const__872;
 private static clojure.lang.IPersistentList const__873;
 private static clojure.lang.IPersistentMap const__874;
 private static clojure.lang.Var const__875;
 private static java.lang.Integer const__876;
 private static clojure.lang.IPersistentList const__877;
 private static clojure.lang.IPersistentMap const__878;
 private static clojure.lang.Var const__879;
 private static java.lang.Integer const__880;
 private static clojure.lang.IPersistentList const__881;
 private static clojure.lang.IPersistentMap const__882;
 private static clojure.lang.Var const__883;
 private static java.lang.Integer const__884;
 private static clojure.lang.IPersistentList const__885;
 private static clojure.lang.IPersistentMap const__886;
 private static clojure.lang.Var const__887;
 private static java.lang.Integer const__888;
 private static clojure.lang.IPersistentList const__889;
 private static clojure.lang.IPersistentMap const__890;
 private static clojure.lang.Var const__891;
 private static java.lang.Integer const__892;
 private static clojure.lang.IPersistentList const__893;
 private static clojure.lang.IPersistentMap const__894;
 private static clojure.lang.Var const__895;
 private static java.lang.Integer const__896;
 private static clojure.lang.IPersistentList const__897;
 private static clojure.lang.IPersistentMap const__898;
 private static clojure.lang.Var const__899;
 private static java.lang.Integer const__900;
 private static clojure.lang.IPersistentList const__901;
 private static clojure.lang.IPersistentMap const__902;
 private static clojure.lang.Var const__903;
 private static java.lang.Integer const__904;
 private static clojure.lang.IPersistentList const__905;
 private static clojure.lang.IPersistentMap const__906;
 private static clojure.lang.Var const__907;
 private static java.lang.Integer const__908;
 private static clojure.lang.IPersistentList const__909;
 private static clojure.lang.IPersistentMap const__910;
 private static clojure.lang.Var const__911;
 private static java.lang.Integer const__912;
 private static clojure.lang.IPersistentList const__913;
 private static clojure.lang.IPersistentMap const__914;
 private static clojure.lang.Var const__915;
 private static java.lang.Integer const__916;
 private static clojure.lang.IPersistentList const__917;
 private static clojure.lang.IPersistentMap const__918;
 private static clojure.lang.Var const__919;
 private static java.lang.Integer const__920;
 private static clojure.lang.IPersistentList const__921;
 private static clojure.lang.IPersistentMap const__922;
 private static clojure.lang.Var const__923;
 private static java.lang.Integer const__924;
 private static clojure.lang.IPersistentList const__925;
 private static clojure.lang.IPersistentMap const__926;
 private static java.lang.Integer const__927;
 private static clojure.lang.IPersistentList const__928;
 private static clojure.lang.IPersistentMap const__929;
 private static clojure.lang.Var const__930;
 private static java.lang.Integer const__931;
 private static clojure.lang.IPersistentList const__932;
 private static clojure.lang.IPersistentMap const__933;
 private static clojure.lang.Var const__934;
 private static java.lang.Integer const__935;
 private static clojure.lang.IPersistentList const__936;
 private static clojure.lang.IPersistentMap const__937;
 private static clojure.lang.Var const__938;
 private static java.lang.Integer const__939;
 private static clojure.lang.IPersistentList const__940;
 private static clojure.lang.IPersistentMap const__941;
 private static clojure.lang.Var const__942;
 private static java.lang.Integer const__943;
 private static clojure.lang.IPersistentList const__944;
 private static clojure.lang.IPersistentMap const__945;
 private static clojure.lang.Var const__946;
 private static java.lang.Integer const__947;
 private static clojure.lang.IPersistentList const__948;
 private static clojure.lang.IPersistentMap const__949;
 private static clojure.lang.Var const__950;
 private static java.lang.Integer const__951;
 private static clojure.lang.IPersistentList const__952;
 private static clojure.lang.IPersistentMap const__953;
 private static clojure.lang.Var const__954;
 private static java.lang.Integer const__955;
 private static clojure.lang.IPersistentList const__956;
 private static clojure.lang.IPersistentMap const__957;
 private static clojure.lang.Var const__958;
 private static java.lang.Integer const__959;
 private static clojure.lang.IPersistentList const__960;
 private static clojure.lang.IPersistentMap const__961;
 private static clojure.lang.Var const__962;
 private static java.lang.Integer const__963;
 private static clojure.lang.IPersistentList const__964;
 private static clojure.lang.IPersistentMap const__965;
 private static clojure.lang.Var const__966;
 private static java.lang.Integer const__967;
 private static clojure.lang.IPersistentList const__968;
 private static clojure.lang.IPersistentMap const__969;
 private static clojure.lang.Var const__970;
 private static java.lang.Integer const__971;
 private static clojure.lang.IPersistentList const__972;
 private static clojure.lang.IPersistentMap const__973;
 private static clojure.lang.Var const__974;
 private static java.lang.Integer const__975;
 private static clojure.lang.IPersistentList const__976;
 private static clojure.lang.IPersistentMap const__977;
 private static clojure.lang.Var const__978;
 private static java.lang.Integer const__979;
 private static clojure.lang.IPersistentList const__980;
 private static clojure.lang.IPersistentMap const__981;
 private static clojure.lang.Var const__982;
 private static java.lang.Integer const__983;
 private static clojure.lang.IPersistentList const__984;
 private static clojure.lang.IPersistentMap const__985;
 private static clojure.lang.Var const__986;
 private static java.lang.Integer const__987;
 private static clojure.lang.IPersistentList const__988;
 private static clojure.lang.IPersistentMap const__989;
 private static clojure.lang.Var const__990;
 private static java.lang.Integer const__991;
 private static clojure.lang.IPersistentList const__992;
 private static clojure.lang.IPersistentMap const__993;
 private static clojure.lang.Var const__994;
 private static java.lang.Integer const__995;
 private static clojure.lang.IPersistentList const__996;
 private static clojure.lang.IPersistentMap const__997;
 private static clojure.lang.Var const__998;
 private static java.lang.Integer const__999;
 private static clojure.lang.IPersistentList const__1000;
 private static clojure.lang.IPersistentMap const__1001;
 private static clojure.lang.Var const__1002;
 private static java.lang.Integer const__1003;
 private static clojure.lang.IPersistentList const__1004;
 private static clojure.lang.IPersistentMap const__1005;
 private static clojure.lang.Var const__1006;
 private static java.lang.Integer const__1007;
 private static clojure.lang.IPersistentList const__1008;
 private static clojure.lang.IPersistentMap const__1009;
 private static clojure.lang.Var const__1010;
 private static java.lang.Integer const__1011;
 private static clojure.lang.IPersistentList const__1012;
 private static clojure.lang.IPersistentMap const__1013;
 private static clojure.lang.Var const__1014;
 private static java.lang.Integer const__1015;
 private static clojure.lang.IPersistentList const__1016;
 private static clojure.lang.IPersistentMap const__1017;
 private static clojure.lang.Var const__1018;
 private static java.lang.Integer const__1019;
 private static clojure.lang.IPersistentList const__1020;
 private static clojure.lang.IPersistentMap const__1021;
 private static clojure.lang.Var const__1022;
 private static java.lang.Integer const__1023;
 private static clojure.lang.IPersistentList const__1024;
 private static clojure.lang.IPersistentMap const__1025;
 private static clojure.lang.Var const__1026;
 private static java.lang.Integer const__1027;
 private static clojure.lang.IPersistentList const__1028;
 private static clojure.lang.IPersistentMap const__1029;
 private static clojure.lang.Var const__1030;
 private static java.lang.Integer const__1031;
 private static clojure.lang.IPersistentList const__1032;
 private static clojure.lang.IPersistentMap const__1033;
 private static clojure.lang.Var const__1034;
 private static java.lang.Integer const__1035;
 private static clojure.lang.IPersistentList const__1036;
 private static clojure.lang.IPersistentMap const__1037;
 private static clojure.lang.Var const__1038;
 private static java.lang.Integer const__1039;
 private static clojure.lang.IPersistentList const__1040;
 private static clojure.lang.IPersistentMap const__1041;
 private static clojure.lang.Var const__1042;
 private static java.lang.Integer const__1043;
 private static clojure.lang.IPersistentList const__1044;
 private static clojure.lang.IPersistentMap const__1045;
 private static clojure.lang.Var const__1046;
 private static java.lang.Integer const__1047;
 private static clojure.lang.IPersistentList const__1048;
 private static clojure.lang.IPersistentMap const__1049;
 private static clojure.lang.Var const__1050;
 private static java.lang.Integer const__1051;
 private static clojure.lang.IPersistentList const__1052;
 private static clojure.lang.IPersistentMap const__1053;
 private static clojure.lang.Var const__1054;
 private static java.lang.Integer const__1055;
 private static clojure.lang.IPersistentList const__1056;
 private static clojure.lang.IPersistentMap const__1057;
 private static clojure.lang.Var const__1058;
 private static java.lang.Integer const__1059;
 private static clojure.lang.IPersistentList const__1060;
 private static clojure.lang.IPersistentMap const__1061;
 private static clojure.lang.Var const__1062;
 private static java.lang.Integer const__1063;
 private static clojure.lang.IPersistentList const__1064;
 private static clojure.lang.IPersistentMap const__1065;
 private static java.lang.Integer const__1066;
 private static clojure.lang.IPersistentList const__1067;
 private static clojure.lang.IPersistentMap const__1068;
 private static clojure.lang.Var const__1069;
 private static java.lang.Integer const__1070;
 private static clojure.lang.IPersistentList const__1071;
 private static clojure.lang.IPersistentMap const__1072;
 private static clojure.lang.Var const__1073;
 private static java.lang.Integer const__1074;
 private static clojure.lang.IPersistentList const__1075;
 private static clojure.lang.IPersistentMap const__1076;
 private static clojure.lang.Var const__1077;
 private static java.lang.Integer const__1078;
 private static clojure.lang.IPersistentList const__1079;
 private static clojure.lang.IPersistentMap const__1080;
 private static clojure.lang.Var const__1081;
 private static java.lang.Integer const__1082;
 private static clojure.lang.IPersistentList const__1083;
 private static clojure.lang.IPersistentMap const__1084;
 private static clojure.lang.Var const__1085;
 private static java.lang.Integer const__1086;
 private static clojure.lang.IPersistentList const__1087;
 private static clojure.lang.IPersistentMap const__1088;
 private static clojure.lang.Var const__1089;
 private static java.lang.Integer const__1090;
 private static clojure.lang.IPersistentList const__1091;
 private static clojure.lang.IPersistentMap const__1092;
 private static clojure.lang.Var const__1093;
 private static java.lang.Integer const__1094;
 private static clojure.lang.IPersistentList const__1095;
 private static clojure.lang.IPersistentMap const__1096;
 private static clojure.lang.Var const__1097;
 private static java.lang.Integer const__1098;
 private static clojure.lang.IPersistentList const__1099;
 private static clojure.lang.IPersistentMap const__1100;
 private static clojure.lang.Var const__1101;
 private static java.lang.Integer const__1102;
 private static clojure.lang.IPersistentList const__1103;
 private static clojure.lang.IPersistentMap const__1104;
 private static clojure.lang.Var const__1105;
 private static java.lang.Integer const__1106;
 private static clojure.lang.IPersistentList const__1107;
 private static clojure.lang.IPersistentMap const__1108;
 private static clojure.lang.Var const__1109;
 private static java.lang.Integer const__1110;
 private static clojure.lang.IPersistentList const__1111;
 private static clojure.lang.IPersistentMap const__1112;
 private static clojure.lang.Var const__1113;
 private static java.lang.Integer const__1114;
 private static clojure.lang.IPersistentList const__1115;
 private static clojure.lang.IPersistentMap const__1116;
 private static clojure.lang.Var const__1117;
 private static java.lang.Integer const__1118;
 private static clojure.lang.IPersistentList const__1119;
 private static clojure.lang.IPersistentMap const__1120;
 private static clojure.lang.Var const__1121;
 private static java.lang.Integer const__1122;
 private static clojure.lang.IPersistentList const__1123;
 private static java.lang.Class const__1124;
 private static clojure.lang.Var const__1125;
 private static java.lang.Integer const__1126;
 private static clojure.lang.IPersistentList const__1127;
 private static clojure.lang.Var const__1128;
 private static java.lang.Integer const__1129;
 private static clojure.lang.IPersistentList const__1130;
 private static clojure.lang.Var const__1131;
 private static java.lang.Integer const__1132;
 private static clojure.lang.IPersistentList const__1133;
 private static clojure.lang.Var const__1134;
 private static java.lang.Integer const__1135;
 private static clojure.lang.IPersistentList const__1136;
 private static clojure.lang.Var const__1137;
 private static java.lang.Integer const__1138;
 private static clojure.lang.IPersistentList const__1139;
 private static clojure.lang.Var const__1140;
 private static java.lang.Integer const__1141;
 private static clojure.lang.IPersistentList const__1142;
 private static clojure.lang.Var const__1143;
 private static java.lang.Integer const__1144;
 private static clojure.lang.IPersistentList const__1145;
 private static clojure.lang.Var const__1146;
 private static java.lang.Integer const__1147;
 private static clojure.lang.IPersistentList const__1148;
 private static clojure.lang.Var const__1149;
 private static java.lang.Integer const__1150;
 private static clojure.lang.IPersistentList const__1151;
 private static clojure.lang.Var const__1152;
 private static java.lang.Integer const__1153;
 private static clojure.lang.IPersistentList const__1154;
 private static clojure.lang.Var const__1155;
 private static java.lang.Integer const__1156;
 private static clojure.lang.IPersistentList const__1157;
 private static clojure.lang.Var const__1158;
 private static java.lang.Integer const__1159;
 private static clojure.lang.IPersistentList const__1160;
 private static clojure.lang.Var const__1161;
 private static java.lang.Integer const__1162;
 private static clojure.lang.IPersistentList const__1163;
 private static clojure.lang.Var const__1164;
 private static java.lang.Integer const__1165;
 private static clojure.lang.IPersistentList const__1166;
 private static clojure.lang.Var const__1167;
 private static java.lang.Integer const__1168;
 private static clojure.lang.IPersistentList const__1169;
 private static clojure.lang.IPersistentMap const__1170;
 private static clojure.lang.Var const__1171;
 private static java.lang.Integer const__1172;
 private static clojure.lang.IPersistentList const__1173;
 private static clojure.lang.IPersistentMap const__1174;
 private static clojure.lang.Var const__1175;
 private static java.lang.Integer const__1176;
 private static clojure.lang.IPersistentList const__1177;
 private static clojure.lang.IPersistentMap const__1178;
 private static clojure.lang.Var const__1179;
 private static java.lang.Integer const__1180;
 private static clojure.lang.IPersistentList const__1181;
 private static java.lang.Class const__1182;
 private static clojure.lang.IPersistentMap const__1183;
 private static clojure.lang.Var const__1184;
 private static java.lang.Integer const__1185;
 private static clojure.lang.IPersistentList const__1186;
 private static clojure.lang.IPersistentMap const__1187;
 private static clojure.lang.Var const__1188;
 private static java.lang.Integer const__1189;
 private static clojure.lang.IPersistentList const__1190;
 private static clojure.lang.IPersistentMap const__1191;
 private static clojure.lang.Var const__1192;
 private static java.lang.Integer const__1193;
 private static clojure.lang.IPersistentList const__1194;
 private static clojure.lang.IPersistentMap const__1195;
 private static clojure.lang.Var const__1196;
 private static java.lang.Integer const__1197;
 private static clojure.lang.IPersistentList const__1198;
 private static clojure.lang.IPersistentMap const__1199;
 private static clojure.lang.Var const__1200;
 private static java.lang.Integer const__1201;
 private static clojure.lang.IPersistentList const__1202;
 private static java.lang.Class const__1203;
 private static clojure.lang.IPersistentMap const__1204;
 private static clojure.lang.Var const__1205;
 private static java.lang.Integer const__1206;
 private static clojure.lang.IPersistentList const__1207;
 private static clojure.lang.IPersistentMap const__1208;
 private static clojure.lang.Var const__1209;
 private static java.lang.Integer const__1210;
 private static clojure.lang.IPersistentList const__1211;
 private static java.lang.Class const__1212;
 private static clojure.lang.IPersistentMap const__1213;
 private static clojure.lang.Var const__1214;
 private static java.lang.Integer const__1215;
 private static clojure.lang.IPersistentMap const__1216;
 private static clojure.lang.Var const__1217;
 private static java.lang.Integer const__1218;
 private static clojure.lang.IPersistentList const__1219;
 private static clojure.lang.IPersistentMap const__1220;
 private static clojure.lang.Var const__1221;
 private static java.lang.Integer const__1222;
 private static clojure.lang.IPersistentList const__1223;
 private static clojure.lang.IPersistentMap const__1224;
 private static clojure.lang.Var const__1225;
 private static java.lang.Integer const__1226;
 private static clojure.lang.IPersistentMap const__1227;
 private static clojure.lang.Var const__1228;
 private static java.lang.Integer const__1229;
 private static clojure.lang.IPersistentList const__1230;
 private static clojure.lang.IPersistentMap const__1231;
 private static clojure.lang.Var const__1232;
 private static java.lang.Integer const__1233;
 private static clojure.lang.IPersistentList const__1234;
 private static clojure.lang.IPersistentMap const__1235;
 private static clojure.lang.Var const__1236;
 private static java.lang.Integer const__1237;
 private static clojure.lang.IPersistentList const__1238;
 private static clojure.lang.IPersistentMap const__1239;
 private static clojure.lang.Var const__1240;
 private static java.lang.Integer const__1241;
 private static clojure.lang.IPersistentList const__1242;
 private static clojure.lang.IPersistentMap const__1243;
 private static clojure.lang.Var const__1244;
 private static java.lang.Integer const__1245;
 private static clojure.lang.IPersistentList const__1246;
 private static clojure.lang.IPersistentMap const__1247;
 private static clojure.lang.Var const__1248;
 private static java.lang.Integer const__1249;
 private static clojure.lang.IPersistentList const__1250;
 private static clojure.lang.IPersistentMap const__1251;
 private static clojure.lang.Var const__1252;
 private static java.lang.Integer const__1253;
 private static clojure.lang.IPersistentList const__1254;
 private static clojure.lang.IPersistentMap const__1255;
 private static clojure.lang.Var const__1256;
 private static java.lang.Integer const__1257;
 private static clojure.lang.IPersistentList const__1258;
 private static clojure.lang.IPersistentMap const__1259;
 private static clojure.lang.Var const__1260;
 private static java.lang.Integer const__1261;
 private static clojure.lang.IPersistentList const__1262;
 private static clojure.lang.IPersistentMap const__1263;
 private static clojure.lang.Var const__1264;
 private static java.lang.Integer const__1265;
 private static clojure.lang.IPersistentList const__1266;
 private static clojure.lang.IPersistentMap const__1267;
 private static clojure.lang.Var const__1268;
 private static java.lang.Integer const__1269;
 private static clojure.lang.IPersistentList const__1270;
 private static clojure.lang.IPersistentMap const__1271;
 private static clojure.lang.Var const__1272;
 private static java.lang.Integer const__1273;
 private static clojure.lang.IPersistentList const__1274;
 private static clojure.lang.IPersistentMap const__1275;
 private static clojure.lang.Var const__1276;
 private static java.lang.Integer const__1277;
 private static clojure.lang.IPersistentList const__1278;
 private static clojure.lang.IPersistentMap const__1279;
 private static clojure.lang.Var const__1280;
 private static java.lang.Integer const__1281;
 private static clojure.lang.IPersistentList const__1282;
 private static clojure.lang.Var const__1283;
 private static java.lang.Integer const__1284;
 private static clojure.lang.IPersistentList const__1285;
 private static clojure.lang.Var const__1286;
 private static java.lang.Integer const__1287;
 private static clojure.lang.IPersistentList const__1288;
 private static clojure.lang.PersistentHashSet const__1289;
 private static clojure.lang.Var const__1290;
 private static java.lang.Integer const__1291;
 private static clojure.lang.IPersistentList const__1292;
 private static clojure.lang.PersistentHashSet const__1293;
 private static clojure.lang.Var const__1294;
 private static java.lang.Integer const__1295;
 private static clojure.lang.IPersistentList const__1296;
 private static clojure.lang.IPersistentMap const__1297;
 private static clojure.lang.Var const__1298;
 private static java.lang.Integer const__1299;
 private static clojure.lang.IPersistentList const__1300;
 private static clojure.lang.IPersistentMap const__1301;
 private static clojure.lang.Var const__1302;
 private static java.lang.Integer const__1303;
 private static clojure.lang.IPersistentList const__1304;
 private static clojure.lang.IPersistentMap const__1305;
 private static clojure.lang.Var const__1306;
 private static java.lang.Integer const__1307;
 private static clojure.lang.IPersistentList const__1308;
 private static clojure.lang.IPersistentMap const__1309;
 private static clojure.lang.Var const__1310;
 private static java.lang.Integer const__1311;
 private static clojure.lang.IPersistentList const__1312;
 private static clojure.lang.IPersistentMap const__1313;
 private static clojure.lang.Var const__1314;
 private static java.lang.Integer const__1315;
 private static clojure.lang.IPersistentList const__1316;
 private static clojure.lang.IPersistentMap const__1317;
 private static clojure.lang.Var const__1318;
 private static java.lang.Integer const__1319;
 private static clojure.lang.IPersistentList const__1320;
 private static clojure.lang.IPersistentMap const__1321;
 private static clojure.lang.Var const__1322;
 private static java.lang.Integer const__1323;
 private static clojure.lang.IPersistentList const__1324;
 private static clojure.lang.IPersistentMap const__1325;
 private static clojure.lang.Var const__1326;
 private static java.lang.Integer const__1327;
 private static clojure.lang.IPersistentList const__1328;
 private static clojure.lang.IPersistentMap const__1329;
 private static clojure.lang.Var const__1330;
 private static java.lang.Integer const__1331;
 private static clojure.lang.IPersistentList const__1332;
 private static clojure.lang.IPersistentMap const__1333;
 private static clojure.lang.Var const__1334;
 private static java.lang.Integer const__1335;
 private static clojure.lang.IPersistentList const__1336;
 private static clojure.lang.IPersistentMap const__1337;
 private static clojure.lang.Var const__1338;
 private static java.lang.Integer const__1339;
 private static clojure.lang.IPersistentList const__1340;
 private static clojure.lang.IPersistentMap const__1341;
 private static clojure.lang.Var const__1342;
 private static java.lang.Integer const__1343;
 private static clojure.lang.IPersistentList const__1344;
 private static clojure.lang.IPersistentMap const__1345;
 private static clojure.lang.Var const__1346;
 private static java.lang.Integer const__1347;
 private static clojure.lang.IPersistentList const__1348;
 private static clojure.lang.IPersistentMap const__1349;
 private static clojure.lang.Var const__1350;
 private static java.lang.Integer const__1351;
 private static clojure.lang.IPersistentList const__1352;
 private static clojure.lang.IPersistentMap const__1353;
 private static clojure.lang.Var const__1354;
 private static java.lang.Integer const__1355;
 private static clojure.lang.IPersistentList const__1356;
 private static clojure.lang.IPersistentMap const__1357;
 private static clojure.lang.Var const__1358;
 private static java.lang.Integer const__1359;
 private static clojure.lang.IPersistentList const__1360;
 private static clojure.lang.IPersistentMap const__1361;
 private static clojure.lang.Var const__1362;
 private static java.lang.Integer const__1363;
 private static clojure.lang.IPersistentList const__1364;
 private static clojure.lang.IPersistentMap const__1365;
 private static clojure.lang.Var const__1366;
 private static java.lang.Integer const__1367;
 private static clojure.lang.IPersistentList const__1368;
 private static clojure.lang.IPersistentMap const__1369;
 private static clojure.lang.Var const__1370;
 private static java.lang.Integer const__1371;
 private static clojure.lang.IPersistentList const__1372;
 private static clojure.lang.IPersistentMap const__1373;
 private static clojure.lang.Var const__1374;
 private static java.lang.Integer const__1375;
 private static clojure.lang.IPersistentList const__1376;
 private static clojure.lang.IPersistentMap const__1377;
 private static clojure.lang.Var const__1378;
 private static java.lang.Integer const__1379;
 private static clojure.lang.IPersistentList const__1380;
 private static clojure.lang.IPersistentMap const__1381;
 private static clojure.lang.Var const__1382;
 private static java.lang.Integer const__1383;
 private static clojure.lang.IPersistentList const__1384;
 private static clojure.lang.IPersistentMap const__1385;
 private static clojure.lang.Var const__1386;
 private static java.lang.Integer const__1387;
 private static clojure.lang.IPersistentList const__1388;
 private static clojure.lang.IPersistentMap const__1389;
 private static clojure.lang.Var const__1390;
 private static java.lang.Integer const__1391;
 private static clojure.lang.IPersistentList const__1392;
 private static clojure.lang.IPersistentMap const__1393;
 private static clojure.lang.Var const__1394;
 private static java.lang.Integer const__1395;
 private static clojure.lang.IPersistentList const__1396;
 private static clojure.lang.IPersistentMap const__1397;
 private static clojure.lang.Var const__1398;
 private static java.lang.Integer const__1399;
 private static clojure.lang.IPersistentList const__1400;
 private static clojure.lang.IPersistentMap const__1401;
 private static clojure.lang.Var const__1402;
 private static java.lang.Integer const__1403;
 private static clojure.lang.IPersistentList const__1404;
 private static clojure.lang.IPersistentMap const__1405;
 private static clojure.lang.Var const__1406;
 private static java.lang.Integer const__1407;
 private static clojure.lang.IPersistentList const__1408;
 private static clojure.lang.IPersistentMap const__1409;
 private static clojure.lang.Var const__1410;
 private static java.lang.Integer const__1411;
 private static clojure.lang.IPersistentList const__1412;
 private static clojure.lang.IPersistentMap const__1413;
 private static clojure.lang.Var const__1414;
 private static java.lang.Integer const__1415;
 private static clojure.lang.IPersistentList const__1416;
 private static clojure.lang.IPersistentMap const__1417;
 private static clojure.lang.Var const__1418;
 private static java.lang.Integer const__1419;
 private static clojure.lang.IPersistentList const__1420;
 private static clojure.lang.IPersistentMap const__1421;
 private static clojure.lang.Var const__1422;
 private static java.lang.Integer const__1423;
 private static clojure.lang.IPersistentList const__1424;
 private static clojure.lang.IPersistentMap const__1425;
 private static clojure.lang.Var const__1426;
 private static java.lang.Integer const__1427;
 private static clojure.lang.IPersistentList const__1428;
 private static clojure.lang.IPersistentMap const__1429;
 private static clojure.lang.Var const__1430;
 private static java.lang.Integer const__1431;
 private static clojure.lang.IPersistentList const__1432;
 private static clojure.lang.IPersistentMap const__1433;
 private static clojure.lang.Var const__1434;
 private static java.lang.Integer const__1435;
 private static clojure.lang.IPersistentList const__1436;
 private static clojure.lang.IPersistentMap const__1437;
 private static clojure.lang.Var const__1438;
 private static java.lang.Integer const__1439;
 private static clojure.lang.IPersistentList const__1440;
 private static clojure.lang.IPersistentMap const__1441;
 private static clojure.lang.Var const__1442;
 private static java.lang.Integer const__1443;
 private static clojure.lang.IPersistentList const__1444;
 private static clojure.lang.IPersistentMap const__1445;
 private static clojure.lang.Var const__1446;
 private static java.lang.Integer const__1447;
 private static clojure.lang.IPersistentList const__1448;
 private static clojure.lang.IPersistentMap const__1449;
 private static clojure.lang.Var const__1450;
 private static java.lang.Integer const__1451;
 private static clojure.lang.IPersistentList const__1452;
 private static clojure.lang.IPersistentMap const__1453;
 private static clojure.lang.Var const__1454;
 private static java.lang.Integer const__1455;
 private static clojure.lang.IPersistentList const__1456;
 private static clojure.lang.IPersistentMap const__1457;
 private static clojure.lang.Var const__1458;
 private static java.lang.Integer const__1459;
 private static clojure.lang.IPersistentList const__1460;
 private static clojure.lang.IPersistentMap const__1461;
 private static clojure.lang.Var const__1462;
 private static java.lang.Integer const__1463;
 private static clojure.lang.IPersistentList const__1464;
 private static clojure.lang.IPersistentMap const__1465;
 private static clojure.lang.Var const__1466;
 private static java.lang.Integer const__1467;
 private static clojure.lang.IPersistentList const__1468;
 private static clojure.lang.IPersistentMap const__1469;
 private static clojure.lang.Var const__1470;
 private static java.lang.Integer const__1471;
 private static clojure.lang.IPersistentList const__1472;
 private static clojure.lang.IPersistentMap const__1473;
 private static clojure.lang.Var const__1474;
 private static java.lang.Integer const__1475;
 private static clojure.lang.IPersistentList const__1476;
 private static clojure.lang.IPersistentMap const__1477;
 private static clojure.lang.Var const__1478;
 private static java.lang.Integer const__1479;
 private static clojure.lang.IPersistentList const__1480;
 private static clojure.lang.IPersistentMap const__1481;
 private static java.lang.Integer const__1482;
 private static clojure.lang.IPersistentList const__1483;
 private static clojure.lang.Keyword const__1484;
 private static clojure.lang.PersistentVector const__1485;
 private static clojure.lang.Keyword const__1486;
 private static clojure.lang.IPersistentMap const__1487;
 private static clojure.lang.Var const__1488;
 private static java.lang.Integer const__1489;
 private static clojure.lang.IPersistentList const__1490;
 private static clojure.lang.IPersistentMap const__1491;
 private static java.lang.Integer const__1492;
 private static clojure.lang.IPersistentList const__1493;
 private static clojure.lang.PersistentVector const__1494;
 private static clojure.lang.IPersistentMap const__1495;
 private static java.lang.Integer const__1496;
 private static clojure.lang.IPersistentList const__1497;
 private static clojure.lang.PersistentVector const__1498;
 private static clojure.lang.IPersistentMap const__1499;
 private static clojure.lang.Var const__1500;
 private static java.lang.Integer const__1501;
 private static clojure.lang.IPersistentList const__1502;
 private static clojure.lang.IPersistentMap const__1503;
 private static clojure.lang.Var const__1504;
 private static java.lang.Integer const__1505;
 private static clojure.lang.IPersistentList const__1506;
 private static clojure.lang.IPersistentMap const__1507;
 private static clojure.lang.Var const__1508;
 private static java.lang.Integer const__1509;
 private static clojure.lang.IPersistentList const__1510;
 private static clojure.lang.IPersistentMap const__1511;
 private static clojure.lang.Var const__1512;
 private static java.lang.Integer const__1513;
 private static clojure.lang.IPersistentList const__1514;
 private static clojure.lang.IPersistentMap const__1515;
 private static clojure.lang.Var const__1516;
 private static java.lang.Integer const__1517;
 private static clojure.lang.IPersistentList const__1518;
 private static clojure.lang.IPersistentMap const__1519;
 private static clojure.lang.Var const__1520;
 private static java.lang.Integer const__1521;
 private static clojure.lang.IPersistentList const__1522;
 private static clojure.lang.IPersistentMap const__1523;
 private static clojure.lang.Var const__1524;
 private static java.lang.Integer const__1525;
 private static clojure.lang.IPersistentList const__1526;
 private static clojure.lang.IPersistentMap const__1527;
 private static clojure.lang.Var const__1528;
 private static java.lang.Integer const__1529;
 private static clojure.lang.IPersistentList const__1530;
 private static clojure.lang.IPersistentMap const__1531;
 private static clojure.lang.Var const__1532;
 private static java.lang.Integer const__1533;
 private static clojure.lang.IPersistentList const__1534;
 private static clojure.lang.IPersistentMap const__1535;
 private static clojure.lang.Var const__1536;
 private static java.lang.Integer const__1537;
 private static clojure.lang.IPersistentList const__1538;
 private static clojure.lang.IPersistentMap const__1539;
 private static clojure.lang.Var const__1540;
 private static java.lang.Integer const__1541;
 private static clojure.lang.IPersistentList const__1542;
 private static clojure.lang.IPersistentMap const__1543;
 private static clojure.lang.Var const__1544;
 private static java.lang.Integer const__1545;
 private static clojure.lang.IPersistentList const__1546;
 private static clojure.lang.IPersistentMap const__1547;
 private static clojure.lang.Var const__1548;
 private static java.lang.Integer const__1549;
 private static clojure.lang.IPersistentList const__1550;
 private static clojure.lang.IPersistentMap const__1551;
 private static clojure.lang.Var const__1552;
 private static java.lang.Integer const__1553;
 private static clojure.lang.IPersistentList const__1554;
 private static clojure.lang.IPersistentMap const__1555;
 private static clojure.lang.Var const__1556;
 private static java.lang.Integer const__1557;
 private static clojure.lang.IPersistentList const__1558;
 private static java.lang.Class const__1559;
 private static clojure.lang.IPersistentMap const__1560;
 private static clojure.lang.Var const__1561;
 private static java.lang.Integer const__1562;
 private static clojure.lang.IPersistentList const__1563;
 private static java.lang.Class const__1564;
 private static clojure.lang.IPersistentMap const__1565;
 private static clojure.lang.Var const__1566;
 private static java.lang.Integer const__1567;
 private static clojure.lang.IPersistentList const__1568;
 private static clojure.lang.IPersistentMap const__1569;
 private static clojure.lang.Var const__1570;
 private static java.lang.Integer const__1571;
 private static clojure.lang.IPersistentList const__1572;
 private static clojure.lang.IPersistentMap const__1573;
 private static clojure.lang.Var const__1574;
 private static java.lang.Integer const__1575;
 private static clojure.lang.IPersistentList const__1576;
 private static clojure.lang.IPersistentMap const__1577;
 private static clojure.lang.Var const__1578;
 private static java.lang.Integer const__1579;
 private static clojure.lang.IPersistentList const__1580;
 private static clojure.lang.IPersistentMap const__1581;
 private static clojure.lang.Var const__1582;
 private static java.lang.Integer const__1583;
 private static clojure.lang.IPersistentList const__1584;
 private static clojure.lang.IPersistentMap const__1585;
 private static clojure.lang.Var const__1586;
 private static java.lang.Integer const__1587;
 private static clojure.lang.IPersistentList const__1588;
 private static clojure.lang.IPersistentMap const__1589;
 private static clojure.lang.Var const__1590;
 private static java.lang.Integer const__1591;
 private static clojure.lang.IPersistentList const__1592;
 private static clojure.lang.IPersistentMap const__1593;
 private static clojure.lang.Var const__1594;
 private static java.lang.Integer const__1595;
 private static clojure.lang.IPersistentList const__1596;
 private static clojure.lang.IPersistentMap const__1597;
 private static clojure.lang.Var const__1598;
 private static java.lang.Integer const__1599;
 private static clojure.lang.IPersistentList const__1600;
 private static clojure.lang.IPersistentMap const__1601;
 private static clojure.lang.Var const__1602;
 private static java.lang.Integer const__1603;
 private static clojure.lang.IPersistentList const__1604;
 private static clojure.lang.IPersistentMap const__1605;
 private static clojure.lang.Var const__1606;
 private static java.lang.Integer const__1607;
 private static clojure.lang.IPersistentList const__1608;
 private static clojure.lang.IPersistentMap const__1609;
 private static clojure.lang.Var const__1610;
 private static java.lang.Integer const__1611;
 private static clojure.lang.IPersistentList const__1612;
 private static clojure.lang.IPersistentMap const__1613;
 private static clojure.lang.Var const__1614;
 private static java.lang.Integer const__1615;
 private static clojure.lang.IPersistentList const__1616;
 private static clojure.lang.IPersistentMap const__1617;
 private static clojure.lang.Var const__1618;
 private static java.lang.Integer const__1619;
 private static clojure.lang.IPersistentList const__1620;
 private static clojure.lang.IPersistentMap const__1621;
 private static clojure.lang.Var const__1622;
 private static java.lang.Integer const__1623;
 private static clojure.lang.IPersistentList const__1624;
 private static clojure.lang.IPersistentMap const__1625;
 private static clojure.lang.Var const__1626;
 private static java.lang.Integer const__1627;
 private static clojure.lang.IPersistentList const__1628;
 private static clojure.lang.IPersistentMap const__1629;
 private static clojure.lang.Var const__1630;
 private static java.lang.Integer const__1631;
 private static clojure.lang.IPersistentList const__1632;
 private static clojure.lang.IPersistentMap const__1633;
 private static clojure.lang.Var const__1634;
 private static java.lang.Integer const__1635;
 private static clojure.lang.IPersistentList const__1636;
 private static clojure.lang.IPersistentMap const__1637;
 private static clojure.lang.Var const__1638;
 private static java.lang.Integer const__1639;
 private static clojure.lang.IPersistentList const__1640;
 private static clojure.lang.IPersistentMap const__1641;
 private static clojure.lang.Var const__1642;
 private static java.lang.Integer const__1643;
 private static clojure.lang.IPersistentList const__1644;
 private static clojure.lang.IPersistentMap const__1645;
 private static clojure.lang.Var const__1646;
 private static java.lang.Integer const__1647;
 private static clojure.lang.IPersistentList const__1648;
 private static clojure.lang.IPersistentMap const__1649;
 private static clojure.lang.Var const__1650;
 private static java.lang.Integer const__1651;
 private static clojure.lang.IPersistentList const__1652;
 private static clojure.lang.IPersistentMap const__1653;
 private static clojure.lang.Var const__1654;
 private static java.lang.Integer const__1655;
 private static clojure.lang.IPersistentList const__1656;
 private static clojure.lang.IPersistentMap const__1657;
 private static clojure.lang.Var const__1658;
 private static java.lang.Integer const__1659;
 private static clojure.lang.IPersistentList const__1660;
 private static clojure.lang.IPersistentMap const__1661;
 private static clojure.lang.Var const__1662;
 private static java.lang.Integer const__1663;
 private static clojure.lang.IPersistentList const__1664;
 private static clojure.lang.IPersistentMap const__1665;
 private static clojure.lang.Var const__1666;
 private static java.lang.Integer const__1667;
 private static clojure.lang.IPersistentList const__1668;
 private static clojure.lang.IPersistentMap const__1669;
 private static clojure.lang.Var const__1670;
 private static java.lang.Integer const__1671;
 private static clojure.lang.IPersistentList const__1672;
 private static clojure.lang.IPersistentMap const__1673;
 private static clojure.lang.Var const__1674;
 private static java.lang.Integer const__1675;
 private static clojure.lang.IPersistentList const__1676;
 private static clojure.lang.IPersistentMap const__1677;
 private static clojure.lang.Var const__1678;
 private static java.lang.Integer const__1679;
 private static clojure.lang.IPersistentList const__1680;
 private static clojure.lang.IPersistentMap const__1681;
 private static clojure.lang.Var const__1682;
 private static java.lang.Integer const__1683;
 private static clojure.lang.IPersistentList const__1684;
 private static clojure.lang.IPersistentMap const__1685;
 private static clojure.lang.Var const__1686;
 private static java.lang.Integer const__1687;
 private static clojure.lang.IPersistentList const__1688;
 private static java.lang.Long const__1689;
 private static clojure.lang.PersistentHashSet const__1690;
 private static clojure.lang.Var const__1691;
 private static java.lang.Integer const__1692;
 private static clojure.lang.IPersistentList const__1693;
 private static clojure.lang.PersistentHashSet const__1694;
 private static clojure.lang.Var const__1695;
 private static java.lang.Integer const__1696;
 private static clojure.lang.IPersistentList const__1697;
 private static clojure.lang.PersistentHashSet const__1698;
 private static clojure.lang.Var const__1699;
 private static java.lang.Integer const__1700;
 private static clojure.lang.IPersistentList const__1701;
 private static clojure.lang.PersistentHashSet const__1702;
 private static clojure.lang.Var const__1703;
 private static java.lang.Integer const__1704;
 private static clojure.lang.IPersistentList const__1705;
 private static clojure.lang.PersistentHashSet const__1706;
 private static clojure.lang.Var const__1707;
 private static java.lang.Integer const__1708;
 private static clojure.lang.IPersistentList const__1709;
 private static clojure.lang.PersistentHashSet const__1710;
 private static clojure.lang.Var const__1711;
 private static java.lang.Integer const__1712;
 private static clojure.lang.IPersistentList const__1713;
 private static clojure.lang.PersistentHashSet const__1714;
 private static clojure.lang.Var const__1715;
 private static java.lang.Integer const__1716;
 private static clojure.lang.IPersistentList const__1717;
 private static clojure.lang.PersistentHashSet const__1718;
 private static clojure.lang.Var const__1719;
 private static java.lang.Integer const__1720;
 private static clojure.lang.IPersistentList const__1721;
 private static clojure.lang.PersistentHashSet const__1722;
 private static clojure.lang.Var const__1723;
 private static java.lang.Integer const__1724;
 private static clojure.lang.IPersistentList const__1725;
 private static clojure.lang.IPersistentMap const__1726;
 private static clojure.lang.Var const__1727;
 private static java.lang.Integer const__1728;
 private static clojure.lang.IPersistentList const__1729;
 private static clojure.lang.IPersistentMap const__1730;
 private static clojure.lang.Var const__1731;
 private static java.lang.Integer const__1732;
 private static clojure.lang.IPersistentList const__1733;
 private static clojure.lang.IPersistentMap const__1734;
 private static clojure.lang.Var const__1735;
 private static java.lang.Integer const__1736;
 private static clojure.lang.IPersistentList const__1737;
 private static clojure.lang.IPersistentMap const__1738;
 private static clojure.lang.Var const__1739;
 private static java.lang.Integer const__1740;
 private static clojure.lang.IPersistentList const__1741;
 private static clojure.lang.IPersistentMap const__1742;
 private static clojure.lang.Var const__1743;
 private static java.lang.Integer const__1744;
 private static clojure.lang.IPersistentList const__1745;
 private static clojure.lang.IPersistentMap const__1746;
 private static clojure.lang.Var const__1747;
 private static java.lang.Integer const__1748;
 private static clojure.lang.IPersistentList const__1749;
 private static clojure.lang.IPersistentMap const__1750;
 private static clojure.lang.Var const__1751;
 private static java.lang.Integer const__1752;
 private static clojure.lang.IPersistentList const__1753;
 private static clojure.lang.IPersistentMap const__1754;
 private static clojure.lang.Var const__1755;
 private static java.lang.Integer const__1756;
 private static clojure.lang.IPersistentList const__1757;
 private static clojure.lang.IPersistentMap const__1758;
 private static clojure.lang.Var const__1759;
 private static java.lang.Integer const__1760;
 private static clojure.lang.IPersistentList const__1761;
 private static clojure.lang.IPersistentMap const__1762;
 private static clojure.lang.Var const__1763;
 private static java.lang.Integer const__1764;
 private static clojure.lang.IPersistentList const__1765;
 private static clojure.lang.IPersistentMap const__1766;
 private static clojure.lang.Var const__1767;
 private static java.lang.Integer const__1768;
 private static clojure.lang.IPersistentList const__1769;
 private static clojure.lang.IPersistentMap const__1770;
 private static clojure.lang.Var const__1771;
 private static java.lang.Integer const__1772;
 private static clojure.lang.IPersistentList const__1773;
 private static clojure.lang.IPersistentMap const__1774;
 private static clojure.lang.Var const__1775;
 private static java.lang.Integer const__1776;
 private static clojure.lang.Keyword const__1777;
 private static clojure.lang.IPersistentMap const__1778;
 private static clojure.lang.Var const__1779;
 private static java.lang.Integer const__1780;
 private static clojure.lang.IPersistentMap const__1781;
 private static clojure.lang.Var const__1782;
 private static java.lang.Integer const__1783;
 private static clojure.lang.IPersistentList const__1784;
 private static clojure.lang.IPersistentMap const__1785;
 private static clojure.lang.Var const__1786;
 private static java.lang.Integer const__1787;
 private static clojure.lang.IPersistentList const__1788;
 private static clojure.lang.IPersistentMap const__1789;
 private static java.lang.Integer const__1790;
 private static clojure.lang.IPersistentList const__1791;
 private static clojure.lang.IPersistentMap const__1792;
 private static java.lang.Integer const__1793;
 private static clojure.lang.IPersistentList const__1794;
 private static clojure.lang.IPersistentMap const__1795;
 private static clojure.lang.Var const__1796;
 private static java.lang.Integer const__1797;
 private static clojure.lang.IPersistentList const__1798;
 private static clojure.lang.IPersistentMap const__1799;
 private static clojure.lang.Var const__1800;
 private static java.lang.Integer const__1801;
 private static clojure.lang.IPersistentList const__1802;
 private static clojure.lang.IPersistentMap const__1803;
 private static clojure.lang.Var const__1804;
 private static java.lang.Integer const__1805;
 private static clojure.lang.IPersistentList const__1806;
 private static clojure.lang.IPersistentMap const__1807;
 private static clojure.lang.Var const__1808;
 private static java.lang.Integer const__1809;
 private static clojure.lang.IPersistentList const__1810;
 private static clojure.lang.IPersistentMap const__1811;
 private static clojure.lang.Var const__1812;
 private static java.lang.Integer const__1813;
 private static clojure.lang.IPersistentList const__1814;
 private static clojure.lang.IPersistentMap const__1815;
 private static java.lang.Integer const__1816;
 private static clojure.lang.IPersistentMap const__1817;
 private static clojure.lang.Var const__1818;
 private static java.lang.Integer const__1819;
 private static clojure.lang.IPersistentList const__1820;
 private static clojure.lang.IPersistentMap const__1821;
 private static clojure.lang.Var const__1822;
 private static java.lang.Integer const__1823;
 private static clojure.lang.IPersistentList const__1824;
 private static clojure.lang.IPersistentMap const__1825;
 private static clojure.lang.Var const__1826;
 private static java.lang.Integer const__1827;
 private static clojure.lang.IPersistentList const__1828;
 private static clojure.lang.IPersistentMap const__1829;
 private static clojure.lang.Var const__1830;
 private static java.lang.Integer const__1831;
 private static clojure.lang.IPersistentList const__1832;
 private static clojure.lang.IPersistentMap const__1833;
 private static clojure.lang.Var const__1834;
 private static java.lang.Integer const__1835;
 private static clojure.lang.IPersistentList const__1836;
 private static clojure.lang.IPersistentMap const__1837;
 private static clojure.lang.Var const__1838;
 private static java.lang.Integer const__1839;
 private static clojure.lang.IPersistentList const__1840;
 private static clojure.lang.IPersistentMap const__1841;
 private static clojure.lang.Var const__1842;
 private static java.lang.Integer const__1843;
 private static clojure.lang.IPersistentList const__1844;
 private static clojure.lang.IPersistentMap const__1845;
 private static clojure.lang.Var const__1846;
 private static java.lang.Integer const__1847;
 private static clojure.lang.IPersistentList const__1848;
 private static clojure.lang.IPersistentMap const__1849;
 private static clojure.lang.Var const__1850;
 private static java.lang.Integer const__1851;
 private static clojure.lang.IPersistentMap const__1852;
 private static clojure.lang.Var const__1853;
 private static java.lang.Integer const__1854;
 private static clojure.lang.IPersistentList const__1855;
 private static clojure.lang.IPersistentMap const__1856;
 private static clojure.lang.Var const__1857;
 private static java.lang.Integer const__1858;
 private static clojure.lang.IPersistentList const__1859;
 private static clojure.lang.IPersistentMap const__1860;
 private static clojure.lang.Var const__1861;
 private static java.lang.Integer const__1862;
 private static clojure.lang.IPersistentList const__1863;
 private static clojure.lang.IPersistentMap const__1864;
 private static clojure.lang.Var const__1865;
 private static java.lang.Integer const__1866;
 private static clojure.lang.IPersistentList const__1867;
 private static clojure.lang.IPersistentMap const__1868;
 private static clojure.lang.Var const__1869;
 private static java.lang.Integer const__1870;
 private static clojure.lang.IPersistentList const__1871;
 private static clojure.lang.IPersistentMap const__1872;
 private static clojure.lang.Var const__1873;
 private static java.lang.Integer const__1874;
 private static clojure.lang.IPersistentList const__1875;
 private static clojure.lang.IPersistentMap const__1876;
 private static clojure.lang.Var const__1877;
 private static java.lang.Integer const__1878;
 private static clojure.lang.IPersistentMap const__1879;
 private static clojure.lang.Var const__1880;
 private static java.lang.Integer const__1881;
 private static clojure.lang.IPersistentList const__1882;
 private static clojure.lang.IPersistentMap const__1883;
 private static clojure.lang.Var const__1884;
 private static java.lang.Integer const__1885;
 private static clojure.lang.IPersistentList const__1886;
 private static clojure.lang.IPersistentMap const__1887;
 private static clojure.lang.Var const__1888;
 private static java.lang.Integer const__1889;
 private static clojure.lang.IPersistentList const__1890;
 private static clojure.lang.IPersistentMap const__1891;
 private static clojure.lang.Var const__1892;
 private static java.lang.Integer const__1893;
 private static clojure.lang.IPersistentList const__1894;
 private static clojure.lang.IPersistentMap const__1895;
 private static clojure.lang.Var const__1896;
 private static java.lang.Integer const__1897;
 private static clojure.lang.IPersistentList const__1898;
 private static clojure.lang.IPersistentMap const__1899;
 private static clojure.lang.Var const__1900;
 private static java.lang.Integer const__1901;
 private static clojure.lang.IPersistentList const__1902;
 private static clojure.lang.IPersistentMap const__1903;
 private static clojure.lang.Var const__1904;
 private static java.lang.Integer const__1905;
 private static clojure.lang.IPersistentList const__1906;
 private static clojure.lang.IPersistentMap const__1907;
 private static clojure.lang.Var const__1908;
 private static java.lang.Integer const__1909;
 private static clojure.lang.IPersistentList const__1910;
 private static clojure.lang.IPersistentMap const__1911;
 private static clojure.lang.Var const__1912;
 private static java.lang.Integer const__1913;
 private static clojure.lang.IPersistentList const__1914;
 private static clojure.lang.IPersistentMap const__1915;
 private static clojure.lang.Var const__1916;
 private static java.lang.Integer const__1917;
 private static clojure.lang.IPersistentMap const__1918;
 private static clojure.lang.Var const__1919;
 private static java.lang.Integer const__1920;
 private static clojure.lang.IPersistentList const__1921;
 private static clojure.lang.IPersistentMap const__1922;
 private static clojure.lang.Var const__1923;
 private static java.lang.Integer const__1924;
 private static clojure.lang.IPersistentList const__1925;
 private static clojure.lang.IPersistentMap const__1926;
 private static clojure.lang.Var const__1927;
 private static java.lang.Integer const__1928;
 private static clojure.lang.IPersistentList const__1929;
 private static clojure.lang.IPersistentMap const__1930;
 private static clojure.lang.Var const__1931;
 private static java.lang.Integer const__1932;
 private static clojure.lang.IPersistentList const__1933;
 private static clojure.lang.IPersistentMap const__1934;
 private static clojure.lang.Var const__1935;
 private static java.lang.Integer const__1936;
 private static clojure.lang.IPersistentList const__1937;
 private static clojure.lang.IPersistentMap const__1938;
 private static clojure.lang.Var const__1939;
 private static java.lang.Integer const__1940;
 private static clojure.lang.IPersistentList const__1941;
 private static clojure.lang.IPersistentMap const__1942;
 private static clojure.lang.Var const__1943;
 private static java.lang.Integer const__1944;
 private static clojure.lang.IPersistentList const__1945;
 private static clojure.lang.IPersistentMap const__1946;
 private static clojure.lang.Var const__1947;
 private static java.lang.Integer const__1948;
 private static clojure.lang.IPersistentList const__1949;
 private static clojure.lang.IPersistentMap const__1950;
 private static java.lang.Integer const__1951;
 private static clojure.lang.IPersistentList const__1952;
 private static clojure.lang.IPersistentMap const__1953;
 private static clojure.lang.Var const__1954;
 private static java.lang.Integer const__1955;
 private static clojure.lang.IPersistentList const__1956;
 private static clojure.lang.IPersistentMap const__1957;
 private static clojure.lang.Var const__1958;
 private static java.lang.Integer const__1959;
 private static clojure.lang.IPersistentList const__1960;
 private static clojure.lang.IPersistentMap const__1961;
 private static clojure.lang.Var const__1962;
 private static java.lang.Integer const__1963;
 private static clojure.lang.IPersistentList const__1964;
 private static clojure.lang.IPersistentMap const__1965;
 private static clojure.lang.Var const__1966;
 private static java.lang.Integer const__1967;
 private static clojure.lang.IPersistentList const__1968;
 private static clojure.lang.IPersistentMap const__1969;
 private static clojure.lang.Var const__1970;
 private static java.lang.Integer const__1971;
 private static clojure.lang.IPersistentList const__1972;
 private static clojure.lang.IPersistentMap const__1973;
 private static clojure.lang.Var const__1974;
 private static java.lang.Integer const__1975;
 private static clojure.lang.IPersistentList const__1976;
 private static clojure.lang.IPersistentMap const__1977;
 private static clojure.lang.Var const__1978;
 private static java.lang.Integer const__1979;
 private static clojure.lang.IPersistentList const__1980;
 private static clojure.lang.IPersistentMap const__1981;
 private static clojure.lang.Var const__1982;
 private static java.lang.Integer const__1983;
 private static clojure.lang.IPersistentList const__1984;
 private static clojure.lang.IPersistentMap const__1985;
 private static clojure.lang.Var const__1986;
 private static java.lang.Integer const__1987;
 private static clojure.lang.IPersistentList const__1988;
 private static clojure.lang.IPersistentMap const__1989;
 private static clojure.lang.Var const__1990;
 private static java.lang.Integer const__1991;
 private static clojure.lang.IPersistentList const__1992;
 private static clojure.lang.IPersistentMap const__1993;
 private static clojure.lang.Var const__1994;
 private static java.lang.Integer const__1995;
 private static clojure.lang.IPersistentList const__1996;
 private static clojure.lang.IPersistentMap const__1997;
 private static clojure.lang.Var const__1998;
 private static java.lang.Integer const__1999;
 private static clojure.lang.IPersistentList const__2000;
 private static clojure.lang.IPersistentMap const__2001;
 private static clojure.lang.Var const__2002;
 private static java.lang.Integer const__2003;
 private static clojure.lang.IPersistentList const__2004;
 private static clojure.lang.IPersistentMap const__2005;
 private static clojure.lang.Var const__2006;
 private static java.lang.Integer const__2007;
 private static clojure.lang.IPersistentList const__2008;
 private static clojure.lang.IPersistentMap const__2009;
 private static clojure.lang.Var const__2010;
 private static java.lang.Integer const__2011;
 private static clojure.lang.IPersistentList const__2012;
 private static clojure.lang.IPersistentMap const__2013;
 private static clojure.lang.Var const__2014;
 private static java.lang.Integer const__2015;
 private static clojure.lang.IPersistentMap const__2016;
 private static clojure.lang.Var const__2017;
 private static java.lang.Integer const__2018;
 private static clojure.lang.IPersistentMap const__2019;
 private static clojure.lang.Var const__2020;
 private static java.lang.Integer const__2021;
 private static clojure.lang.IPersistentMap const__2022;
 private static clojure.lang.Var const__2023;
 private static java.lang.Integer const__2024;
 private static clojure.lang.IPersistentMap const__2025;
 private static clojure.lang.Var const__2026;
 private static java.lang.Integer const__2027;
 private static clojure.lang.IPersistentList const__2028;
 private static clojure.lang.IPersistentMap const__2029;
 private static clojure.lang.Var const__2030;
 private static java.lang.Integer const__2031;
 private static clojure.lang.IPersistentList const__2032;
 private static clojure.lang.IPersistentMap const__2033;
 private static clojure.lang.Var const__2034;
 private static java.lang.Integer const__2035;
 private static clojure.lang.IPersistentList const__2036;
 private static clojure.lang.IPersistentMap const__2037;
 private static clojure.lang.Var const__2038;
 private static java.lang.Integer const__2039;
 private static clojure.lang.IPersistentList const__2040;
 private static clojure.lang.IPersistentMap const__2041;
 private static java.lang.Integer const__2042;
 private static clojure.lang.IPersistentMap const__2043;
 private static java.lang.Integer const__2044;
 private static clojure.lang.IPersistentMap const__2045;
 private static clojure.lang.Var const__2046;
 private static java.lang.Integer const__2047;
 private static clojure.lang.IPersistentList const__2048;
 private static clojure.lang.IPersistentMap const__2049;
 private static clojure.lang.Var const__2050;
 private static clojure.lang.Var const__2051;
 private static clojure.lang.Var const__2052;
 private static java.lang.Integer const__2053;
 private static clojure.lang.IPersistentList const__2054;
 private static clojure.lang.IPersistentMap const__2055;
 private static clojure.lang.Var const__2056;
 private static clojure.lang.IPersistentMap const__2057;
 private static clojure.lang.Var const__2058;
 private static clojure.lang.IPersistentMap const__2059;
 private static clojure.lang.Var const__2060;
 private static clojure.lang.IPersistentMap const__2061;
 private static clojure.lang.Var const__2062;
 private static clojure.lang.IPersistentMap const__2063;
 private static clojure.lang.Var const__2064;
 private static clojure.lang.IPersistentMap const__2065;
 private static clojure.lang.Var const__2066;
 private static clojure.lang.IPersistentMap const__2067;
 private static clojure.lang.Var const__2068;
 private static clojure.lang.IPersistentMap const__2069;
 private static clojure.lang.Var const__2070;
 private static clojure.lang.IPersistentMap const__2071;
 private static clojure.lang.Var const__2072;
 private static clojure.lang.IPersistentMap const__2073;
 private static clojure.lang.Var const__2074;
 private static clojure.lang.IPersistentMap const__2075;
 private static clojure.lang.Var const__2076;
 private static clojure.lang.IPersistentMap const__2077;
 private static clojure.lang.Var const__2078;
 private static clojure.lang.IPersistentMap const__2079;
 private static clojure.lang.Var const__2080;
 private static clojure.lang.IPersistentMap const__2081;
 private static clojure.lang.Var const__2082;
 private static clojure.lang.IPersistentMap const__2083;
 private static clojure.lang.Var const__2084;
 private static clojure.lang.IPersistentMap const__2085;
 private static clojure.lang.Var const__2086;
 private static clojure.lang.IPersistentMap const__2087;
 private static clojure.lang.Var const__2088;
 private static java.lang.Integer const__2089;
 private static clojure.lang.IPersistentList const__2090;
 private static clojure.lang.IPersistentMap const__2091;
 private static clojure.lang.Var const__2092;
 private static java.lang.Integer const__2093;
 private static clojure.lang.IPersistentList const__2094;
 private static clojure.lang.IPersistentMap const__2095;
 private static clojure.lang.Var const__2096;
 private static java.lang.Integer const__2097;
 private static clojure.lang.IPersistentList const__2098;
 private static clojure.lang.Keyword const__2099;
 private static clojure.lang.PersistentVector const__2100;
 private static clojure.lang.IPersistentMap const__2101;
 private static clojure.lang.Var const__2102;
 private static java.lang.Integer const__2103;
 private static clojure.lang.IPersistentList const__2104;
 private static clojure.lang.IPersistentMap const__2105;
 private static clojure.lang.Var const__2106;
 private static java.lang.Integer const__2107;
 private static clojure.lang.IPersistentList const__2108;
 private static clojure.lang.IPersistentMap const__2109;
 private static clojure.lang.Var const__2110;
 private static java.lang.Integer const__2111;
 private static clojure.lang.IPersistentMap const__2112;
 private static java.lang.Long const__2113;
 private static clojure.lang.Var const__2114;
 private static java.lang.Integer const__2115;
 private static clojure.lang.IPersistentMap const__2116;
 private static clojure.lang.Var const__2117;
 private static java.lang.Integer const__2118;
 private static clojure.lang.IPersistentList const__2119;
 private static clojure.lang.IPersistentMap const__2120;
 private static clojure.lang.Var const__2121;
 private static java.lang.Integer const__2122;
 private static clojure.lang.IPersistentList const__2123;
 private static clojure.lang.IPersistentMap const__2124;
 private static clojure.lang.Var const__2125;
 private static java.lang.Integer const__2126;
 private static clojure.lang.IPersistentList const__2127;
 private static clojure.lang.IPersistentMap const__2128;
 private static clojure.lang.Var const__2129;
 private static java.lang.Integer const__2130;
 private static clojure.lang.IPersistentList const__2131;
 private static clojure.lang.IPersistentMap const__2132;
 private static clojure.lang.Var const__2133;
 private static java.lang.Integer const__2134;
 private static clojure.lang.IPersistentList const__2135;
 private static clojure.lang.IPersistentMap const__2136;
 private static clojure.lang.Var const__2137;
 private static java.lang.Integer const__2138;
 private static clojure.lang.IPersistentList const__2139;
 private static clojure.lang.IPersistentMap const__2140;
 private static clojure.lang.Var const__2141;
 private static java.lang.Integer const__2142;
 private static clojure.lang.IPersistentList const__2143;
 private static clojure.lang.IPersistentMap const__2144;
 private static clojure.lang.Var const__2145;
 private static java.lang.Integer const__2146;
 private static clojure.lang.IPersistentList const__2147;
 private static clojure.lang.IPersistentMap const__2148;
 private static clojure.lang.Var const__2149;
 private static java.lang.Integer const__2150;
 private static clojure.lang.IPersistentList const__2151;
 private static clojure.lang.PersistentHashSet const__2152;
 private static clojure.lang.Symbol const__2153;
 private static clojure.lang.Var const__2154;
 private static java.lang.Integer const__2155;
 private static clojure.lang.IPersistentList const__2156;
 private static clojure.lang.IPersistentMap const__2157;
 private static clojure.lang.Var const__2158;
 private static java.lang.Class const__2159;
 private static clojure.lang.Var const__2160;
 private static clojure.lang.Keyword const__2161;
 private static java.lang.Class const__2162;
 private static java.lang.Class const__2163;
 private static java.lang.Class const__2164;
 private static java.lang.Class const__2165;
 private static clojure.lang.Var const__2166;
 private static java.lang.Integer const__2167;
 private static clojure.lang.IPersistentList const__2168;
 private static clojure.lang.IPersistentMap const__2169;
 private static clojure.lang.Var const__2170;
 private static java.lang.Integer const__2171;
 private static clojure.lang.IPersistentList const__2172;
 private static clojure.lang.IPersistentMap const__2173;
 private static clojure.lang.Var const__2174;
 private static java.lang.Integer const__2175;
 private static clojure.lang.IPersistentList const__2176;
 private static clojure.lang.IPersistentMap const__2177;
 private static clojure.lang.Var const__2178;
 private static java.lang.Integer const__2179;
 private static clojure.lang.IPersistentList const__2180;
 private static clojure.lang.IPersistentMap const__2181;
 private static clojure.lang.PersistentVector const__2182;
 private static clojure.lang.Var const__2183;
 private static java.lang.Integer const__2184;
 private static clojure.lang.IPersistentList const__2185;
 private static clojure.lang.IPersistentMap const__2186;
 private static clojure.lang.Var const__2187;
 private static java.lang.Integer const__2188;
 private static clojure.lang.IPersistentList const__2189;
 private static clojure.lang.IPersistentMap const__2190;
 private static clojure.lang.Var const__2191;
 private static java.lang.Integer const__2192;
 private static clojure.lang.IPersistentList const__2193;
 private static clojure.lang.IPersistentMap const__2194;
 private static clojure.lang.Var const__2195;
 private static java.lang.Integer const__2196;
 private static clojure.lang.IPersistentList const__2197;
 private static clojure.lang.IPersistentMap const__2198;
 private static clojure.lang.Var const__2199;
 private static java.lang.Integer const__2200;
 private static clojure.lang.IPersistentList const__2201;
 private static clojure.lang.IPersistentMap const__2202;
 private static clojure.lang.Var const__2203;
 private static java.lang.Integer const__2204;
 private static clojure.lang.IPersistentList const__2205;
 private static clojure.lang.IPersistentMap const__2206;
 private static clojure.lang.Var const__2207;
 private static java.lang.Integer const__2208;
 private static clojure.lang.IPersistentList const__2209;
 private static clojure.lang.IPersistentMap const__2210;
 private static clojure.lang.Var const__2211;
 private static java.lang.Integer const__2212;
 private static clojure.lang.IPersistentList const__2213;
 private static clojure.lang.IPersistentMap const__2214;
 private static clojure.lang.Var const__2215;
 private static java.lang.Integer const__2216;
 private static clojure.lang.IPersistentList const__2217;
 private static clojure.lang.IPersistentMap const__2218;
 private static clojure.lang.Var const__2219;
 private static java.lang.Integer const__2220;
 private static clojure.lang.IPersistentList const__2221;
 private static clojure.lang.IPersistentMap const__2222;
 private static clojure.lang.Var const__2223;
 private static java.lang.Integer const__2224;
 private static clojure.lang.IPersistentMap const__2225;
 private static clojure.lang.Keyword const__2226;
 private static clojure.lang.Keyword const__2227;
 private static java.lang.Long const__2228;
 private static clojure.lang.Keyword const__2229;
 private static clojure.lang.Keyword const__2230;
 private static clojure.lang.IPersistentMap const__2231;
 private static clojure.lang.Var const__2232;
 private static java.lang.Integer const__2233;
 private static clojure.lang.IPersistentList const__2234;
 private static clojure.lang.IPersistentMap const__2235;
 private static clojure.lang.Var const__2236;
 private static java.lang.Integer const__2237;
 private static clojure.lang.IPersistentList const__2238;
 private static clojure.lang.IPersistentMap const__2239;
 private static clojure.lang.Var const__2240;
 private static java.lang.Integer const__2241;
 private static clojure.lang.IPersistentList const__2242;
 private static clojure.lang.IPersistentMap const__2243;
 private static java.lang.Integer const__2244;
 private static clojure.lang.IPersistentList const__2245;
 private static clojure.lang.IPersistentMap const__2246;
 private static clojure.lang.Var const__2247;
 private static java.lang.Integer const__2248;
 private static clojure.lang.IPersistentList const__2249;
 private static clojure.lang.IPersistentMap const__2250;
 private static clojure.lang.Var const__2251;
 private static java.lang.Integer const__2252;
 private static clojure.lang.IPersistentList const__2253;
 private static clojure.lang.IPersistentMap const__2254;
 private static clojure.lang.Var const__2255;
 private static java.lang.Integer const__2256;
 private static clojure.lang.IPersistentList const__2257;
 private static clojure.lang.IPersistentMap const__2258;
 private static clojure.lang.Var const__2259;
 private static java.lang.Integer const__2260;
 private static clojure.lang.IPersistentList const__2261;
 private static clojure.lang.IPersistentMap const__2262;
 private static clojure.lang.Var const__2263;
 private static java.lang.Integer const__2264;
 private static clojure.lang.IPersistentList const__2265;
 private static clojure.lang.IPersistentMap const__2266;
 private static clojure.lang.Var const__2267;
 private static java.lang.Integer const__2268;
 private static clojure.lang.IPersistentList const__2269;
 private static clojure.lang.IPersistentMap const__2270;
 private static clojure.lang.Var const__2271;
 private static java.lang.Integer const__2272;
 private static clojure.lang.IPersistentList const__2273;
 private static clojure.lang.IPersistentMap const__2274;
 private static clojure.lang.Var const__2275;
 private static java.lang.Integer const__2276;
 private static clojure.lang.IPersistentList const__2277;
 private static clojure.lang.IPersistentMap const__2278;
 private static clojure.lang.Var const__2279;
 private static java.lang.Integer const__2280;
 private static clojure.lang.IPersistentList const__2281;
 private static clojure.lang.IPersistentMap const__2282;
 private static clojure.lang.Var const__2283;
 private static java.lang.Integer const__2284;
 private static clojure.lang.IPersistentList const__2285;
 private static clojure.lang.IPersistentMap const__2286;
 private static clojure.lang.Var const__2287;
 private static java.lang.Integer const__2288;
 private static clojure.lang.IPersistentList const__2289;
 private static clojure.lang.IPersistentMap const__2290;
 private static clojure.lang.Var const__2291;
 private static java.lang.Integer const__2292;
 private static clojure.lang.IPersistentList const__2293;
 private static clojure.lang.IPersistentMap const__2294;
 private static java.lang.Integer const__2295;
 private static clojure.lang.IPersistentList const__2296;
 private static clojure.lang.IPersistentMap const__2297;
 private static clojure.lang.Var const__2298;
 private static java.lang.Integer const__2299;
 private static clojure.lang.IPersistentList const__2300;
 private static clojure.lang.IPersistentMap const__2301;
 private static clojure.lang.Var const__2302;
 private static java.lang.Integer const__2303;
 private static clojure.lang.IPersistentList const__2304;
 private static clojure.lang.IPersistentMap const__2305;
 private static clojure.lang.Var const__2306;
 private static java.lang.Integer const__2307;
 private static clojure.lang.IPersistentList const__2308;
 private static clojure.lang.IPersistentMap const__2309;
 private static clojure.lang.Var const__2310;
 private static java.lang.Integer const__2311;
 private static clojure.lang.IPersistentList const__2312;
 private static clojure.lang.IPersistentMap const__2313;
 private static clojure.lang.Var const__2314;
 private static java.lang.Integer const__2315;
 private static clojure.lang.IPersistentList const__2316;
 private static clojure.lang.IPersistentMap const__2317;
 private static clojure.lang.Var const__2318;
 private static java.lang.Integer const__2319;
 private static clojure.lang.IPersistentList const__2320;
 private static clojure.lang.IPersistentMap const__2321;
 private static clojure.lang.Var const__2322;
 private static java.lang.Integer const__2323;
 private static clojure.lang.IPersistentList const__2324;
 private static clojure.lang.IPersistentMap const__2325;
 private static clojure.lang.Var const__2326;
 private static java.lang.Integer const__2327;
 private static clojure.lang.IPersistentList const__2328;
 private static clojure.lang.IPersistentMap const__2329;
 private static clojure.lang.Var const__2330;
 private static java.lang.Integer const__2331;
 private static clojure.lang.IPersistentMap const__2332;
 private static clojure.lang.Symbol const__2333;
 private static clojure.lang.Var const__2334;
 private static clojure.lang.Symbol const__2335;
 private static clojure.lang.Var const__2336;
 private static clojure.lang.Var const__2337;
 private static java.lang.Integer const__2338;
 private static clojure.lang.IPersistentMap const__2339;
 private static clojure.lang.Var const__2340;
 private static java.lang.Integer const__2341;
 private static clojure.lang.IPersistentMap const__2342;
 private static clojure.lang.Var const__2343;
 private static java.lang.Integer const__2344;
 private static clojure.lang.IPersistentList const__2345;
 private static clojure.lang.IPersistentMap const__2346;
 private static clojure.lang.Var const__2347;
 private static java.lang.Integer const__2348;
 private static clojure.lang.IPersistentList const__2349;
 private static clojure.lang.IPersistentMap const__2350;
 private static clojure.lang.Var const__2351;
 private static java.lang.Integer const__2352;
 private static clojure.lang.IPersistentList const__2353;
 private static clojure.lang.IPersistentMap const__2354;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "clojure.core")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "author"), "Rich Hickey", Keyword.intern(null, "doc"), "The core Clojure language."));
  const__2 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__3 = (clojure.lang.Var)RT.var("clojure.core", "unquote");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__5 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__6 = (java.lang.Integer)1;
  const__7 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__8 = (java.lang.Integer)13;
  const__9 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 13, Keyword.intern(null, "file"), "clojure/core.clj");
  const__10 = (clojure.lang.Var)RT.var("clojure.core", "unquote-splicing");
  const__11 = (java.lang.Integer)14;
  const__12 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 14, Keyword.intern(null, "file"), "clojure/core.clj");
  const__13 = (clojure.lang.Var)RT.var("clojure.core", "list");
  const__14 = (java.lang.Integer)16;
  const__15 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__16 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__17 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__18 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "items"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 17, Keyword.intern(null, "column"), 15));
  const__19 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "items"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 17, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Creates a new list containing the items.", Keyword.intern(null, "line"), 16, Keyword.intern(null, "file"), "clojure/core.clj");
  const__20 = (clojure.lang.Var)RT.var("clojure.core", "cons");
  const__21 = (java.lang.Integer)22;
  const__22 = (clojure.lang.Keyword)Keyword.intern(null, "static");
  const__23 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "seq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 23, Keyword.intern(null, "column"), 15));
  const__24 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "seq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 23, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new seq where x is the first element and seq is\n    the rest.", Keyword.intern(null, "line"), 22, Keyword.intern(null, "file"), "clojure/core.clj");
  const__25 = (clojure.lang.Var)RT.var("clojure.core", "let");
  const__26 = (java.lang.Integer)32;
  const__27 = (clojure.lang.Keyword)Keyword.intern(null, "macro");
  const__28 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "macro"), Boolean.TRUE, Keyword.intern(null, "line"), 32, Keyword.intern(null, "file"), "clojure/core.clj");
  const__29 = (clojure.lang.Var)RT.var("clojure.core", "loop");
  const__30 = (java.lang.Integer)37;
  const__31 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "macro"), Boolean.TRUE, Keyword.intern(null, "line"), 37, Keyword.intern(null, "file"), "clojure/core.clj");
  const__32 = (clojure.lang.Var)RT.var("clojure.core", "fn");
  const__33 = (java.lang.Integer)42;
  const__34 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "macro"), Boolean.TRUE, Keyword.intern(null, "line"), 42, Keyword.intern(null, "file"), "clojure/core.clj");
  const__35 = (clojure.lang.Var)RT.var("clojure.core", "first");
  const__36 = (java.lang.Integer)49;
  const__37 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 50, Keyword.intern(null, "column"), 15));
  const__38 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 50, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the first item in the collection. Calls seq on its\n    argument. If coll is nil, returns nil.", Keyword.intern(null, "line"), 49, Keyword.intern(null, "file"), "clojure/core.clj");
  const__39 = (clojure.lang.Var)RT.var("clojure.core", "next");
  const__40 = (java.lang.Integer)57;
  const__41 = (clojure.lang.Keyword)Keyword.intern(null, "tag");
  const__42 = (java.lang.Class)clojure.lang.ISeq.class;
  const__43 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 58, Keyword.intern(null, "column"), 15));
  const__44 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 58, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil.", Keyword.intern(null, "line"), 57, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ISeq.class);
  const__45 = (clojure.lang.Var)RT.var("clojure.core", "rest");
  const__46 = (java.lang.Integer)66;
  const__47 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 67, Keyword.intern(null, "column"), 15));
  const__48 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 67, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", Keyword.intern(null, "line"), 66, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ISeq.class);
  const__49 = (clojure.lang.Var)RT.var("clojure.core", "conj");
  const__50 = (java.lang.Integer)75;
  const__51 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "xs"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 76, Keyword.intern(null, "column"), 15));
  const__52 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "xs"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 76, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).  The 'addition' may\n    happen at different 'places' depending on the concrete type.", Keyword.intern(null, "line"), 75, Keyword.intern(null, "file"), "clojure/core.clj");
  const__53 = (clojure.lang.Var)RT.var("clojure.core", "second");
  const__54 = (java.lang.Integer)89;
  const__55 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 91, Keyword.intern(null, "column"), 15));
  const__56 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 91, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (first (next x))", Keyword.intern(null, "line"), 89, Keyword.intern(null, "file"), "clojure/core.clj");
  const__57 = (clojure.lang.Var)RT.var("clojure.core", "ffirst");
  const__58 = (java.lang.Integer)96;
  const__59 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 98, Keyword.intern(null, "column"), 15));
  const__60 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 98, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (first (first x))", Keyword.intern(null, "line"), 96, Keyword.intern(null, "file"), "clojure/core.clj");
  const__61 = (clojure.lang.Var)RT.var("clojure.core", "nfirst");
  const__62 = (java.lang.Integer)103;
  const__63 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 105, Keyword.intern(null, "column"), 15));
  const__64 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 105, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (next (first x))", Keyword.intern(null, "line"), 103, Keyword.intern(null, "file"), "clojure/core.clj");
  const__65 = (clojure.lang.Var)RT.var("clojure.core", "fnext");
  const__66 = (java.lang.Integer)110;
  const__67 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 112, Keyword.intern(null, "column"), 15));
  const__68 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 112, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (first (next x))", Keyword.intern(null, "line"), 110, Keyword.intern(null, "file"), "clojure/core.clj");
  const__69 = (clojure.lang.Var)RT.var("clojure.core", "nnext");
  const__70 = (java.lang.Integer)117;
  const__71 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 119, Keyword.intern(null, "column"), 15));
  const__72 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 119, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (next (next x))", Keyword.intern(null, "line"), 117, Keyword.intern(null, "file"), "clojure/core.clj");
  const__73 = (clojure.lang.Var)RT.var("clojure.core", "seq");
  const__74 = (java.lang.Integer)124;
  const__75 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "coll"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq")))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 125, Keyword.intern(null, "column"), 15));
  const__76 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "coll"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq")))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 125, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq on the collection. If the collection is\n    empty, returns nil.  (seq nil) returns nil. seq also works on\n    Strings, native Java arrays (of reference types) and any objects\n    that implement Iterable.", Keyword.intern(null, "line"), 124, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ISeq.class);
  const__77 = (clojure.lang.Var)RT.var("clojure.core", "instance?");
  const__78 = (java.lang.Integer)135;
  const__79 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 136, Keyword.intern(null, "column"), 15));
  const__80 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 136, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates x and tests if it is an instance of the class\n    c. Returns true or false", Keyword.intern(null, "line"), 135, Keyword.intern(null, "file"), "clojure/core.clj");
  const__81 = (clojure.lang.Var)RT.var("clojure.core", "seq?");
  const__82 = (java.lang.Integer)142;
  const__83 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 143, Keyword.intern(null, "column"), 15));
  const__84 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 143, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x implements ISeq", Keyword.intern(null, "line"), 142, Keyword.intern(null, "file"), "clojure/core.clj");
  const__85 = (clojure.lang.Var)RT.var("clojure.core", "char?");
  const__86 = (java.lang.Integer)149;
  const__87 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 150, Keyword.intern(null, "column"), 15));
  const__88 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 150, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x is a Character", Keyword.intern(null, "line"), 149, Keyword.intern(null, "file"), "clojure/core.clj");
  const__89 = (clojure.lang.Var)RT.var("clojure.core", "string?");
  const__90 = (java.lang.Integer)156;
  const__91 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 157, Keyword.intern(null, "column"), 15));
  const__92 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 157, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x is a String", Keyword.intern(null, "line"), 156, Keyword.intern(null, "file"), "clojure/core.clj");
  const__93 = (clojure.lang.Var)RT.var("clojure.core", "map?");
  const__94 = (java.lang.Integer)163;
  const__95 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 164, Keyword.intern(null, "column"), 15));
  const__96 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 164, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x implements IPersistentMap", Keyword.intern(null, "line"), 163, Keyword.intern(null, "file"), "clojure/core.clj");
  const__97 = (clojure.lang.Var)RT.var("clojure.core", "vector?");
  const__98 = (java.lang.Integer)170;
  const__99 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 171, Keyword.intern(null, "column"), 15));
 }
 static void __init1() {
  const__100 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 171, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x implements IPersistentVector", Keyword.intern(null, "line"), 170, Keyword.intern(null, "file"), "clojure/core.clj");
  const__101 = (clojure.lang.Var)RT.var("clojure.core", "assoc");
  const__102 = (java.lang.Integer)177;
  const__103 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "val"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 178, Keyword.intern(null, "column"), 15));
  const__104 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "val"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 178, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).", Keyword.intern(null, "line"), 177, Keyword.intern(null, "file"), "clojure/core.clj");
  const__105 = (clojure.lang.Var)RT.var("clojure.core", "meta");
  const__106 = (java.lang.Integer)198;
  const__107 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "obj"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 199, Keyword.intern(null, "column"), 15));
  const__108 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "obj"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 199, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the metadata of obj, returns nil if there is no metadata.", Keyword.intern(null, "line"), 198, Keyword.intern(null, "file"), "clojure/core.clj");
  const__109 = (clojure.lang.Var)RT.var("clojure.core", "with-meta");
  const__110 = (java.lang.Integer)207;
  const__111 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "obj")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IObj"))), Symbol.intern(null, "m"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 208, Keyword.intern(null, "column"), 15));
  const__112 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "obj")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IObj"))), Symbol.intern(null, "m"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 208, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an object of the same type and value as obj, with\n    map m as its metadata.", Keyword.intern(null, "line"), 207, Keyword.intern(null, "file"), "clojure/core.clj");
  const__113 = (clojure.lang.Var)RT.var("clojure.core", "assert-valid-fdecl");
  const__114 = (java.lang.Integer)216;
  const__115 = (clojure.lang.Keyword)Keyword.intern(null, "dynamic");
  const__116 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__117 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 216, Keyword.intern(null, "file"), "clojure/core.clj");
  const__118 = (clojure.lang.Var)RT.var("clojure.core", "sigs");
  const__119 = (java.lang.Integer)219;
  const__120 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 219, Keyword.intern(null, "file"), "clojure/core.clj");
  const__121 = (clojure.lang.Var)RT.var("clojure.core", "last");
  const__122 = (java.lang.Integer)245;
  const__123 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 246, Keyword.intern(null, "column"), 15));
  const__124 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 246, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return the last item in coll, in linear time", Keyword.intern(null, "line"), 245, Keyword.intern(null, "file"), "clojure/core.clj");
  const__125 = (clojure.lang.Var)RT.var("clojure.core", "butlast");
  const__126 = (java.lang.Integer)255;
  const__127 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 256, Keyword.intern(null, "column"), 15));
  const__128 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 256, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return a seq of all but the last item in coll, in linear time", Keyword.intern(null, "line"), 255, Keyword.intern(null, "file"), "clojure/core.clj");
  const__129 = (clojure.lang.Var)RT.var("clojure.core", "defn");
  const__130 = (java.lang.Integer)266;
  const__131 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "prepost-map?"), Symbol.intern(null, "body")), RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "prepost-map?"), Symbol.intern(null, "body")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 273, Keyword.intern(null, "column"), 45)), Symbol.intern(null, "+"), Symbol.intern(null, "attr-map?"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 272, Keyword.intern(null, "column"), 15));
  const__132 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "prepost-map?"), Symbol.intern(null, "body")), RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "prepost-map?"), Symbol.intern(null, "body")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 273, Keyword.intern(null, "column"), 45)), Symbol.intern(null, "+"), Symbol.intern(null, "attr-map?"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 272, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Same as (def name (fn [params* ] exprs*)) or (def\n    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", Keyword.intern(null, "line"), 266, Keyword.intern(null, "file"), "clojure/core.clj");
  const__133 = (clojure.lang.Var)RT.var("clojure.core", "cast");
  const__134 = (java.lang.Integer)320;
  const__135 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "x"))));
  const__136 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Throws a ClassCastException if x is not a c, else returns x.", Keyword.intern(null, "line"), 320, Keyword.intern(null, "file"), "clojure/core.clj");
  const__137 = (clojure.lang.Var)RT.var("clojure.core", "to-array");
  const__138 = (java.lang.Integer)327;
  const__139 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__140 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an array of Objects containing the contents of coll, which\n  can be any Collection.  Maps to java.util.Collection.toArray().", Keyword.intern(null, "line"), 327, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), "[Ljava.lang.Object;");
  const__141 = (clojure.lang.Var)RT.var("clojure.core", "vector");
  const__142 = (java.lang.Integer)335;
  const__143 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "a")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__144 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "a")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates a new vector containing the args.", Keyword.intern(null, "line"), 335, Keyword.intern(null, "file"), "clojure/core.clj");
  const__145 = (clojure.lang.Var)RT.var("clojure.core", "vec");
  const__146 = (java.lang.Integer)347;
  const__147 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__148 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates a new vector containing the contents of coll. Java arrays\n  will be aliased and should not be modified.", Keyword.intern(null, "line"), 347, Keyword.intern(null, "file"), "clojure/core.clj");
  const__149 = (clojure.lang.Var)RT.var("clojure.core", "hash-map");
  const__150 = (java.lang.Integer)357;
  const__151 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals"))));
  const__152 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "keyval => key val\n  Returns a new hash map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.", Keyword.intern(null, "line"), 357, Keyword.intern(null, "file"), "clojure/core.clj");
  const__153 = (clojure.lang.Var)RT.var("clojure.core", "hash-set");
  const__154 = (java.lang.Integer)367;
  const__155 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys"))));
  const__156 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.", Keyword.intern(null, "line"), 367, Keyword.intern(null, "file"), "clojure/core.clj");
  const__157 = (clojure.lang.Var)RT.var("clojure.core", "sorted-map");
  const__158 = (java.lang.Integer)376;
  const__159 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals"))));
  const__160 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "keyval => key val\n  Returns a new sorted map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.", Keyword.intern(null, "line"), 376, Keyword.intern(null, "file"), "clojure/core.clj");
  const__161 = (clojure.lang.Var)RT.var("clojure.core", "sorted-map-by");
  const__162 = (java.lang.Integer)385;
  const__163 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "comparator"), Symbol.intern(null, "&"), Symbol.intern(null, "keyvals"))));
  const__164 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "comparator"), Symbol.intern(null, "&"), Symbol.intern(null, "keyvals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied\n  comparator.  If any keys are equal, they are handled as if by\n  repeated uses of assoc.", Keyword.intern(null, "line"), 385, Keyword.intern(null, "file"), "clojure/core.clj");
  const__165 = (clojure.lang.Var)RT.var("clojure.core", "sorted-set");
  const__166 = (java.lang.Integer)395;
  const__167 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys"))));
  const__168 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new sorted set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.", Keyword.intern(null, "line"), 395, Keyword.intern(null, "file"), "clojure/core.clj");
  const__169 = (clojure.lang.Var)RT.var("clojure.core", "sorted-set-by");
  const__170 = (java.lang.Integer)403;
  const__171 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "comparator"), Symbol.intern(null, "&"), Symbol.intern(null, "keys"))));
  const__172 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "comparator"), Symbol.intern(null, "&"), Symbol.intern(null, "keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new sorted set with supplied keys, using the supplied\n  comparator.  Any equal keys are handled as if by repeated uses of\n  conj.", Keyword.intern(null, "line"), 403, Keyword.intern(null, "file"), "clojure/core.clj");
  const__173 = (clojure.lang.Var)RT.var("clojure.core", "nil?");
  const__174 = (java.lang.Integer)414;
  const__175 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__176 = (clojure.lang.Keyword)Keyword.intern(null, "inline");
  const__177 = (java.lang.Class)java.lang.Boolean.class;
  const__178 = (clojure.lang.Var)RT.var("clojure.core", "defmacro");
  const__179 = (java.lang.Integer)422;
  const__180 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "body")), RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "body")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 428, Keyword.intern(null, "column"), 46)), Symbol.intern(null, "+"), Symbol.intern(null, "attr-map?"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 427, Keyword.intern(null, "column"), 15));
  const__181 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "body")), RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "doc-string?"), Symbol.intern(null, "attr-map?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "body")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 428, Keyword.intern(null, "column"), 46)), Symbol.intern(null, "+"), Symbol.intern(null, "attr-map?"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 427, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", Keyword.intern(null, "line"), 422, Keyword.intern(null, "file"), "clojure/core.clj");
  const__182 = (clojure.lang.Var)RT.var("clojure.core", "when");
  const__183 = (java.lang.Integer)471;
  const__184 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__185 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates test. If logical true, evaluates body in an implicit do.", Keyword.intern(null, "line"), 471, Keyword.intern(null, "file"), "clojure/core.clj");
  const__186 = (clojure.lang.Var)RT.var("clojure.core", "when-not");
  const__187 = (java.lang.Integer)477;
  const__188 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__189 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates test. If logical false, evaluates body in an implicit do.", Keyword.intern(null, "line"), 477, Keyword.intern(null, "file"), "clojure/core.clj");
  const__190 = (clojure.lang.Var)RT.var("clojure.core", "false?");
  const__191 = (java.lang.Integer)483;
  const__192 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__193 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is the value false, false otherwise.", Keyword.intern(null, "line"), 483, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__194 = (clojure.lang.Var)RT.var("clojure.core", "true?");
  const__195 = (java.lang.Integer)490;
  const__196 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__197 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is the value true, false otherwise.", Keyword.intern(null, "line"), 490, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__198 = (clojure.lang.Var)RT.var("clojure.core", "not");
  const__199 = (java.lang.Integer)497;
 }
 static void __init2() {
  const__200 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__201 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is logical false, false otherwise.", Keyword.intern(null, "line"), 497, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__202 = (clojure.lang.Var)RT.var("clojure.core", "str");
  const__203 = (java.lang.Integer)504;
  const__204 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector()).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "ys"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))));
  const__205 = (java.lang.Class)java.lang.String.class;
  const__206 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector()).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "ys"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", Keyword.intern(null, "line"), 504, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__207 = (clojure.lang.Var)RT.var("clojure.core", "symbol?");
  const__208 = (java.lang.Integer)522;
  const__209 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__210 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x is a Symbol", Keyword.intern(null, "line"), 522, Keyword.intern(null, "file"), "clojure/core.clj");
  const__211 = (clojure.lang.Var)RT.var("clojure.core", "keyword?");
  const__212 = (java.lang.Integer)528;
  const__213 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__214 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return true if x is a Keyword", Keyword.intern(null, "line"), 528, Keyword.intern(null, "file"), "clojure/core.clj");
  const__215 = (clojure.lang.Var)RT.var("clojure.core", "symbol");
  const__216 = (java.lang.Integer)534;
  const__217 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name"))));
  const__218 = (java.lang.Class)clojure.lang.Symbol.class;
  const__219 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a Symbol with the given namespace and name.", Keyword.intern(null, "line"), 534, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.Symbol.class);
  const__220 = (clojure.lang.Var)RT.var("clojure.core", "gensym");
  const__221 = (java.lang.Integer)542;
  const__222 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "prefix-string"))));
  const__223 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "prefix-string")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", Keyword.intern(null, "line"), 542, Keyword.intern(null, "file"), "clojure/core.clj");
  const__224 = (clojure.lang.Var)RT.var("clojure.core", "cond");
  const__225 = (java.lang.Integer)551;
  const__226 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "clauses"))));
  const__227 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.", Keyword.intern(null, "line"), 551, Keyword.intern(null, "file"), "clojure/core.clj");
  const__228 = (clojure.lang.Var)RT.var("clojure.core", "keyword");
  const__229 = (java.lang.Integer)566;
  const__230 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name"))));
  const__231 = (java.lang.Class)clojure.lang.Keyword.class;
  const__232 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", Keyword.intern(null, "line"), 566, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.Keyword.class);
  const__233 = (clojure.lang.Var)RT.var("clojure.core", "find-keyword");
  const__234 = (java.lang.Integer)577;
  const__235 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name"))));
  const__236 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a Keyword with the given namespace and name if one already\n  exists.  This function will not intern a new keyword. If the keyword\n  has not already been interned, it will return nil.  Do not use :\n  in the keyword strings, it will be added automatically.", Keyword.intern(null, "line"), 577, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.Keyword.class);
  const__237 = (clojure.lang.Var)RT.var("clojure.core", "spread");
  const__238 = (java.lang.Integer)591;
  const__239 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "arglist"))));
  const__240 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "arglist")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 591, Keyword.intern(null, "file"), "clojure/core.clj");
  const__241 = (clojure.lang.Var)RT.var("clojure.core", "list*");
  const__242 = (java.lang.Integer)600;
  const__243 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__244 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", Keyword.intern(null, "line"), 600, Keyword.intern(null, "file"), "clojure/core.clj");
  const__245 = (clojure.lang.Var)RT.var("clojure.core", "apply");
  const__246 = (java.lang.Integer)612;
  const__247 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__248 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "args")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IFn"))), Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "c"), Symbol.intern(null, "d"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Applies fn f to the argument list formed by prepending intervening arguments to args.", Keyword.intern(null, "line"), 612, Keyword.intern(null, "file"), "clojure/core.clj");
  const__249 = (clojure.lang.Var)RT.var("clojure.core", "vary-meta");
  const__250 = (java.lang.Integer)627;
  const__251 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "obj"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__252 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "obj"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", Keyword.intern(null, "line"), 627, Keyword.intern(null, "file"), "clojure/core.clj");
  const__253 = (clojure.lang.Var)RT.var("clojure.core", "lazy-seq");
  const__254 = (java.lang.Integer)635;
  const__255 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__256 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?", Keyword.intern(null, "line"), 635, Keyword.intern(null, "file"), "clojure/core.clj");
  const__257 = (clojure.lang.Var)RT.var("clojure.core", "chunk-buffer");
  const__258 = (java.lang.Integer)644;
  const__259 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "capacity"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer")))));
  const__260 = (java.lang.Class)clojure.lang.ChunkBuffer.class;
  const__261 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "capacity"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 644, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ChunkBuffer.class);
  const__262 = (clojure.lang.Var)RT.var("clojure.core", "chunk-append");
  const__263 = (java.lang.Integer)647;
  const__264 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer"))), Symbol.intern(null, "x"))));
  const__265 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer"))), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 647, Keyword.intern(null, "file"), "clojure/core.clj");
  const__266 = (clojure.lang.Var)RT.var("clojure.core", "chunk");
  const__267 = (java.lang.Integer)650;
  const__268 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer"))))));
  const__269 = (java.lang.Class)clojure.lang.IChunk.class;
  const__270 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ChunkBuffer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 650, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.IChunk.class);
  const__271 = (clojure.lang.Var)RT.var("clojure.core", "chunk-first");
  const__272 = (java.lang.Integer)653;
  const__273 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunk")))));
  const__274 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunk"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 653, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.IChunk.class);
  const__275 = (clojure.lang.Var)RT.var("clojure.core", "chunk-rest");
  const__276 = (java.lang.Integer)656;
  const__277 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq")))));
  const__278 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 656, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ISeq.class);
  const__279 = (clojure.lang.Var)RT.var("clojure.core", "chunk-next");
  const__280 = (java.lang.Integer)659;
  const__281 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq")))));
  const__282 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IChunkedSeq"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ISeq"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 659, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.ISeq.class);
  const__283 = (clojure.lang.Var)RT.var("clojure.core", "chunk-cons");
  const__284 = (java.lang.Integer)662;
  const__285 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "chunk"), Symbol.intern(null, "rest"))));
  const__286 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "chunk"), Symbol.intern(null, "rest")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 662, Keyword.intern(null, "file"), "clojure/core.clj");
  const__287 = (clojure.lang.Var)RT.var("clojure.core", "chunked-seq?");
  const__288 = (java.lang.Integer)667;
  const__289 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__290 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 667, Keyword.intern(null, "file"), "clojure/core.clj");
  const__291 = (clojure.lang.Var)RT.var("clojure.core", "concat");
  const__292 = (java.lang.Integer)670;
  const__293 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "zs"))));
  const__294 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "zs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", Keyword.intern(null, "line"), 670, Keyword.intern(null, "file"), "clojure/core.clj");
  const__295 = (clojure.lang.Var)RT.var("clojure.core", "delay");
  const__296 = (java.lang.Integer)698;
  const__297 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__298 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls. See also - realized?", Keyword.intern(null, "line"), 698, Keyword.intern(null, "file"), "clojure/core.clj");
  const__299 = (clojure.lang.Var)RT.var("clojure.core", "delay?");
 }
 static void __init3() {
  const__300 = (java.lang.Integer)707;
  const__301 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__302 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "returns true if x is a Delay created with delay", Keyword.intern(null, "line"), 707, Keyword.intern(null, "file"), "clojure/core.clj");
  const__303 = (clojure.lang.Var)RT.var("clojure.core", "force");
  const__304 = (java.lang.Integer)713;
  const__305 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__306 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", Keyword.intern(null, "line"), 713, Keyword.intern(null, "file"), "clojure/core.clj");
  const__307 = (clojure.lang.Var)RT.var("clojure.core", "if-not");
  const__308 = (java.lang.Integer)719;
  const__309 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "then")), RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "then"), Symbol.intern(null, "else"))));
  const__310 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "then")), RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "then"), Symbol.intern(null, "else")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates test. If logical false, evaluates and returns then expr,\n  otherwise else expr, if supplied, else nil.", Keyword.intern(null, "line"), 719, Keyword.intern(null, "file"), "clojure/core.clj");
  const__311 = (clojure.lang.Var)RT.var("clojure.core", "identical?");
  const__312 = (java.lang.Integer)727;
  const__313 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__314 = (clojure.lang.Keyword)Keyword.intern(null, "inline-arities");
  const__315 = (java.lang.Long)2L;
  const__316 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__317 = (clojure.lang.Var)RT.var("clojure.core", "=");
  const__318 = (java.lang.Integer)735;
  const__319 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__320 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__321 = (clojure.lang.Var)RT.var("clojure.core", "not=");
  const__322 = (java.lang.Integer)771;
  const__323 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__324 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (not (= obj1 obj2))", Keyword.intern(null, "line"), 771, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__325 = (clojure.lang.Var)RT.var("clojure.core", "compare");
  const__326 = (java.lang.Integer)783;
  const__327 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__328 = (clojure.lang.Var)RT.var("clojure.core", "and");
  const__329 = (java.lang.Integer)794;
  const__330 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "next"))));
  const__331 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "next")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", Keyword.intern(null, "line"), 794, Keyword.intern(null, "file"), "clojure/core.clj");
  const__332 = (clojure.lang.Var)RT.var("clojure.core", "or");
  const__333 = (java.lang.Integer)806;
  const__334 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "next"))));
  const__335 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "next")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", Keyword.intern(null, "line"), 806, Keyword.intern(null, "file"), "clojure/core.clj");
  const__336 = (clojure.lang.Var)RT.var("clojure.core", "zero?");
  const__337 = (java.lang.Integer)819;
  const__338 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__339 = (clojure.lang.Var)RT.var("clojure.core", "count");
  const__340 = (java.lang.Integer)826;
  const__341 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__342 = (clojure.lang.Var)RT.var("clojure.core", "int");
  const__343 = (java.lang.Integer)834;
  const__344 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__345 = (clojure.lang.Var)RT.var("clojure.core", "nth");
  const__346 = (java.lang.Integer)841;
  const__347 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "index")), RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "index"), Symbol.intern(null, "not-found"))));
  const__348 = (java.lang.Long)3L;
  const__349 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L, 3L);
  const__350 = (clojure.lang.Var)RT.var("clojure.core", "<");
  const__351 = (java.lang.Integer)852;
  const__352 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__353 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__354 = (clojure.lang.Var)RT.var("clojure.core", "inc'");
  const__355 = (java.lang.Integer)867;
  const__356 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__357 = (clojure.lang.Var)RT.var("clojure.core", "inc");
  const__358 = (java.lang.Integer)874;
  const__359 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__360 = (clojure.lang.Var)RT.var("clojure.core", "reduce1");
  const__361 = (java.lang.Integer)882;
  const__362 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "val"), Symbol.intern(null, "coll"))));
  const__363 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "val"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 882, Keyword.intern(null, "file"), "clojure/core.clj");
  const__364 = (clojure.lang.Var)RT.var("clojure.core", "reverse");
  const__365 = (java.lang.Integer)899;
  const__366 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__367 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq of the items in coll in reverse order. Not lazy.", Keyword.intern(null, "line"), 899, Keyword.intern(null, "file"), "clojure/core.clj");
  const__368 = (clojure.lang.Var)RT.var("clojure.core", "nary-inline");
  const__369 = (java.lang.Integer)907;
  const__370 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "op")), RT.vector(Symbol.intern(null, "op"), Symbol.intern(null, "unchecked-op"))));
  const__371 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "op")), RT.vector(Symbol.intern(null, "op"), Symbol.intern(null, "unchecked-op")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 907, Keyword.intern(null, "file"), "clojure/core.clj");
  const__372 = (clojure.lang.Var)RT.var("clojure.core", ">1?");
  const__373 = (java.lang.Integer)921;
  const__374 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__375 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 921, Keyword.intern(null, "file"), "clojure/core.clj");
  const__376 = (clojure.lang.Var)RT.var("clojure.core", ">0?");
  const__377 = (java.lang.Integer)922;
  const__378 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__379 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 922, Keyword.intern(null, "file"), "clojure/core.clj");
  const__380 = (clojure.lang.Var)RT.var("clojure.core", "+'");
  const__381 = (java.lang.Integer)924;
  const__382 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__383 = (clojure.lang.Symbol)Symbol.intern(null, "addP");
  const__384 = (clojure.lang.Var)RT.var("clojure.core", "+");
  const__385 = (java.lang.Integer)936;
  const__386 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__387 = (clojure.lang.Symbol)Symbol.intern(null, "add");
  const__388 = (clojure.lang.Symbol)Symbol.intern(null, "unchecked_add");
  const__389 = (clojure.lang.Var)RT.var("clojure.core", "*'");
  const__390 = (java.lang.Integer)948;
  const__391 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__392 = (clojure.lang.Symbol)Symbol.intern(null, "multiplyP");
  const__393 = (clojure.lang.Var)RT.var("clojure.core", "*");
  const__394 = (java.lang.Integer)960;
  const__395 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__396 = (clojure.lang.Symbol)Symbol.intern(null, "multiply");
  const__397 = (clojure.lang.Symbol)Symbol.intern(null, "unchecked_multiply");
  const__398 = (clojure.lang.Var)RT.var("clojure.core", "/");
  const__399 = (java.lang.Integer)972;
 }
 static void __init4() {
  const__400 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__401 = (clojure.lang.Symbol)Symbol.intern(null, "divide");
  const__402 = (clojure.lang.Var)RT.var("clojure.core", "-'");
  const__403 = (java.lang.Integer)983;
  const__404 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__405 = (clojure.lang.Symbol)Symbol.intern(null, "minusP");
  const__406 = (clojure.lang.Var)RT.var("clojure.core", "-");
  const__407 = (java.lang.Integer)995;
  const__408 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__409 = (clojure.lang.Symbol)Symbol.intern(null, "minus");
  const__410 = (clojure.lang.Symbol)Symbol.intern(null, "unchecked_minus");
  const__411 = (clojure.lang.Var)RT.var("clojure.core", "<=");
  const__412 = (java.lang.Integer)1007;
  const__413 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__414 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__415 = (clojure.lang.Var)RT.var("clojure.core", ">");
  const__416 = (java.lang.Integer)1022;
  const__417 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__418 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__419 = (clojure.lang.Var)RT.var("clojure.core", ">=");
  const__420 = (java.lang.Integer)1037;
  const__421 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__422 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__423 = (clojure.lang.Var)RT.var("clojure.core", "==");
  const__424 = (java.lang.Integer)1052;
  const__425 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__426 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__427 = (clojure.lang.Var)RT.var("clojure.core", "max");
  const__428 = (java.lang.Integer)1067;
  const__429 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__430 = (clojure.lang.Symbol)Symbol.intern(null, "max");
  const__431 = (clojure.lang.Var)RT.var("clojure.core", "min");
  const__432 = (java.lang.Integer)1077;
  const__433 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__434 = (clojure.lang.Symbol)Symbol.intern(null, "min");
  const__435 = (clojure.lang.Var)RT.var("clojure.core", "dec'");
  const__436 = (java.lang.Integer)1087;
  const__437 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__438 = (clojure.lang.Var)RT.var("clojure.core", "dec");
  const__439 = (java.lang.Integer)1094;
  const__440 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__441 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-inc-int");
  const__442 = (java.lang.Integer)1101;
  const__443 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__444 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-inc");
  const__445 = (java.lang.Integer)1108;
  const__446 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__447 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-dec-int");
  const__448 = (java.lang.Integer)1115;
  const__449 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__450 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-dec");
  const__451 = (java.lang.Integer)1122;
  const__452 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__453 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-negate-int");
  const__454 = (java.lang.Integer)1129;
  const__455 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__456 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-negate");
  const__457 = (java.lang.Integer)1136;
  const__458 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__459 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-add-int");
  const__460 = (java.lang.Integer)1143;
  const__461 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__462 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-add");
  const__463 = (java.lang.Integer)1150;
  const__464 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__465 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-subtract-int");
  const__466 = (java.lang.Integer)1157;
  const__467 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__468 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-subtract");
  const__469 = (java.lang.Integer)1164;
  const__470 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__471 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-multiply-int");
  const__472 = (java.lang.Integer)1171;
  const__473 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__474 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-multiply");
  const__475 = (java.lang.Integer)1178;
  const__476 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__477 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-divide-int");
  const__478 = (java.lang.Integer)1185;
  const__479 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__480 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-remainder-int");
  const__481 = (java.lang.Integer)1192;
  const__482 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"))));
  const__483 = (clojure.lang.Var)RT.var("clojure.core", "pos?");
  const__484 = (java.lang.Integer)1199;
  const__485 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__486 = (clojure.lang.Var)RT.var("clojure.core", "neg?");
  const__487 = (java.lang.Integer)1206;
  const__488 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__489 = (clojure.lang.Var)RT.var("clojure.core", "quot");
  const__490 = (java.lang.Integer)1213;
  const__491 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div"))));
  const__492 = (clojure.lang.Var)RT.var("clojure.core", "rem");
  const__493 = (java.lang.Integer)1221;
  const__494 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div"))));
  const__495 = (clojure.lang.Var)RT.var("clojure.core", "rationalize");
  const__496 = (java.lang.Integer)1229;
  const__497 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"))));
  const__498 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "returns the rational value of num", Keyword.intern(null, "line"), 1229, Keyword.intern(null, "file"), "clojure/core.clj");
  const__499 = (clojure.lang.Var)RT.var("clojure.core", "bit-not");
 }
 static void __init5() {
  const__500 = (java.lang.Integer)1238;
  const__501 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__502 = (clojure.lang.Var)RT.var("clojure.core", "bit-and");
  const__503 = (java.lang.Integer)1245;
  const__504 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__505 = (clojure.lang.Symbol)Symbol.intern(null, "and");
  const__506 = (clojure.lang.Var)RT.var("clojure.core", "bit-or");
  const__507 = (java.lang.Integer)1254;
  const__508 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__509 = (clojure.lang.Symbol)Symbol.intern(null, "or");
  const__510 = (clojure.lang.Var)RT.var("clojure.core", "bit-xor");
  const__511 = (java.lang.Integer)1263;
  const__512 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__513 = (clojure.lang.Symbol)Symbol.intern(null, "xor");
  const__514 = (clojure.lang.Var)RT.var("clojure.core", "bit-and-not");
  const__515 = (java.lang.Integer)1272;
  const__516 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__517 = (clojure.lang.Symbol)Symbol.intern(null, "andNot");
  const__518 = (clojure.lang.Var)RT.var("clojure.core", "bit-clear");
  const__519 = (java.lang.Integer)1283;
  const__520 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__521 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Clear bit at index n", Keyword.intern(null, "line"), 1283, Keyword.intern(null, "file"), "clojure/core.clj");
  const__522 = (clojure.lang.Var)RT.var("clojure.core", "bit-set");
  const__523 = (java.lang.Integer)1289;
  const__524 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__525 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Set bit at index n", Keyword.intern(null, "line"), 1289, Keyword.intern(null, "file"), "clojure/core.clj");
  const__526 = (clojure.lang.Var)RT.var("clojure.core", "bit-flip");
  const__527 = (java.lang.Integer)1295;
  const__528 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__529 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Flip bit at index n", Keyword.intern(null, "line"), 1295, Keyword.intern(null, "file"), "clojure/core.clj");
  const__530 = (clojure.lang.Var)RT.var("clojure.core", "bit-test");
  const__531 = (java.lang.Integer)1301;
  const__532 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__533 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Test bit at index n", Keyword.intern(null, "line"), 1301, Keyword.intern(null, "file"), "clojure/core.clj");
  const__534 = (clojure.lang.Var)RT.var("clojure.core", "bit-shift-left");
  const__535 = (java.lang.Integer)1308;
  const__536 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__537 = (clojure.lang.Var)RT.var("clojure.core", "bit-shift-right");
  const__538 = (java.lang.Integer)1314;
  const__539 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "n"))));
  const__540 = (clojure.lang.Var)RT.var("clojure.core", "integer?");
  const__541 = (java.lang.Integer)1320;
  const__542 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__543 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is an integer", Keyword.intern(null, "line"), 1320, Keyword.intern(null, "file"), "clojure/core.clj");
  const__544 = (clojure.lang.Var)RT.var("clojure.core", "even?");
  const__545 = (java.lang.Integer)1332;
  const__546 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__547 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is even, throws an exception if n is not an integer", Keyword.intern(null, "line"), 1332, Keyword.intern(null, "file"), "clojure/core.clj");
  const__548 = (clojure.lang.Var)RT.var("clojure.core", "odd?");
  const__549 = (java.lang.Integer)1340;
  const__550 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__551 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is odd, throws an exception if n is not an integer", Keyword.intern(null, "line"), 1340, Keyword.intern(null, "file"), "clojure/core.clj");
  const__552 = (clojure.lang.Var)RT.var("clojure.core", "complement");
  const__553 = (java.lang.Integer)1349;
  const__554 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__555 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", Keyword.intern(null, "line"), 1349, Keyword.intern(null, "file"), "clojure/core.clj");
  const__556 = (clojure.lang.Var)RT.var("clojure.core", "constantly");
  const__557 = (java.lang.Integer)1361;
  const__558 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__559 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a function that takes any number of arguments and returns x.", Keyword.intern(null, "line"), 1361, Keyword.intern(null, "file"), "clojure/core.clj");
  const__560 = (clojure.lang.Var)RT.var("clojure.core", "identity");
  const__561 = (java.lang.Integer)1367;
  const__562 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__563 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns its argument.", Keyword.intern(null, "line"), 1367, Keyword.intern(null, "file"), "clojure/core.clj");
  const__564 = (clojure.lang.Var)RT.var("clojure.core", "peek");
  const__565 = (java.lang.Integer)1376;
  const__566 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__567 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", Keyword.intern(null, "line"), 1376, Keyword.intern(null, "file"), "clojure/core.clj");
  const__568 = (clojure.lang.Var)RT.var("clojure.core", "pop");
  const__569 = (java.lang.Integer)1383;
  const__570 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__571 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item. If\n  the collection is empty, throws an exception.  Note - not the same\n  as next/butlast.", Keyword.intern(null, "line"), 1383, Keyword.intern(null, "file"), "clojure/core.clj");
  const__572 = (clojure.lang.Var)RT.var("clojure.core", "contains?");
  const__573 = (java.lang.Integer)1394;
  const__574 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "key"))));
  const__575 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and Java arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", Keyword.intern(null, "line"), 1394, Keyword.intern(null, "file"), "clojure/core.clj");
  const__576 = (clojure.lang.Var)RT.var("clojure.core", "get");
  const__577 = (java.lang.Integer)1404;
  const__578 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "not-found"))));
  const__579 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L, 3L);
  const__580 = (clojure.lang.Var)RT.var("clojure.core", "dissoc");
  const__581 = (java.lang.Integer)1414;
  const__582 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"))));
  const__583 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key")), RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", Keyword.intern(null, "line"), 1414, Keyword.intern(null, "file"), "clojure/core.clj");
  const__584 = (clojure.lang.Var)RT.var("clojure.core", "disj");
  const__585 = (java.lang.Integer)1428;
  const__586 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "set")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IPersistentSet"))), Symbol.intern(null, "key")), RT.vector(Symbol.intern(null, "set"), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"))));
  const__587 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "set")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IPersistentSet"))), Symbol.intern(null, "key")), RT.vector(Symbol.intern(null, "set"), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", Keyword.intern(null, "line"), 1428, Keyword.intern(null, "file"), "clojure/core.clj");
  const__588 = (clojure.lang.Var)RT.var("clojure.core", "find");
  const__589 = (java.lang.Integer)1444;
  const__590 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key"))));
  const__591 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the map entry for key, or nil if key not present.", Keyword.intern(null, "line"), 1444, Keyword.intern(null, "file"), "clojure/core.clj");
  const__592 = (clojure.lang.Var)RT.var("clojure.core", "select-keys");
  const__593 = (java.lang.Integer)1450;
  const__594 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "keyseq"))));
  const__595 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"), Symbol.intern(null, "keyseq")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map containing only those entries in map whose key is in keys", Keyword.intern(null, "line"), 1450, Keyword.intern(null, "file"), "clojure/core.clj");
  const__596 = (clojure.lang.Var)RT.var("clojure.core", "keys");
  const__597 = (java.lang.Integer)1465;
  const__598 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"))));
  const__599 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a sequence of the map's keys.", Keyword.intern(null, "line"), 1465, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static void __init6() {
  const__600 = (clojure.lang.Var)RT.var("clojure.core", "vals");
  const__601 = (java.lang.Integer)1471;
  const__602 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map"))));
  const__603 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "map")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a sequence of the map's values.", Keyword.intern(null, "line"), 1471, Keyword.intern(null, "file"), "clojure/core.clj");
  const__604 = (clojure.lang.Var)RT.var("clojure.core", "key");
  const__605 = (java.lang.Integer)1477;
  const__606 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Map$Entry"))))));
  const__607 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Map$Entry")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the key of the map entry.", Keyword.intern(null, "line"), 1477, Keyword.intern(null, "file"), "clojure/core.clj");
  const__608 = (clojure.lang.Var)RT.var("clojure.core", "val");
  const__609 = (java.lang.Integer)1484;
  const__610 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Map$Entry"))))));
  const__611 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Map$Entry")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the value in the map entry.", Keyword.intern(null, "line"), 1484, Keyword.intern(null, "file"), "clojure/core.clj");
  const__612 = (clojure.lang.Var)RT.var("clojure.core", "rseq");
  const__613 = (java.lang.Integer)1491;
  const__614 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "rev")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Reversible"))))));
  const__615 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "rev")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Reversible")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil", Keyword.intern(null, "line"), 1491, Keyword.intern(null, "file"), "clojure/core.clj");
  const__616 = (clojure.lang.Var)RT.var("clojure.core", "name");
  const__617 = (java.lang.Integer)1499;
  const__618 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__619 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the name String of a string, symbol or keyword.", Keyword.intern(null, "line"), 1499, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__620 = (clojure.lang.Var)RT.var("clojure.core", "namespace");
  const__621 = (java.lang.Integer)1507;
  const__622 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Named"))))));
  const__623 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Named")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the namespace String of a symbol or keyword, or nil if not present.", Keyword.intern(null, "line"), 1507, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__624 = (clojure.lang.Var)RT.var("clojure.core", "locking");
  const__625 = (java.lang.Integer)1515;
  const__626 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__627 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Executes exprs in an implicit do, while holding the monitor of x.\n  Will release the monitor of x in all circumstances.", Keyword.intern(null, "line"), 1515, Keyword.intern(null, "file"), "clojure/core.clj");
  const__628 = (clojure.lang.Var)RT.var("clojure.core", "..");
  const__629 = (java.lang.Integer)1527;
  const__630 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "form")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "form"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__631 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "form")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "form"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.", Keyword.intern(null, "line"), 1527, Keyword.intern(null, "file"), "clojure/core.clj");
  const__632 = (clojure.lang.Var)RT.var("clojure.core", "->");
  const__633 = (java.lang.Integer)1545;
  const__634 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__635 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.", Keyword.intern(null, "line"), 1545, Keyword.intern(null, "file"), "clojure/core.clj");
  const__636 = (clojure.lang.Var)RT.var("clojure.core", "->>");
  const__637 = (java.lang.Integer)1561;
  const__638 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__639 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.", Keyword.intern(null, "line"), 1561, Keyword.intern(null, "file"), "clojure/core.clj");
  const__640 = (clojure.lang.Var)RT.var("clojure.core", "map");
  const__641 = (java.lang.Integer)1577;
  const__642 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 1577, Keyword.intern(null, "file"), "clojure/core.clj");
  const__643 = (clojure.lang.Var)RT.var("clojure.core", "check-valid-options");
  const__644 = (java.lang.Integer)1579;
  const__645 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "options"), Symbol.intern(null, "&"), Symbol.intern(null, "valid-keys"))));
  const__646 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "options"), Symbol.intern(null, "&"), Symbol.intern(null, "valid-keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", Keyword.intern(null, "line"), 1579, Keyword.intern(null, "file"), "clojure/core.clj");
  const__647 = (clojure.lang.Var)RT.var("clojure.core", "global-hierarchy");
  const__648 = (java.lang.Integer)1592;
  const__649 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 1592, Keyword.intern(null, "file"), "clojure/core.clj");
  const__650 = (clojure.lang.Var)RT.var("clojure.core", "defmulti");
  const__651 = (java.lang.Integer)1594;
  const__652 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring?"), Symbol.intern(null, "attr-map?"), Symbol.intern(null, "dispatch-fn"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 1617, Keyword.intern(null, "column"), 15));
  const__653 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring?"), Symbol.intern(null, "attr-map?"), Symbol.intern(null, "dispatch-fn"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 1617, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).", Keyword.intern(null, "line"), 1594, Keyword.intern(null, "file"), "clojure/core.clj");
  const__654 = (clojure.lang.Var)RT.var("clojure.core", "defmethod");
  const__655 = (java.lang.Integer)1651;
  const__656 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "multifn"), Symbol.intern(null, "dispatch-val"), Symbol.intern(null, "&"), Symbol.intern(null, "fn-tail"))));
  const__657 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "multifn"), Symbol.intern(null, "dispatch-val"), Symbol.intern(null, "&"), Symbol.intern(null, "fn-tail")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Creates and installs a new method of multimethod associated with dispatch-value. ", Keyword.intern(null, "line"), 1651, Keyword.intern(null, "file"), "clojure/core.clj");
  const__658 = (clojure.lang.Var)RT.var("clojure.core", "remove-all-methods");
  const__659 = (java.lang.Integer)1657;
  const__660 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))))));
  const__661 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Removes all of the methods of multimethod.", Keyword.intern(null, "line"), 1657, Keyword.intern(null, "file"), "clojure/core.clj");
  const__662 = (clojure.lang.Var)RT.var("clojure.core", "remove-method");
  const__663 = (java.lang.Integer)1664;
  const__664 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val"))));
  const__665 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Removes the method of multimethod associated with dispatch-value.", Keyword.intern(null, "line"), 1664, Keyword.intern(null, "file"), "clojure/core.clj");
  const__666 = (clojure.lang.Var)RT.var("clojure.core", "prefer-method");
  const__667 = (java.lang.Integer)1671;
  const__668 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val-x"), Symbol.intern(null, "dispatch-val-y"))));
  const__669 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val-x"), Symbol.intern(null, "dispatch-val-y")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", Keyword.intern(null, "line"), 1671, Keyword.intern(null, "file"), "clojure/core.clj");
  const__670 = (clojure.lang.Var)RT.var("clojure.core", "methods");
  const__671 = (java.lang.Integer)1679;
  const__672 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))))));
  const__673 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Given a multimethod, returns a map of dispatch values -> dispatch fns", Keyword.intern(null, "line"), 1679, Keyword.intern(null, "file"), "clojure/core.clj");
  const__674 = (clojure.lang.Var)RT.var("clojure.core", "get-method");
  const__675 = (java.lang.Integer)1685;
  const__676 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val"))));
  const__677 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))), Symbol.intern(null, "dispatch-val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", Keyword.intern(null, "line"), 1685, Keyword.intern(null, "file"), "clojure/core.clj");
  const__678 = (clojure.lang.Var)RT.var("clojure.core", "prefers");
  const__679 = (java.lang.Integer)1692;
  const__680 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn"))))));
  const__681 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Given a multimethod, returns a map of preferred value -> set of other values", Keyword.intern(null, "line"), 1692, Keyword.intern(null, "file"), "clojure/core.clj");
  const__682 = (clojure.lang.Var)RT.var("clojure.core", "assert-args");
  const__683 = (java.lang.Integer)1700;
  const__684 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "pairs"))));
  const__685 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "pairs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1700, Keyword.intern(null, "file"), "clojure/core.clj");
  const__686 = (clojure.lang.Var)RT.var("clojure.core", "if-let");
  const__687 = (java.lang.Integer)1709;
  const__688 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "then")), RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "then"), Symbol.intern(null, "else"), Symbol.intern(null, "&"), Symbol.intern(null, "oldform"))));
  const__689 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "then")), RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "then"), Symbol.intern(null, "else"), Symbol.intern(null, "&"), Symbol.intern(null, "oldform")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of\n  test, if not, yields else", Keyword.intern(null, "line"), 1709, Keyword.intern(null, "file"), "clojure/core.clj");
  const__690 = (clojure.lang.Var)RT.var("clojure.core", "when-let");
  const__691 = (java.lang.Integer)1729;
  const__692 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__693 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test", Keyword.intern(null, "line"), 1729, Keyword.intern(null, "file"), "clojure/core.clj");
  const__694 = (clojure.lang.Var)RT.var("clojure.core", "push-thread-bindings");
  const__695 = (java.lang.Integer)1744;
  const__696 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"))));
  const__697 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "WARNING: This is a low-level function. Prefer high-level macros like\n  binding where ever possible.\n\n  Takes a map of Var/value pairs. Binds each Var to the associated value for\n  the current thread. Each call *MUST* be accompanied by a matching call to\n  pop-thread-bindings wrapped in a try-finally!\n\n      (push-thread-bindings bindings)\n      (try\n        ...\n        (finally\n          (pop-thread-bindings)))", Keyword.intern(null, "line"), 1744, Keyword.intern(null, "file"), "clojure/core.clj");
  const__698 = (clojure.lang.Var)RT.var("clojure.core", "pop-thread-bindings");
  const__699 = (java.lang.Integer)1762;
 }
 static void __init7() {
  const__700 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__701 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Pop one set of bindings pushed with push-binding before. It is an error to\n  pop bindings without pushing before.", Keyword.intern(null, "line"), 1762, Keyword.intern(null, "file"), "clojure/core.clj");
  const__702 = (clojure.lang.Var)RT.var("clojure.core", "get-thread-bindings");
  const__703 = (java.lang.Integer)1770;
  const__704 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__705 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Get a map with the Var/value pairs which is currently in effect for the\n  current thread.", Keyword.intern(null, "line"), 1770, Keyword.intern(null, "file"), "clojure/core.clj");
  const__706 = (clojure.lang.Var)RT.var("clojure.core", "binding");
  const__707 = (java.lang.Integer)1778;
  const__708 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__709 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", Keyword.intern(null, "line"), 1778, Keyword.intern(null, "file"), "clojure/core.clj");
  const__710 = (clojure.lang.Var)RT.var("clojure.core", "with-bindings*");
  const__711 = (java.lang.Integer)1804;
  const__712 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__713 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then calls f with the supplied arguments.\n  Pops the installed bindings after f returned. Returns whatever f returns.", Keyword.intern(null, "line"), 1804, Keyword.intern(null, "file"), "clojure/core.clj");
  const__714 = (clojure.lang.Var)RT.var("clojure.core", "with-bindings");
  const__715 = (java.lang.Integer)1817;
  const__716 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__717 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. The executes body. Pops the installed\n  bindings after body was evaluated. Returns the value of body.", Keyword.intern(null, "line"), 1817, Keyword.intern(null, "file"), "clojure/core.clj");
  const__718 = (clojure.lang.Var)RT.var("clojure.core", "bound-fn*");
  const__719 = (java.lang.Integer)1825;
  const__720 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__721 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a function, which will install the same bindings in effect as in\n  the thread at the time bound-fn* was called and then call f with any given\n  arguments. This may be used to define a helper function which runs on a\n  different thread, but needs the same bindings in place.", Keyword.intern(null, "line"), 1825, Keyword.intern(null, "file"), "clojure/core.clj");
  const__722 = (clojure.lang.Var)RT.var("clojure.core", "bound-fn");
  const__723 = (java.lang.Integer)1837;
  const__724 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "fntail"))));
  const__725 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "fntail")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Returns a function defined by the given fntail, which will install the\n  same bindings in effect as in the thread at the time bound-fn was called.\n  This may be used to define a helper function which runs on a different\n  thread, but needs the same bindings in place.", Keyword.intern(null, "line"), 1837, Keyword.intern(null, "file"), "clojure/core.clj");
  const__726 = (clojure.lang.Var)RT.var("clojure.core", "find-var");
  const__727 = (java.lang.Integer)1846;
  const__728 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"))));
  const__729 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the global var named by the namespace-qualified symbol, or\n  nil if no var with that name.", Keyword.intern(null, "line"), 1846, Keyword.intern(null, "file"), "clojure/core.clj");
  const__730 = (clojure.lang.Var)RT.var("clojure.core", "binding-conveyor-fn");
  const__731 = (java.lang.Integer)1853;
  const__732 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__733 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1853, Keyword.intern(null, "file"), "clojure/core.clj");
  const__734 = (clojure.lang.Var)RT.var("clojure.core", "setup-reference");
  const__735 = (java.lang.Integer)1876;
  const__736 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "r")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ARef"))), Symbol.intern(null, "options"))));
  const__737 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "r")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ARef"))), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1876, Keyword.intern(null, "file"), "clojure/core.clj");
  const__738 = (clojure.lang.Var)RT.var("clojure.core", "agent");
  const__739 = (java.lang.Integer)1885;
  const__740 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "state"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__741 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "state"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates and returns an agent with an initial value of state and\n  zero or more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :error-handler handler-fn\n\n  :error-mode mode-keyword\n\n  If metadata-map is supplied, it will become the metadata on the\n  agent. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.  handler-fn is called if an\n  action throws an exception or if validate-fn rejects a new state --\n  see set-error-handler! for details.  The mode-keyword may be either\n  :continue (the default if an error-handler is given) or :fail (the\n  default if no error-handler is given) -- see set-error-mode! for\n  details.", Keyword.intern(null, "line"), 1885, Keyword.intern(null, "file"), "clojure/core.clj");
  const__742 = (clojure.lang.Var)RT.var("clojure.core", "set-agent-send-executor!");
  const__743 = (java.lang.Integer)1920;
  const__744 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor"))));
  const__745 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Sets the ExecutorService to be used by send", Keyword.intern(null, "line"), 1920, Keyword.intern(null, "file"), "clojure/core.clj");
  const__746 = (clojure.lang.Var)RT.var("clojure.core", "set-agent-send-off-executor!");
  const__747 = (java.lang.Integer)1926;
  const__748 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor"))));
  const__749 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Sets the ExecutorService to be used by send-off", Keyword.intern(null, "line"), 1926, Keyword.intern(null, "file"), "clojure/core.clj");
  const__750 = (clojure.lang.Var)RT.var("clojure.core", "send-via");
  const__751 = (java.lang.Integer)1932;
  const__752 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor"), ((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__753 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "executor"), ((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread supplied by executor, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)", Keyword.intern(null, "line"), 1932, Keyword.intern(null, "file"), "clojure/core.clj");
  const__754 = (clojure.lang.Var)RT.var("clojure.core", "send");
  const__755 = (java.lang.Integer)1942;
  const__756 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__757 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread from a thread pool, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)", Keyword.intern(null, "line"), 1942, Keyword.intern(null, "file"), "clojure/core.clj");
  const__758 = (clojure.lang.Var)RT.var("clojure.core", "send-off");
  const__759 = (java.lang.Integer)1953;
  const__760 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__761 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Dispatch a potentially blocking action to an agent. Returns the\n  agent immediately. Subsequently, in a separate thread, the state of\n  the agent will be set to the value of:\n\n  (apply action-fn state-of-agent args)", Keyword.intern(null, "line"), 1953, Keyword.intern(null, "file"), "clojure/core.clj");
  const__762 = (clojure.lang.Var)RT.var("clojure.core", "release-pending-sends");
  const__763 = (java.lang.Integer)1964;
  const__764 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__765 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Normally, actions sent directly or indirectly during another action\n  are held until the action completes (changes the agent's\n  state). This function can be used to dispatch any pending sent\n  actions immediately. This has no impact on actions sent during a\n  transaction, which are still held until commit. If no action is\n  occurring, does nothing. Returns the number of actions dispatched.", Keyword.intern(null, "line"), 1964, Keyword.intern(null, "file"), "clojure/core.clj");
  const__766 = (clojure.lang.Var)RT.var("clojure.core", "add-watch");
  const__767 = (java.lang.Integer)1975;
  const__768 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "reference")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "key"), Symbol.intern(null, "fn"))));
  const__769 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "reference")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "key"), Symbol.intern(null, "fn")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Adds a watch function to an agent/atom/var/ref reference. The watch\n  fn must be a fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch fn\n  will be called synchronously, on the agent's thread if an agent,\n  before any pending sends if agent or ref. Note that an atom's or\n  ref's state may have changed again prior to the fn call, so use\n  old/new-state rather than derefing the reference. Note also that watch\n  fns may be called from multiple threads simultaneously. Var watchers\n  are triggered only by root binding changes, not thread-local\n  set!s. Keys must be unique per reference, and can be used to remove\n  the watch with remove-watch, but are otherwise considered opaque by\n  the watch mechanism.", Keyword.intern(null, "line"), 1975, Keyword.intern(null, "file"), "clojure/core.clj");
  const__770 = (clojure.lang.Var)RT.var("clojure.core", "remove-watch");
  const__771 = (java.lang.Integer)1994;
  const__772 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "reference")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "key"))));
  const__773 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "reference")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Removes a watch (set by add-watch) from a reference", Keyword.intern(null, "line"), 1994, Keyword.intern(null, "file"), "clojure/core.clj");
  const__774 = (clojure.lang.Var)RT.var("clojure.core", "agent-error");
  const__775 = (java.lang.Integer)2002;
  const__776 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))))));
  const__777 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the exception thrown during an asynchronous action of the\n  agent if the agent is failed.  Returns nil if the agent is not\n  failed.", Keyword.intern(null, "line"), 2002, Keyword.intern(null, "file"), "clojure/core.clj");
  const__778 = (clojure.lang.Var)RT.var("clojure.core", "restart-agent");
  const__779 = (java.lang.Integer)2010;
  const__780 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "new-state"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__781 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "new-state"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed.", Keyword.intern(null, "line"), 2010, Keyword.intern(null, "file"), "clojure/core.clj");
  const__782 = (clojure.lang.Var)RT.var("clojure.core", "set-error-handler!");
  const__783 = (java.lang.Integer)2027;
  const__784 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "handler-fn"))));
  const__785 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "handler-fn")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sets the error-handler of agent a to handler-fn.  If an action\n  being run by the agent throws an exception or doesn't pass the\n  validator fn, handler-fn will be called with two arguments: the\n  agent and the exception.", Keyword.intern(null, "line"), 2027, Keyword.intern(null, "file"), "clojure/core.clj");
  const__786 = (clojure.lang.Var)RT.var("clojure.core", "error-handler");
  const__787 = (java.lang.Integer)2037;
  const__788 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))))));
  const__789 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the error-handler of agent a, or nil if there is none.\n  See set-error-handler!", Keyword.intern(null, "line"), 2037, Keyword.intern(null, "file"), "clojure/core.clj");
  const__790 = (clojure.lang.Var)RT.var("clojure.core", "set-error-mode!");
  const__791 = (java.lang.Integer)2045;
  const__792 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "mode-keyword"))));
  const__793 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))), Symbol.intern(null, "mode-keyword")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sets the error-mode of agent a to mode-keyword, which must be\n  either :fail or :continue.  If an action being run by the agent\n  throws an exception or doesn't pass the validator fn, an\n  error-handler may be called (see set-error-handler!), after which,\n  if the mode is :continue, the agent will continue as if neither the\n  action that caused the error nor the error itself ever happened.\n\n  If the mode is :fail, the agent will become failed and will stop\n  accepting new 'send' and 'send-off' actions, and any previously\n  queued actions will be held until a 'restart-agent'.  Deref will\n  still work, returning the state of the agent before the error.", Keyword.intern(null, "line"), 2045, Keyword.intern(null, "file"), "clojure/core.clj");
  const__794 = (clojure.lang.Var)RT.var("clojure.core", "error-mode");
  const__795 = (java.lang.Integer)2062;
  const__796 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))))));
  const__797 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the error-mode of agent a.  See set-error-mode!", Keyword.intern(null, "line"), 2062, Keyword.intern(null, "file"), "clojure/core.clj");
  const__798 = (clojure.lang.Var)RT.var("clojure.core", "agent-errors");
  const__799 = (java.lang.Integer)2069;
 }
 static void __init8() {
  const__800 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a"))));
  const__801 = (clojure.lang.Keyword)Keyword.intern(null, "deprecated");
  const__802 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a")))), Keyword.intern(null, "deprecated"), "1.2", Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "DEPRECATED: Use 'agent-error' instead.\n  Returns a sequence of the exceptions thrown during asynchronous\n  actions of the agent.", Keyword.intern(null, "line"), 2069, Keyword.intern(null, "file"), "clojure/core.clj");
  const__803 = (clojure.lang.Var)RT.var("clojure.core", "clear-agent-errors");
  const__804 = (java.lang.Integer)2079;
  const__805 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))))));
  const__806 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent")))))), Keyword.intern(null, "deprecated"), "1.2", Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "DEPRECATED: Use 'restart-agent' instead.\n  Clears any exceptions thrown during asynchronous actions of the\n  agent, allowing subsequent actions to occur.", Keyword.intern(null, "line"), 2079, Keyword.intern(null, "file"), "clojure/core.clj");
  const__807 = (clojure.lang.Var)RT.var("clojure.core", "shutdown-agents");
  const__808 = (java.lang.Integer)2087;
  const__809 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__810 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Initiates a shutdown of the thread pools that back the agent\n  system. Running actions will complete, but no new actions will be\n  accepted", Keyword.intern(null, "line"), 2087, Keyword.intern(null, "file"), "clojure/core.clj");
  const__811 = (clojure.lang.Var)RT.var("clojure.core", "ref");
  const__812 = (java.lang.Integer)2095;
  const__813 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__814 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.", Keyword.intern(null, "line"), 2095, Keyword.intern(null, "file"), "clojure/core.clj");
  const__815 = (clojure.lang.Var)RT.var("clojure.core", "deref-future");
  const__816 = (java.lang.Integer)2131;
  const__817 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "fut")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "fut")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future"))), Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "timeout-val"))));
  const__818 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "fut")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "fut")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future"))), Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "timeout-val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 2131, Keyword.intern(null, "file"), "clojure/core.clj");
  const__819 = (clojure.lang.Var)RT.var("clojure.core", "deref");
  const__820 = (java.lang.Integer)2139;
  const__821 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ref")), RT.vector(Symbol.intern(null, "ref"), Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "timeout-val"))));
  const__822 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ref")), RT.vector(Symbol.intern(null, "ref"), Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "timeout-val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?.", Keyword.intern(null, "line"), 2139, Keyword.intern(null, "file"), "clojure/core.clj");
  const__823 = (clojure.lang.Var)RT.var("clojure.core", "atom");
  const__824 = (java.lang.Integer)2160;
  const__825 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__826 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.", Keyword.intern(null, "line"), 2160, Keyword.intern(null, "file"), "clojure/core.clj");
  const__827 = (clojure.lang.Var)RT.var("clojure.core", "swap!");
  const__828 = (java.lang.Integer)2178;
  const__829 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__830 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", Keyword.intern(null, "line"), 2178, Keyword.intern(null, "file"), "clojure/core.clj");
  const__831 = (clojure.lang.Var)RT.var("clojure.core", "compare-and-set!");
  const__832 = (java.lang.Integer)2190;
  const__833 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "oldval"), Symbol.intern(null, "newval"))));
  const__834 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "oldval"), Symbol.intern(null, "newval")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false", Keyword.intern(null, "line"), 2190, Keyword.intern(null, "file"), "clojure/core.clj");
  const__835 = (clojure.lang.Var)RT.var("clojure.core", "reset!");
  const__836 = (java.lang.Integer)2198;
  const__837 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "newval"))));
  const__838 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "atom")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Atom"))), Symbol.intern(null, "newval")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", Keyword.intern(null, "line"), 2198, Keyword.intern(null, "file"), "clojure/core.clj");
  const__839 = (clojure.lang.Var)RT.var("clojure.core", "set-validator!");
  const__840 = (java.lang.Integer)2205;
  const__841 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "validator-fn"))));
  const__842 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))), Symbol.intern(null, "validator-fn")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed.", Keyword.intern(null, "line"), 2205, Keyword.intern(null, "file"), "clojure/core.clj");
  const__843 = (clojure.lang.Var)RT.var("clojure.core", "get-validator");
  const__844 = (java.lang.Integer)2216;
  const__845 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef"))))));
  const__846 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IRef")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Gets the validator-fn for a var/ref/agent/atom.", Keyword.intern(null, "line"), 2216, Keyword.intern(null, "file"), "clojure/core.clj");
  const__847 = (clojure.lang.Var)RT.var("clojure.core", "alter-meta!");
  const__848 = (java.lang.Integer)2222;
  const__849 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IReference"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__850 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IReference"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", Keyword.intern(null, "line"), 2222, Keyword.intern(null, "file"), "clojure/core.clj");
  const__851 = (clojure.lang.Var)RT.var("clojure.core", "reset-meta!");
  const__852 = (java.lang.Integer)2232;
  const__853 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IReference"))), Symbol.intern(null, "metadata-map"))));
  const__854 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "iref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IReference"))), Symbol.intern(null, "metadata-map")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Atomically resets the metadata for a namespace/var/ref/agent/atom", Keyword.intern(null, "line"), 2232, Keyword.intern(null, "file"), "clojure/core.clj");
  const__855 = (clojure.lang.Var)RT.var("clojure.core", "commute");
  const__856 = (java.lang.Integer)2238;
  const__857 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "fun"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__858 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "fun"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set.", Keyword.intern(null, "line"), 2238, Keyword.intern(null, "file"), "clojure/core.clj");
  const__859 = (clojure.lang.Var)RT.var("clojure.core", "alter");
  const__860 = (java.lang.Integer)2259;
  const__861 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "fun"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__862 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "fun"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.", Keyword.intern(null, "line"), 2259, Keyword.intern(null, "file"), "clojure/core.clj");
  const__863 = (clojure.lang.Var)RT.var("clojure.core", "ref-set");
  const__864 = (java.lang.Integer)2271;
  const__865 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "val"))));
  const__866 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Must be called in a transaction. Sets the value of ref.\n  Returns val.", Keyword.intern(null, "line"), 2271, Keyword.intern(null, "file"), "clojure/core.clj");
  const__867 = (clojure.lang.Var)RT.var("clojure.core", "ref-history-count");
  const__868 = (java.lang.Integer)2279;
  const__869 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))))));
  const__870 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the history count of a ref", Keyword.intern(null, "line"), 2279, Keyword.intern(null, "file"), "clojure/core.clj");
  const__871 = (clojure.lang.Var)RT.var("clojure.core", "ref-min-history");
  const__872 = (java.lang.Integer)2286;
  const__873 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "n"))));
  const__874 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Gets the min-history of a ref, or sets it and returns the ref", Keyword.intern(null, "line"), 2286, Keyword.intern(null, "file"), "clojure/core.clj");
  const__875 = (clojure.lang.Var)RT.var("clojure.core", "ref-max-history");
  const__876 = (java.lang.Integer)2295;
  const__877 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "n"))));
  const__878 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Gets the max-history of a ref, or sets it and returns the ref", Keyword.intern(null, "line"), 2295, Keyword.intern(null, "file"), "clojure/core.clj");
  const__879 = (clojure.lang.Var)RT.var("clojure.core", "ensure");
  const__880 = (java.lang.Integer)2304;
  const__881 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref"))))));
  const__882 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ref")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Ref")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Must be called in a transaction. Protects the ref from modification\n  by other transactions.  Returns the in-transaction-value of\n  ref. Allows for more concurrency than (ref-set ref @ref)", Keyword.intern(null, "line"), 2304, Keyword.intern(null, "file"), "clojure/core.clj");
  const__883 = (clojure.lang.Var)RT.var("clojure.core", "sync");
  const__884 = (java.lang.Integer)2314;
  const__885 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "flags-ignored-for-now"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__886 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "flags-ignored-for-now"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "transaction-flags => TBD, pass nil for now\n\n  Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of sync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.", Keyword.intern(null, "line"), 2314, Keyword.intern(null, "file"), "clojure/core.clj");
  const__887 = (clojure.lang.Var)RT.var("clojure.core", "io!");
  const__888 = (java.lang.Integer)2328;
  const__889 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__890 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "If an io! block occurs in a transaction, throws an\n  IllegalStateException, else runs body in an implicit do. If the\n  first expression in body is a literal string, will use that as the\n  exception message.", Keyword.intern(null, "line"), 2328, Keyword.intern(null, "file"), "clojure/core.clj");
  const__891 = (clojure.lang.Var)RT.var("clojure.core", "comp");
  const__892 = (java.lang.Integer)2344;
  const__893 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h")), RT.vector(Symbol.intern(null, "f1"), Symbol.intern(null, "f2"), Symbol.intern(null, "f3"), Symbol.intern(null, "&"), Symbol.intern(null, "fs"))));
  const__894 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h")), RT.vector(Symbol.intern(null, "f1"), Symbol.intern(null, "f2"), Symbol.intern(null, "f3"), Symbol.intern(null, "&"), Symbol.intern(null, "fs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", Keyword.intern(null, "line"), 2344, Keyword.intern(null, "file"), "clojure/core.clj");
  const__895 = (clojure.lang.Var)RT.var("clojure.core", "juxt");
  const__896 = (java.lang.Integer)2375;
  const__897 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h"), Symbol.intern(null, "&"), Symbol.intern(null, "fs"))));
  const__898 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "g"), Symbol.intern(null, "h"), Symbol.intern(null, "&"), Symbol.intern(null, "fs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", Keyword.intern(null, "line"), 2375, Keyword.intern(null, "file"), "clojure/core.clj");
  const__899 = (clojure.lang.Var)RT.var("clojure.core", "partial");
 }
 static void __init9() {
  const__900 = (java.lang.Integer)2413;
  const__901 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__902 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", Keyword.intern(null, "line"), 2413, Keyword.intern(null, "file"), "clojure/core.clj");
  const__903 = (clojure.lang.Var)RT.var("clojure.core", "sequence");
  const__904 = (java.lang.Integer)2430;
  const__905 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__906 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", Keyword.intern(null, "line"), 2430, Keyword.intern(null, "file"), "clojure/core.clj");
  const__907 = (clojure.lang.Var)RT.var("clojure.core", "every?");
  const__908 = (java.lang.Integer)2439;
  const__909 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__910 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if (pred x) is logical true for every x in coll, else\n  false.", Keyword.intern(null, "line"), 2439, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__911 = (clojure.lang.Var)RT.var("clojure.core", "not-every?");
  const__912 = (java.lang.Integer)2451;
  const__913 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 2455, Keyword.intern(null, "column"), 15));
  const__914 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 2455, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns false if (pred x) is logical true for every x in\n  coll, else true.", Keyword.intern(null, "line"), 2451, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__915 = (clojure.lang.Var)RT.var("clojure.core", "some");
  const__916 = (java.lang.Integer)2459;
  const__917 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__918 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", Keyword.intern(null, "line"), 2459, Keyword.intern(null, "file"), "clojure/core.clj");
  const__919 = (clojure.lang.Var)RT.var("clojure.core", "not-any?");
  const__920 = (java.lang.Integer)2470;
  const__921 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 2474, Keyword.intern(null, "column"), 15));
  const__922 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 2474, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns false if (pred x) is logical true for any x in coll,\n  else true.", Keyword.intern(null, "line"), 2470, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__923 = (clojure.lang.Var)RT.var("clojure.core", "dotimes");
  const__924 = (java.lang.Integer)2479;
  const__925 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__926 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", Keyword.intern(null, "line"), 2479, Keyword.intern(null, "file"), "clojure/core.clj");
  const__927 = (java.lang.Integer)2494;
  const__928 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3"), Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__929 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3"), Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", Keyword.intern(null, "line"), 2494, Keyword.intern(null, "file"), "clojure/core.clj");
  const__930 = (clojure.lang.Var)RT.var("clojure.core", "mapcat");
  const__931 = (java.lang.Integer)2533;
  const__932 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__933 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", Keyword.intern(null, "line"), 2533, Keyword.intern(null, "file"), "clojure/core.clj");
  const__934 = (clojure.lang.Var)RT.var("clojure.core", "filter");
  const__935 = (java.lang.Integer)2541;
  const__936 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__937 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", Keyword.intern(null, "line"), 2541, Keyword.intern(null, "file"), "clojure/core.clj");
  const__938 = (clojure.lang.Var)RT.var("clojure.core", "remove");
  const__939 = (java.lang.Integer)2563;
  const__940 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__941 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", Keyword.intern(null, "line"), 2563, Keyword.intern(null, "file"), "clojure/core.clj");
  const__942 = (clojure.lang.Var)RT.var("clojure.core", "take");
  const__943 = (java.lang.Integer)2571;
  const__944 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__945 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", Keyword.intern(null, "line"), 2571, Keyword.intern(null, "file"), "clojure/core.clj");
  const__946 = (clojure.lang.Var)RT.var("clojure.core", "take-while");
  const__947 = (java.lang.Integer)2582;
  const__948 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__949 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", Keyword.intern(null, "line"), 2582, Keyword.intern(null, "file"), "clojure/core.clj");
  const__950 = (clojure.lang.Var)RT.var("clojure.core", "drop");
  const__951 = (java.lang.Integer)2593;
  const__952 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__953 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of all but the first n items in coll.", Keyword.intern(null, "line"), 2593, Keyword.intern(null, "file"), "clojure/core.clj");
  const__954 = (clojure.lang.Var)RT.var("clojure.core", "drop-last");
  const__955 = (java.lang.Integer)2605;
  const__956 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "s"))));
  const__957 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return a lazy sequence of all but the last n (default 1) items in coll", Keyword.intern(null, "line"), 2605, Keyword.intern(null, "file"), "clojure/core.clj");
  const__958 = (clojure.lang.Var)RT.var("clojure.core", "take-last");
  const__959 = (java.lang.Integer)2612;
  const__960 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__961 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", Keyword.intern(null, "line"), 2612, Keyword.intern(null, "file"), "clojure/core.clj");
  const__962 = (clojure.lang.Var)RT.var("clojure.core", "drop-while");
  const__963 = (java.lang.Integer)2623;
  const__964 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__965 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns logical false.", Keyword.intern(null, "line"), 2623, Keyword.intern(null, "file"), "clojure/core.clj");
  const__966 = (clojure.lang.Var)RT.var("clojure.core", "cycle");
  const__967 = (java.lang.Integer)2636;
  const__968 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__969 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", Keyword.intern(null, "line"), 2636, Keyword.intern(null, "file"), "clojure/core.clj");
  const__970 = (clojure.lang.Var)RT.var("clojure.core", "split-at");
  const__971 = (java.lang.Integer)2644;
  const__972 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__973 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a vector of [(take n coll) (drop n coll)]", Keyword.intern(null, "line"), 2644, Keyword.intern(null, "file"), "clojure/core.clj");
  const__974 = (clojure.lang.Var)RT.var("clojure.core", "split-with");
  const__975 = (java.lang.Integer)2651;
  const__976 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__977 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", Keyword.intern(null, "line"), 2651, Keyword.intern(null, "file"), "clojure/core.clj");
  const__978 = (clojure.lang.Var)RT.var("clojure.core", "repeat");
  const__979 = (java.lang.Integer)2658;
  const__980 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "x"))));
  const__981 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", Keyword.intern(null, "line"), 2658, Keyword.intern(null, "file"), "clojure/core.clj");
  const__982 = (clojure.lang.Var)RT.var("clojure.core", "replicate");
  const__983 = (java.lang.Integer)2665;
  const__984 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "x"))));
  const__985 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "x")))), Keyword.intern(null, "deprecated"), "1.3", Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "DEPRECATED: Use 'repeat' instead.\n   Returns a lazy seq of n xs.", Keyword.intern(null, "line"), 2665, Keyword.intern(null, "file"), "clojure/core.clj");
  const__986 = (clojure.lang.Var)RT.var("clojure.core", "iterate");
  const__987 = (java.lang.Integer)2672;
  const__988 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x"))));
  const__989 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", Keyword.intern(null, "line"), 2672, Keyword.intern(null, "file"), "clojure/core.clj");
  const__990 = (clojure.lang.Var)RT.var("clojure.core", "range");
  const__991 = (java.lang.Integer)2678;
  const__992 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "end")), RT.vector(Symbol.intern(null, "start"), Symbol.intern(null, "end")), RT.vector(Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "step"))));
  const__993 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "end")), RT.vector(Symbol.intern(null, "start"), Symbol.intern(null, "end")), RT.vector(Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "step")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list.", Keyword.intern(null, "line"), 2678, Keyword.intern(null, "file"), "clojure/core.clj");
  const__994 = (clojure.lang.Var)RT.var("clojure.core", "merge");
  const__995 = (java.lang.Integer)2704;
  const__996 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "maps"))));
  const__997 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "maps")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", Keyword.intern(null, "line"), 2704, Keyword.intern(null, "file"), "clojure/core.clj");
  const__998 = (clojure.lang.Var)RT.var("clojure.core", "merge-with");
  const__999 = (java.lang.Integer)2714;
 }
 static void __init10() {
  const__1000 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "maps"))));
  const__1001 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "maps")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", Keyword.intern(null, "line"), 2714, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1002 = (clojure.lang.Var)RT.var("clojure.core", "zipmap");
  const__1003 = (java.lang.Integer)2734;
  const__1004 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keys"), Symbol.intern(null, "vals"))));
  const__1005 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keys"), Symbol.intern(null, "vals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map with the keys mapped to the corresponding vals.", Keyword.intern(null, "line"), 2734, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1006 = (clojure.lang.Var)RT.var("clojure.core", "declare");
  const__1007 = (java.lang.Integer)2748;
  const__1008 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "names"))));
  const__1009 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "names")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "defs the supplied var names with no bindings, useful for making forward declarations.", Keyword.intern(null, "line"), 2748, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1010 = (clojure.lang.Var)RT.var("clojure.core", "line-seq");
  const__1011 = (java.lang.Integer)2753;
  const__1012 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "rdr")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.BufferedReader"))))));
  const__1013 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "rdr")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.BufferedReader")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the lines of text from rdr as a lazy sequence of strings.\n  rdr must implement java.io.BufferedReader.", Keyword.intern(null, "line"), 2753, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1014 = (clojure.lang.Var)RT.var("clojure.core", "comparator");
  const__1015 = (java.lang.Integer)2762;
  const__1016 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"))));
  const__1017 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an implementation of java.util.Comparator based upon pred.", Keyword.intern(null, "line"), 2762, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1018 = (clojure.lang.Var)RT.var("clojure.core", "sort");
  const__1019 = (java.lang.Integer)2770;
  const__1020 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "comp")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Comparator"))), Symbol.intern(null, "coll"))));
  const__1021 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "comp")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Comparator"))), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a sorted sequence of the items in coll. If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  If coll is a Java array, it will be modified.\n  To avoid this, sort a copy of the array.", Keyword.intern(null, "line"), 2770, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1022 = (clojure.lang.Var)RT.var("clojure.core", "sort-by");
  const__1023 = (java.lang.Integer)2786;
  const__1024 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keyfn"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "keyfn"), ((clojure.lang.IObj)Symbol.intern(null, "comp")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Comparator"))), Symbol.intern(null, "coll"))));
  const__1025 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keyfn"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "keyfn"), ((clojure.lang.IObj)Symbol.intern(null, "comp")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Comparator"))), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a sorted sequence of the items in coll, where the sort\n  order is determined by comparing (keyfn item).  If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  If coll is a Java array, it will be modified.\n  To avoid this, sort a copy of the array.", Keyword.intern(null, "line"), 2786, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1026 = (clojure.lang.Var)RT.var("clojure.core", "dorun");
  const__1027 = (java.lang.Integer)2799;
  const__1028 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__1029 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", Keyword.intern(null, "line"), 2799, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1030 = (clojure.lang.Var)RT.var("clojure.core", "doall");
  const__1031 = (java.lang.Integer)2814;
  const__1032 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__1033 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", Keyword.intern(null, "line"), 2814, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1034 = (clojure.lang.Var)RT.var("clojure.core", "nthnext");
  const__1035 = (java.lang.Integer)2830;
  const__1036 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "n"))));
  const__1037 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the nth next of coll, (seq coll) when n is 0.", Keyword.intern(null, "line"), 2830, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1038 = (clojure.lang.Var)RT.var("clojure.core", "nthrest");
  const__1039 = (java.lang.Integer)2840;
  const__1040 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "n"))));
  const__1041 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"), Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the nth rest of coll, coll when n is 0.", Keyword.intern(null, "line"), 2840, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1042 = (clojure.lang.Var)RT.var("clojure.core", "partition");
  const__1043 = (java.lang.Integer)2850;
  const__1044 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "pad"), Symbol.intern(null, "coll"))));
  const__1045 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "pad"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", Keyword.intern(null, "line"), 2850, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1046 = (clojure.lang.Var)RT.var("clojure.core", "eval");
  const__1047 = (java.lang.Integer)2876;
  const__1048 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form"))));
  const__1049 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Evaluates the form data structure (not text!) and returns the result.", Keyword.intern(null, "line"), 2876, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1050 = (clojure.lang.Var)RT.var("clojure.core", "doseq");
  const__1051 = (java.lang.Integer)2882;
  const__1052 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "seq-exprs"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1053 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "seq-exprs"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", Keyword.intern(null, "line"), 2882, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1054 = (clojure.lang.Var)RT.var("clojure.core", "await");
  const__1055 = (java.lang.Integer)2940;
  const__1056 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "agents"))));
  const__1057 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "agents")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true.", Keyword.intern(null, "line"), 2940, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1058 = (clojure.lang.Var)RT.var("clojure.core", "await1");
  const__1059 = (java.lang.Integer)2957;
  const__1060 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent"))))));
  const__1061 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Agent")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 2957, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1062 = (clojure.lang.Var)RT.var("clojure.core", "await-for");
  const__1063 = (java.lang.Integer)2962;
  const__1064 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "&"), Symbol.intern(null, "agents"))));
  const__1065 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "timeout-ms"), Symbol.intern(null, "&"), Symbol.intern(null, "agents")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.", Keyword.intern(null, "line"), 2962, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1066 = (java.lang.Integer)2979;
  const__1067 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1068 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", Keyword.intern(null, "line"), 2979, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1069 = (clojure.lang.Var)RT.var("clojure.core", "transient");
  const__1070 = (java.lang.Integer)3008;
  const__1071 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IEditableCollection"))))));
  const__1072 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IEditableCollection")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Returns a new, transient version of the collection, in constant time.", Keyword.intern(null, "line"), 3008, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1073 = (clojure.lang.Var)RT.var("clojure.core", "persistent!");
  const__1074 = (java.lang.Integer)3016;
  const__1075 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientCollection"))))));
  const__1076 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientCollection")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", Keyword.intern(null, "line"), 3016, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1077 = (clojure.lang.Var)RT.var("clojure.core", "conj!");
  const__1078 = (java.lang.Integer)3026;
  const__1079 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientCollection"))), Symbol.intern(null, "x"))));
  const__1080 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientCollection"))), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", Keyword.intern(null, "line"), 3026, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1081 = (clojure.lang.Var)RT.var("clojure.core", "assoc!");
  const__1082 = (java.lang.Integer)3035;
  const__1083 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientAssociative"))), Symbol.intern(null, "key"), Symbol.intern(null, "val")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientAssociative"))), Symbol.intern(null, "key"), Symbol.intern(null, "val"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs"))));
  const__1084 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientAssociative"))), Symbol.intern(null, "key"), Symbol.intern(null, "val")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientAssociative"))), Symbol.intern(null, "key"), Symbol.intern(null, "val"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", Keyword.intern(null, "line"), 3035, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1085 = (clojure.lang.Var)RT.var("clojure.core", "dissoc!");
  const__1086 = (java.lang.Integer)3049;
  const__1087 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "map")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientMap"))), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "map")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientMap"))), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"))));
  const__1088 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "map")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientMap"))), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "map")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientMap"))), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Returns a transient map that doesn't contain a mapping for key(s).", Keyword.intern(null, "line"), 3049, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1089 = (clojure.lang.Var)RT.var("clojure.core", "pop!");
  const__1090 = (java.lang.Integer)3061;
  const__1091 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientVector"))))));
  const__1092 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientVector")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", Keyword.intern(null, "line"), 3061, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1093 = (clojure.lang.Var)RT.var("clojure.core", "disj!");
  const__1094 = (java.lang.Integer)3070;
  const__1095 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "set")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientSet"))), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientSet"))), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"))));
  const__1096 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "set")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientSet"))), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "set")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientSet"))), Symbol.intern(null, "key"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", Keyword.intern(null, "line"), 3070, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1097 = (clojure.lang.Var)RT.var("clojure.core", "into1");
  const__1098 = (java.lang.Integer)3086;
  const__1099 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "to"), Symbol.intern(null, "from"))));
 }
 static void __init11() {
  const__1100 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "to"), Symbol.intern(null, "from")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", Keyword.intern(null, "line"), 3086, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1101 = (clojure.lang.Var)RT.var("clojure.core", "import");
  const__1102 = (java.lang.Integer)3096;
  const__1103 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "import-symbols-or-lists"))));
  const__1104 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "import-symbols-or-lists")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "import-list => (package-symbol class-name-symbols*)\n\n  For each name in class-name-symbols, adds a mapping from name to the\n  class named by package.name to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.", Keyword.intern(null, "line"), 3096, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1105 = (clojure.lang.Var)RT.var("clojure.core", "into-array");
  const__1106 = (java.lang.Integer)3114;
  const__1107 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "aseq")), RT.vector(Symbol.intern(null, "type"), Symbol.intern(null, "aseq"))));
  const__1108 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "aseq")), RT.vector(Symbol.intern(null, "type"), Symbol.intern(null, "aseq")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an array with components set to the values in aseq. The array's\n  component type is type if provided, or the type of the first value in\n  aseq if present, or Object. All values in aseq must be compatible with\n  the component type. Class objects for the primitive types can be obtained\n  using, e.g., Integer/TYPE.", Keyword.intern(null, "line"), 3114, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1109 = (clojure.lang.Var)RT.var("clojure.core", "array");
  const__1110 = (java.lang.Integer)3127;
  const__1111 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "items"))));
  const__1112 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "items")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 3127, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1113 = (clojure.lang.Var)RT.var("clojure.core", "class");
  const__1114 = (java.lang.Integer)3131;
  const__1115 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class")))));
  const__1116 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the Class of x", Keyword.intern(null, "line"), 3131, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1117 = (clojure.lang.Var)RT.var("clojure.core", "type");
  const__1118 = (java.lang.Integer)3137;
  const__1119 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1120 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the :type metadata of x, or its Class if none", Keyword.intern(null, "line"), 3137, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1121 = (clojure.lang.Var)RT.var("clojure.core", "num");
  const__1122 = (java.lang.Integer)3144;
  const__1123 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1124 = (java.lang.Class)java.lang.Number.class;
  const__1125 = (clojure.lang.Var)RT.var("clojure.core", "long");
  const__1126 = (java.lang.Integer)3151;
  const__1127 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1128 = (clojure.lang.Var)RT.var("clojure.core", "float");
  const__1129 = (java.lang.Integer)3157;
  const__1130 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1131 = (clojure.lang.Var)RT.var("clojure.core", "double");
  const__1132 = (java.lang.Integer)3163;
  const__1133 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1134 = (clojure.lang.Var)RT.var("clojure.core", "short");
  const__1135 = (java.lang.Integer)3169;
  const__1136 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1137 = (clojure.lang.Var)RT.var("clojure.core", "byte");
  const__1138 = (java.lang.Integer)3175;
  const__1139 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1140 = (clojure.lang.Var)RT.var("clojure.core", "char");
  const__1141 = (java.lang.Integer)3181;
  const__1142 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1143 = (clojure.lang.Var)RT.var("clojure.core", "boolean");
  const__1144 = (java.lang.Integer)3187;
  const__1145 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1146 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-byte");
  const__1147 = (java.lang.Integer)3194;
  const__1148 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1149 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-short");
  const__1150 = (java.lang.Integer)3200;
  const__1151 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1152 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-char");
  const__1153 = (java.lang.Integer)3206;
  const__1154 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1155 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-int");
  const__1156 = (java.lang.Integer)3212;
  const__1157 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1158 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-long");
  const__1159 = (java.lang.Integer)3218;
  const__1160 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1161 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-float");
  const__1162 = (java.lang.Integer)3224;
  const__1163 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1164 = (clojure.lang.Var)RT.var("clojure.core", "unchecked-double");
  const__1165 = (java.lang.Integer)3230;
  const__1166 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Number"))))));
  const__1167 = (clojure.lang.Var)RT.var("clojure.core", "number?");
  const__1168 = (java.lang.Integer)3237;
  const__1169 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1170 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is a Number", Keyword.intern(null, "line"), 3237, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1171 = (clojure.lang.Var)RT.var("clojure.core", "mod");
  const__1172 = (java.lang.Integer)3244;
  const__1173 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div"))));
  const__1174 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Modulus of num and div. Truncates toward negative infinity.", Keyword.intern(null, "line"), 3244, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1175 = (clojure.lang.Var)RT.var("clojure.core", "ratio?");
  const__1176 = (java.lang.Integer)3254;
  const__1177 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__1178 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is a Ratio", Keyword.intern(null, "line"), 3254, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1179 = (clojure.lang.Var)RT.var("clojure.core", "numerator");
  const__1180 = (java.lang.Integer)3260;
  const__1181 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "r"))));
  const__1182 = (java.lang.Class)java.math.BigInteger.class;
  const__1183 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "r")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the numerator part of a Ratio.", Keyword.intern(null, "line"), 3260, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.math.BigInteger.class);
  const__1184 = (clojure.lang.Var)RT.var("clojure.core", "denominator");
  const__1185 = (java.lang.Integer)3268;
  const__1186 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "r"))));
  const__1187 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "r")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the denominator part of a Ratio.", Keyword.intern(null, "line"), 3268, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.math.BigInteger.class);
  const__1188 = (clojure.lang.Var)RT.var("clojure.core", "decimal?");
  const__1189 = (java.lang.Integer)3276;
  const__1190 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__1191 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is a BigDecimal", Keyword.intern(null, "line"), 3276, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1192 = (clojure.lang.Var)RT.var("clojure.core", "float?");
  const__1193 = (java.lang.Integer)3282;
  const__1194 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__1195 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is a floating point number", Keyword.intern(null, "line"), 3282, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1196 = (clojure.lang.Var)RT.var("clojure.core", "rational?");
  const__1197 = (java.lang.Integer)3290;
  const__1198 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__1199 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if n is a rational number", Keyword.intern(null, "line"), 3290, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static void __init12() {
  const__1200 = (clojure.lang.Var)RT.var("clojure.core", "bigint");
  const__1201 = (java.lang.Integer)3297;
  const__1202 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1203 = (java.lang.Class)clojure.lang.BigInt.class;
  const__1204 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Coerce to BigInt", Keyword.intern(null, "line"), 3297, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), clojure.lang.BigInt.class);
  const__1205 = (clojure.lang.Var)RT.var("clojure.core", "biginteger");
  const__1206 = (java.lang.Integer)3311;
  const__1207 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1208 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Coerce to BigInteger", Keyword.intern(null, "line"), 3311, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.math.BigInteger.class);
  const__1209 = (clojure.lang.Var)RT.var("clojure.core", "bigdec");
  const__1210 = (java.lang.Integer)3325;
  const__1211 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1212 = (java.lang.Class)java.math.BigDecimal.class;
  const__1213 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Coerce to BigDecimal", Keyword.intern(null, "line"), 3325, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.math.BigDecimal.class);
  const__1214 = (clojure.lang.Var)RT.var("clojure.core", "print-initialized");
  const__1215 = (java.lang.Integer)3339;
  const__1216 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 3339, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1217 = (clojure.lang.Var)RT.var("clojure.core", "pr-on");
  const__1218 = (java.lang.Integer)3346;
  const__1219 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "w"))));
  const__1220 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "w")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 3346, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1221 = (clojure.lang.Var)RT.var("clojure.core", "pr");
  const__1222 = (java.lang.Integer)3355;
  const__1223 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1224 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Prints the object(s) to the output stream that is the current value\n  of *out*.  Prints the object(s), separated by spaces if there is\n  more than one.  By default, pr and prn print in a way that objects\n  can be read by the reader", Keyword.intern(null, "line"), 3355, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1225 = (clojure.lang.Var)RT.var("clojure.core", "system-newline");
  const__1226 = (java.lang.Integer)3372;
  const__1227 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 3372, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1228 = (clojure.lang.Var)RT.var("clojure.core", "newline");
  const__1229 = (java.lang.Integer)3375;
  const__1230 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1231 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Writes a platform-specific newline to *out*", Keyword.intern(null, "line"), 3375, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1232 = (clojure.lang.Var)RT.var("clojure.core", "flush");
  const__1233 = (java.lang.Integer)3383;
  const__1234 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1235 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Flushes the output stream that is the current value of\n  *out*", Keyword.intern(null, "line"), 3383, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1236 = (clojure.lang.Var)RT.var("clojure.core", "prn");
  const__1237 = (java.lang.Integer)3392;
  const__1238 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1239 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as pr followed by (newline). Observes *flush-on-newline*", Keyword.intern(null, "line"), 3392, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1240 = (clojure.lang.Var)RT.var("clojure.core", "print");
  const__1241 = (java.lang.Integer)3402;
  const__1242 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1243 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Prints the object(s) to the output stream that is the current value\n  of *out*.  print and println produce output for human consumption.", Keyword.intern(null, "line"), 3402, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1244 = (clojure.lang.Var)RT.var("clojure.core", "println");
  const__1245 = (java.lang.Integer)3411;
  const__1246 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1247 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as print followed by (newline)", Keyword.intern(null, "line"), 3411, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1248 = (clojure.lang.Var)RT.var("clojure.core", "read");
  const__1249 = (java.lang.Integer)3419;
  const__1250 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "stream")), RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "eof-value")), RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "eof-value"), Symbol.intern(null, "recursive?"))));
  const__1251 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "stream")), RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "eof-value")), RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "eof-value"), Symbol.intern(null, "recursive?")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read", Keyword.intern(null, "line"), 3419, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1252 = (clojure.lang.Var)RT.var("clojure.core", "read-line");
  const__1253 = (java.lang.Integer)3439;
  const__1254 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1255 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Reads the next line from stream that is the current value of *in* .", Keyword.intern(null, "line"), 3439, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1256 = (clojure.lang.Var)RT.var("clojure.core", "read-string");
  const__1257 = (java.lang.Integer)3448;
  const__1258 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__1259 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Reads one object from the string s.\n\n  Note that read-string can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read-string", Keyword.intern(null, "line"), 3448, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1260 = (clojure.lang.Var)RT.var("clojure.core", "subvec");
  const__1261 = (java.lang.Integer)3459;
  const__1262 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"), Symbol.intern(null, "start")), RT.vector(Symbol.intern(null, "v"), Symbol.intern(null, "start"), Symbol.intern(null, "end"))));
  const__1263 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"), Symbol.intern(null, "start")), RT.vector(Symbol.intern(null, "v"), Symbol.intern(null, "start"), Symbol.intern(null, "end")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", Keyword.intern(null, "line"), 3459, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1264 = (clojure.lang.Var)RT.var("clojure.core", "with-open");
  const__1265 = (java.lang.Integer)3472;
  const__1266 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1267 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.", Keyword.intern(null, "line"), 3472, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1268 = (clojure.lang.Var)RT.var("clojure.core", "doto");
  const__1269 = (java.lang.Integer)3493;
  const__1270 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__1271 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", Keyword.intern(null, "line"), 3493, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1272 = (clojure.lang.Var)RT.var("clojure.core", "memfn");
  const__1273 = (java.lang.Integer)3510;
  const__1274 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1275 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a Java method as\n  a first-class fn. name may be type-hinted with the method receiver's\n  type in order to avoid reflective calls.", Keyword.intern(null, "line"), 3510, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1276 = (clojure.lang.Var)RT.var("clojure.core", "time");
  const__1277 = (java.lang.Integer)3523;
  const__1278 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"))));
  const__1279 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates expr and prints the time it took.  Returns the value of\n expr.", Keyword.intern(null, "line"), 3523, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1280 = (clojure.lang.Var)RT.var("clojure.core", "alength");
  const__1281 = (java.lang.Integer)3537;
  const__1282 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"))));
  const__1283 = (clojure.lang.Var)RT.var("clojure.core", "aclone");
  const__1284 = (java.lang.Integer)3544;
  const__1285 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"))));
  const__1286 = (clojure.lang.Var)RT.var("clojure.core", "aget");
  const__1287 = (java.lang.Integer)3551;
  const__1288 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "&"), Symbol.intern(null, "idxs"))));
  const__1289 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(2L);
  const__1290 = (clojure.lang.Var)RT.var("clojure.core", "aset");
  const__1291 = (java.lang.Integer)3562;
  const__1292 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1293 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(3L);
  const__1294 = (clojure.lang.Var)RT.var("clojure.core", "def-aset");
  const__1295 = (java.lang.Integer)3574;
  const__1296 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "method"), Symbol.intern(null, "coerce"))));
  const__1297 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "method"), Symbol.intern(null, "coerce")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 3574, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1298 = (clojure.lang.Var)RT.var("clojure.core", "aset-int");
  const__1299 = (java.lang.Integer)3585;
 }
 static void __init13() {
  const__1300 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1301 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of int. Returns val.", Keyword.intern(null, "line"), 3585, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1302 = (clojure.lang.Var)RT.var("clojure.core", "aset-long");
  const__1303 = (java.lang.Integer)3590;
  const__1304 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1305 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of long. Returns val.", Keyword.intern(null, "line"), 3590, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1306 = (clojure.lang.Var)RT.var("clojure.core", "aset-boolean");
  const__1307 = (java.lang.Integer)3595;
  const__1308 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1309 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of boolean. Returns val.", Keyword.intern(null, "line"), 3595, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1310 = (clojure.lang.Var)RT.var("clojure.core", "aset-float");
  const__1311 = (java.lang.Integer)3600;
  const__1312 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1313 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of float. Returns val.", Keyword.intern(null, "line"), 3600, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1314 = (clojure.lang.Var)RT.var("clojure.core", "aset-double");
  const__1315 = (java.lang.Integer)3605;
  const__1316 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1317 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of double. Returns val.", Keyword.intern(null, "line"), 3605, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1318 = (clojure.lang.Var)RT.var("clojure.core", "aset-short");
  const__1319 = (java.lang.Integer)3610;
  const__1320 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1321 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of short. Returns val.", Keyword.intern(null, "line"), 3610, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1322 = (clojure.lang.Var)RT.var("clojure.core", "aset-byte");
  const__1323 = (java.lang.Integer)3615;
  const__1324 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1325 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of byte. Returns val.", Keyword.intern(null, "line"), 3615, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1326 = (clojure.lang.Var)RT.var("clojure.core", "aset-char");
  const__1327 = (java.lang.Integer)3620;
  const__1328 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv"))));
  const__1329 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "val")), RT.vector(Symbol.intern(null, "array"), Symbol.intern(null, "idx"), Symbol.intern(null, "idx2"), Symbol.intern(null, "&"), Symbol.intern(null, "idxv")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the value at the index/indices. Works on arrays of char. Returns val.", Keyword.intern(null, "line"), 3620, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1330 = (clojure.lang.Var)RT.var("clojure.core", "make-array");
  const__1331 = (java.lang.Integer)3625;
  const__1332 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "len")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "dim"), Symbol.intern(null, "&"), Symbol.intern(null, "more-dims"))));
  const__1333 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "len")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))), Symbol.intern(null, "dim"), Symbol.intern(null, "&"), Symbol.intern(null, "more-dims")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE.", Keyword.intern(null, "line"), 3625, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1334 = (clojure.lang.Var)RT.var("clojure.core", "to-array-2d");
  const__1335 = (java.lang.Integer)3642;
  const__1336 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Collection"))))));
  const__1337 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Collection")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a (potentially-ragged) 2-dimensional array of Objects\n  containing the contents of coll, which can be any Collection of any\n  Collection.", Keyword.intern(null, "line"), 3642, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), "[[Ljava.lang.Object;");
  const__1338 = (clojure.lang.Var)RT.var("clojure.core", "macroexpand-1");
  const__1339 = (java.lang.Integer)3657;
  const__1340 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form"))));
  const__1341 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "If form represents a macro form, returns its expansion,\n  else returns form.", Keyword.intern(null, "line"), 3657, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1342 = (clojure.lang.Var)RT.var("clojure.core", "macroexpand");
  const__1343 = (java.lang.Integer)3665;
  const__1344 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form"))));
  const__1345 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "form")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.", Keyword.intern(null, "line"), 3665, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1346 = (clojure.lang.Var)RT.var("clojure.core", "create-struct");
  const__1347 = (java.lang.Integer)3677;
  const__1348 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys"))));
  const__1349 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a structure basis object.", Keyword.intern(null, "line"), 3677, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1350 = (clojure.lang.Var)RT.var("clojure.core", "defstruct");
  const__1351 = (java.lang.Integer)3684;
  const__1352 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "keys"))));
  const__1353 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "keys")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Same as (def name (create-struct keys...))", Keyword.intern(null, "line"), 3684, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1354 = (clojure.lang.Var)RT.var("clojure.core", "struct-map");
  const__1355 = (java.lang.Integer)3691;
  const__1356 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "inits"))));
  const__1357 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "inits")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new structmap instance with the keys of the\n  structure-basis. keyvals may contain all, some or none of the basis\n  keys - where values are not supplied they will default to nil.\n  keyvals can also contain keys not in the basis.", Keyword.intern(null, "line"), 3691, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1358 = (clojure.lang.Var)RT.var("clojure.core", "struct");
  const__1359 = (java.lang.Integer)3701;
  const__1360 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "vals"))));
  const__1361 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "vals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new structmap instance with the keys of the\n  structure-basis. vals must be supplied for basis keys in order -\n  where values are not supplied they will default to nil.", Keyword.intern(null, "line"), 3701, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1362 = (clojure.lang.Var)RT.var("clojure.core", "accessor");
  const__1363 = (java.lang.Integer)3710;
  const__1364 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "key"))));
  const__1365 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a fn that, given an instance of a structmap with the basis,\n  returns the value at the key.  The key must be in the basis. The\n  returned function should be (slightly) more efficient than using\n  get, but such use of accessors should be limited to known\n  performance-critical areas.", Keyword.intern(null, "line"), 3710, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1366 = (clojure.lang.Var)RT.var("clojure.core", "load-reader");
  const__1367 = (java.lang.Integer)3721;
  const__1368 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "rdr"))));
  const__1369 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "rdr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sequentially read and evaluate the set of forms contained in the\n  stream/file", Keyword.intern(null, "line"), 3721, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1370 = (clojure.lang.Var)RT.var("clojure.core", "load-string");
  const__1371 = (java.lang.Integer)3728;
  const__1372 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__1373 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sequentially read and evaluate the set of forms contained in the\n  string", Keyword.intern(null, "line"), 3728, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1374 = (clojure.lang.Var)RT.var("clojure.core", "set");
  const__1375 = (java.lang.Integer)3738;
  const__1376 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1377 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a set of the distinct elements of coll.", Keyword.intern(null, "line"), 3738, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1378 = (clojure.lang.Var)RT.var("clojure.core", "filter-key");
  const__1379 = (java.lang.Integer)3744;
  const__1380 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keyfn"), Symbol.intern(null, "pred"), Symbol.intern(null, "amap"))));
  const__1381 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "keyfn"), Symbol.intern(null, "pred"), Symbol.intern(null, "amap")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "line"), 3744, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1382 = (clojure.lang.Var)RT.var("clojure.core", "find-ns");
  const__1383 = (java.lang.Integer)3754;
  const__1384 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"))));
  const__1385 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the namespace named by the symbol or nil if it doesn't exist.", Keyword.intern(null, "line"), 3754, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1386 = (clojure.lang.Var)RT.var("clojure.core", "create-ns");
  const__1387 = (java.lang.Integer)3760;
  const__1388 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"))));
  const__1389 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Create a new namespace named by the symbol if one doesn't already\n  exist, returns it or the already-existing namespace of the same\n  name.", Keyword.intern(null, "line"), 3760, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1390 = (clojure.lang.Var)RT.var("clojure.core", "remove-ns");
  const__1391 = (java.lang.Integer)3768;
  const__1392 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"))));
  const__1393 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Removes the namespace named by the symbol. Use with caution.\n  Cannot be used to remove the clojure namespace.", Keyword.intern(null, "line"), 3768, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1394 = (clojure.lang.Var)RT.var("clojure.core", "all-ns");
  const__1395 = (java.lang.Integer)3775;
  const__1396 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1397 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a sequence of all namespaces.", Keyword.intern(null, "line"), 3775, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1398 = (clojure.lang.Var)RT.var("clojure.core", "the-ns");
  const__1399 = (java.lang.Integer)3781;
 }
 static void __init14() {
  const__1400 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "x"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Namespace")))));
  const__1401 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "x"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Namespace"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "If passed a namespace, returns it. Else, when passed a symbol,\n  returns the namespace named by it, throwing an exception if not\n  found.", Keyword.intern(null, "line"), 3781, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1402 = (clojure.lang.Var)RT.var("clojure.core", "ns-name");
  const__1403 = (java.lang.Integer)3792;
  const__1404 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1405 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the name of the namespace, a symbol.", Keyword.intern(null, "line"), 3792, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1406 = (clojure.lang.Var)RT.var("clojure.core", "ns-map");
  const__1407 = (java.lang.Integer)3799;
  const__1408 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1409 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of all the mappings for the namespace.", Keyword.intern(null, "line"), 3799, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1410 = (clojure.lang.Var)RT.var("clojure.core", "ns-unmap");
  const__1411 = (java.lang.Integer)3806;
  const__1412 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym"))));
  const__1413 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Removes the mappings for the symbol from the namespace.", Keyword.intern(null, "line"), 3806, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1414 = (clojure.lang.Var)RT.var("clojure.core", "ns-publics");
  const__1415 = (java.lang.Integer)3817;
  const__1416 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1417 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the public intern mappings for the namespace.", Keyword.intern(null, "line"), 3817, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1418 = (clojure.lang.Var)RT.var("clojure.core", "ns-imports");
  const__1419 = (java.lang.Integer)3828;
  const__1420 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1421 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the import mappings for the namespace.", Keyword.intern(null, "line"), 3828, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1422 = (clojure.lang.Var)RT.var("clojure.core", "ns-interns");
  const__1423 = (java.lang.Integer)3835;
  const__1424 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1425 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the intern mappings for the namespace.", Keyword.intern(null, "line"), 3835, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1426 = (clojure.lang.Var)RT.var("clojure.core", "refer");
  const__1427 = (java.lang.Integer)3845;
  const__1428 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns-sym"), Symbol.intern(null, "&"), Symbol.intern(null, "filters"))));
  const__1429 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns-sym"), Symbol.intern(null, "&"), Symbol.intern(null, "filters")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.", Keyword.intern(null, "line"), 3845, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1430 = (clojure.lang.Var)RT.var("clojure.core", "ns-refers");
  const__1431 = (java.lang.Integer)3883;
  const__1432 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1433 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the refer mappings for the namespace.", Keyword.intern(null, "line"), 3883, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1434 = (clojure.lang.Var)RT.var("clojure.core", "alias");
  const__1435 = (java.lang.Integer)3893;
  const__1436 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "alias"), Symbol.intern(null, "namespace-sym"))));
  const__1437 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "alias"), Symbol.intern(null, "namespace-sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Add an alias in the current namespace to another\n  namespace. Arguments are two symbols: the alias to be used, and\n  the symbolic name of the target namespace. Use :as in the ns macro in preference\n  to calling this directly.", Keyword.intern(null, "line"), 3893, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1438 = (clojure.lang.Var)RT.var("clojure.core", "ns-aliases");
  const__1439 = (java.lang.Integer)3903;
  const__1440 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"))));
  const__1441 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the aliases for the namespace.", Keyword.intern(null, "line"), 3903, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1442 = (clojure.lang.Var)RT.var("clojure.core", "ns-unalias");
  const__1443 = (java.lang.Integer)3910;
  const__1444 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym"))));
  const__1445 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Removes the alias for the symbol from the namespace.", Keyword.intern(null, "line"), 3910, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1446 = (clojure.lang.Var)RT.var("clojure.core", "take-nth");
  const__1447 = (java.lang.Integer)3917;
  const__1448 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll"))));
  const__1449 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy seq of every nth item in coll.", Keyword.intern(null, "line"), 3917, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1450 = (clojure.lang.Var)RT.var("clojure.core", "interleave");
  const__1451 = (java.lang.Integer)3926;
  const__1452 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "c1")), RT.vector(Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__1453 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "c1")), RT.vector(Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy seq of the first item in each coll, then the second etc.", Keyword.intern(null, "line"), 3926, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1454 = (clojure.lang.Var)RT.var("clojure.core", "var-get");
  const__1455 = (java.lang.Integer)3944;
  const__1456 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var"))))));
  const__1457 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Gets the value in the var object", Keyword.intern(null, "line"), 3944, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1458 = (clojure.lang.Var)RT.var("clojure.core", "var-set");
  const__1459 = (java.lang.Integer)3950;
  const__1460 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var"))), Symbol.intern(null, "val"))));
  const__1461 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var"))), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Sets the value in the var object to val. The var must be\n thread-locally bound.", Keyword.intern(null, "line"), 3950, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1462 = (clojure.lang.Var)RT.var("clojure.core", "with-local-vars");
  const__1463 = (java.lang.Integer)3957;
  const__1464 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name-vals-vec"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1465 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name-vals-vec"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set", Keyword.intern(null, "line"), 3957, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1466 = (clojure.lang.Var)RT.var("clojure.core", "ns-resolve");
  const__1467 = (java.lang.Integer)3976;
  const__1468 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "env"), Symbol.intern(null, "sym"))));
  const__1469 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "sym")), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "env"), Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the var or Class to which a symbol will be resolved in the\n  namespace (unless found in the environment), else nil.  Note that\n  if the symbol is fully qualified, the var/Class to which it resolves\n  need not be present in the namespace.", Keyword.intern(null, "line"), 3976, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1470 = (clojure.lang.Var)RT.var("clojure.core", "resolve");
  const__1471 = (java.lang.Integer)3989;
  const__1472 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")), RT.vector(Symbol.intern(null, "env"), Symbol.intern(null, "sym"))));
  const__1473 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")), RT.vector(Symbol.intern(null, "env"), Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)", Keyword.intern(null, "line"), 3989, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1474 = (clojure.lang.Var)RT.var("clojure.core", "array-map");
  const__1475 = (java.lang.Integer)3996;
  const__1476 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals"))));
  const__1477 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "keyvals")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Constructs an array-map. If any keys are equal, they are handled as\n  if by repeated uses of assoc.", Keyword.intern(null, "line"), 3996, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1478 = (clojure.lang.Var)RT.var("clojure.core", "destructure");
  const__1479 = (java.lang.Integer)4006;
  const__1480 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"))));
  const__1481 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 4006, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1482 = (java.lang.Integer)4068;
  const__1483 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1484 = (clojure.lang.Keyword)Keyword.intern(null, "forms");
  const__1485 = (clojure.lang.PersistentVector)RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "let"), RT.vector(Symbol.intern(null, "bindings*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4074, Keyword.intern(null, "column"), 47)));
  const__1486 = (clojure.lang.Keyword)Keyword.intern(null, "special-form");
  const__1487 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "forms"), RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "let"), RT.vector(Symbol.intern(null, "bindings*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4074, Keyword.intern(null, "column"), 47))), Keyword.intern(null, "special-form"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", Keyword.intern(null, "line"), 4068, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1488 = (clojure.lang.Var)RT.var("clojure.core", "maybe-destructured");
  const__1489 = (java.lang.Integer)4081;
  const__1490 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "body"))));
  const__1491 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4081, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1492 = (java.lang.Integer)4100;
  const__1493 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "sigs"))));
  const__1494 = (clojure.lang.PersistentVector)RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "fn"), Symbol.intern(null, "name?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 13)), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "fn"), Symbol.intern(null, "name?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 52)), Symbol.intern(null, "+")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 42)));
  const__1495 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "sigs")))), Keyword.intern(null, "forms"), RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "fn"), Symbol.intern(null, "name?"), RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 13)), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "fn"), Symbol.intern(null, "name?"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 52)), Symbol.intern(null, "+")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4108, Keyword.intern(null, "column"), 42))), Keyword.intern(null, "special-form"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function", Keyword.intern(null, "line"), 4100, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1496 = (java.lang.Integer)4164;
  const__1497 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1498 = (clojure.lang.PersistentVector)RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "loop"), RT.vector(Symbol.intern(null, "bindings*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4168, Keyword.intern(null, "column"), 47)));
  const__1499 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "forms"), RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "loop"), RT.vector(Symbol.intern(null, "bindings*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 4168, Keyword.intern(null, "column"), 47))), Keyword.intern(null, "special-form"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", Keyword.intern(null, "line"), 4164, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static void __init15() {
  const__1500 = (clojure.lang.Var)RT.var("clojure.core", "when-first");
  const__1501 = (java.lang.Integer)4189;
  const__1502 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1503 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", Keyword.intern(null, "line"), 4189, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1504 = (clojure.lang.Var)RT.var("clojure.core", "lazy-cat");
  const__1505 = (java.lang.Integer)4203;
  const__1506 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__1507 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", Keyword.intern(null, "line"), 4203, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1508 = (clojure.lang.Var)RT.var("clojure.core", "for");
  const__1509 = (java.lang.Integer)4213;
  const__1510 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "seq-exprs"), Symbol.intern(null, "body-expr"))));
  const__1511 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "seq-exprs"), Symbol.intern(null, "body-expr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))", Keyword.intern(null, "line"), 4213, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1512 = (clojure.lang.Var)RT.var("clojure.core", "comment");
  const__1513 = (java.lang.Integer)4300;
  const__1514 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1515 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Ignores body, yields nil", Keyword.intern(null, "line"), 4300, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1516 = (clojure.lang.Var)RT.var("clojure.core", "with-out-str");
  const__1517 = (java.lang.Integer)4305;
  const__1518 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1519 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates exprs in a context in which *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.", Keyword.intern(null, "line"), 4305, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1520 = (clojure.lang.Var)RT.var("clojure.core", "with-in-str");
  const__1521 = (java.lang.Integer)4316;
  const__1522 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1523 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates body in a context in which *in* is bound to a fresh\n  StringReader initialized with the string s.", Keyword.intern(null, "line"), 4316, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1524 = (clojure.lang.Var)RT.var("clojure.core", "pr-str");
  const__1525 = (java.lang.Integer)4325;
  const__1526 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs"))));
  const__1527 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "pr to a string, returning it", Keyword.intern(null, "line"), 4325, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1528 = (clojure.lang.Var)RT.var("clojure.core", "prn-str");
  const__1529 = (java.lang.Integer)4334;
  const__1530 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs"))));
  const__1531 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "prn to a string, returning it", Keyword.intern(null, "line"), 4334, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1532 = (clojure.lang.Var)RT.var("clojure.core", "print-str");
  const__1533 = (java.lang.Integer)4343;
  const__1534 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs"))));
  const__1535 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "print to a string, returning it", Keyword.intern(null, "line"), 4343, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1536 = (clojure.lang.Var)RT.var("clojure.core", "println-str");
  const__1537 = (java.lang.Integer)4352;
  const__1538 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs"))));
  const__1539 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "println to a string, returning it", Keyword.intern(null, "line"), 4352, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1540 = (clojure.lang.Var)RT.var("clojure.core", "ex-info");
  const__1541 = (java.lang.Integer)4362;
  const__1542 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "msg"), Symbol.intern(null, "map")), RT.vector(Symbol.intern(null, "msg"), Symbol.intern(null, "map"), Symbol.intern(null, "cause"))));
  const__1543 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "msg"), Symbol.intern(null, "map")), RT.vector(Symbol.intern(null, "msg"), Symbol.intern(null, "map"), Symbol.intern(null, "cause")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "doc"), "Alpha - subject to change.\n   Create an instance of ExceptionInfo, a RuntimeException subclass\n   that carries a map of additional data.", Keyword.intern(null, "line"), 4362, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1544 = (clojure.lang.Var)RT.var("clojure.core", "ex-data");
  const__1545 = (java.lang.Integer)4372;
  const__1546 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ex"))));
  const__1547 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ex")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "doc"), "Alpha - subject to change.\n   Returns exception data (a map) if ex is an IExceptionInfo.\n   Otherwise returns nil.", Keyword.intern(null, "line"), 4372, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1548 = (clojure.lang.Var)RT.var("clojure.core", "assert");
  const__1549 = (java.lang.Integer)4381;
  const__1550 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "message"))));
  const__1551 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "message")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", Keyword.intern(null, "line"), 4381, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1552 = (clojure.lang.Var)RT.var("clojure.core", "test");
  const__1553 = (java.lang.Integer)4394;
  const__1554 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"))));
  const__1555 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception", Keyword.intern(null, "line"), 4394, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1556 = (clojure.lang.Var)RT.var("clojure.core", "re-pattern");
  const__1557 = (java.lang.Integer)4404;
  const__1558 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__1559 = (java.lang.Class)java.util.regex.Pattern.class;
  const__1560 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an instance of java.util.regex.Pattern, for use, e.g. in\n  re-matcher.", Keyword.intern(null, "line"), 4404, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.util.regex.Pattern.class);
  const__1561 = (clojure.lang.Var)RT.var("clojure.core", "re-matcher");
  const__1562 = (java.lang.Integer)4414;
  const__1563 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s"))));
  const__1564 = (java.lang.Class)java.util.regex.Matcher.class;
  const__1565 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an instance of java.util.regex.Matcher, for use, e.g. in\n  re-find.", Keyword.intern(null, "line"), 4414, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.util.regex.Matcher.class);
  const__1566 = (clojure.lang.Var)RT.var("clojure.core", "re-groups");
  const__1567 = (java.lang.Integer)4423;
  const__1568 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Matcher"))))));
  const__1569 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Matcher")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.", Keyword.intern(null, "line"), 4423, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1570 = (clojure.lang.Var)RT.var("clojure.core", "re-seq");
  const__1571 = (java.lang.Integer)4439;
  const__1572 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s"))));
  const__1573 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of successive matches of pattern in string,\n  using java.util.regex.Matcher.find(), each such match processed with\n  re-groups.", Keyword.intern(null, "line"), 4439, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1574 = (clojure.lang.Var)RT.var("clojure.core", "re-matches");
  const__1575 = (java.lang.Integer)4451;
  const__1576 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s"))));
  const__1577 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the match, if any, of string to pattern, using\n  java.util.regex.Matcher.matches().  Uses re-groups to return the\n  groups.", Keyword.intern(null, "line"), 4451, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1578 = (clojure.lang.Var)RT.var("clojure.core", "re-find");
  const__1579 = (java.lang.Integer)4463;
  const__1580 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Matcher")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s"))));
  const__1581 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Matcher")))), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "re")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.regex.Pattern"))), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the next regex match, if any, of string to pattern, using\n  java.util.regex.Matcher.find().  Uses re-groups to return the\n  groups.", Keyword.intern(null, "line"), 4463, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1582 = (clojure.lang.Var)RT.var("clojure.core", "rand");
  const__1583 = (java.lang.Integer)4476;
  const__1584 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "n"))));
  const__1585 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(), RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", Keyword.intern(null, "line"), 4476, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1586 = (clojure.lang.Var)RT.var("clojure.core", "rand-int");
  const__1587 = (java.lang.Integer)4484;
  const__1588 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__1589 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a random integer between 0 (inclusive) and n (exclusive).", Keyword.intern(null, "line"), 4484, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1590 = (clojure.lang.Var)RT.var("clojure.core", "defn-");
  const__1591 = (java.lang.Integer)4490;
  const__1592 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "decls"))));
  const__1593 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "decls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "same as defn, yielding non-public def", Keyword.intern(null, "line"), 4490, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1594 = (clojure.lang.Var)RT.var("clojure.core", "tree-seq");
  const__1595 = (java.lang.Integer)4496;
  const__1596 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "branch?"), Symbol.intern(null, "children"), Symbol.intern(null, "root"))));
  const__1597 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "branch?"), Symbol.intern(null, "children"), Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", Keyword.intern(null, "line"), 4496, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1598 = (clojure.lang.Var)RT.var("clojure.core", "file-seq");
  const__1599 = (java.lang.Integer)4513;
 }
 static void __init16() {
  const__1600 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "dir"))));
  const__1601 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "dir")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "A tree seq on java.io.Files", Keyword.intern(null, "line"), 4513, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1602 = (clojure.lang.Var)RT.var("clojure.core", "xml-seq");
  const__1603 = (java.lang.Integer)4523;
  const__1604 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root"))));
  const__1605 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "A tree seq on the xml elements as per xml/parse", Keyword.intern(null, "line"), 4523, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1606 = (clojure.lang.Var)RT.var("clojure.core", "special-symbol?");
  const__1607 = (java.lang.Integer)4533;
  const__1608 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__1609 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if s names a special form", Keyword.intern(null, "line"), 4533, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1610 = (clojure.lang.Var)RT.var("clojure.core", "var?");
  const__1611 = (java.lang.Integer)4540;
  const__1612 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"))));
  const__1613 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if v is of type clojure.lang.Var", Keyword.intern(null, "line"), 4540, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1614 = (clojure.lang.Var)RT.var("clojure.core", "subs");
  const__1615 = (java.lang.Integer)4546;
  const__1616 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "start"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "start"), Symbol.intern(null, "end"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))));
  const__1617 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "start"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "start"), Symbol.intern(null, "end"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", Keyword.intern(null, "line"), 4546, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1618 = (clojure.lang.Var)RT.var("clojure.core", "max-key");
  const__1619 = (java.lang.Integer)4554;
  const__1620 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1621 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the x for which (k x), a number, is greatest.", Keyword.intern(null, "line"), 4554, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1622 = (clojure.lang.Var)RT.var("clojure.core", "min-key");
  const__1623 = (java.lang.Integer)4563;
  const__1624 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1625 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the x for which (k x), a number, is least.", Keyword.intern(null, "line"), 4563, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1626 = (clojure.lang.Var)RT.var("clojure.core", "distinct");
  const__1627 = (java.lang.Integer)4572;
  const__1628 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1629 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the elements of coll with duplicates removed", Keyword.intern(null, "line"), 4572, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1630 = (clojure.lang.Var)RT.var("clojure.core", "replace");
  const__1631 = (java.lang.Integer)4589;
  const__1632 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "smap"), Symbol.intern(null, "coll"))));
  const__1633 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "smap"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", Keyword.intern(null, "line"), 4589, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1634 = (clojure.lang.Var)RT.var("clojure.core", "dosync");
  const__1635 = (java.lang.Integer)4604;
  const__1636 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "exprs"))));
  const__1637 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "exprs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of dosync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.", Keyword.intern(null, "line"), 4604, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1638 = (clojure.lang.Var)RT.var("clojure.core", "with-precision");
  const__1639 = (java.lang.Integer)4614;
  const__1640 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "precision"), Symbol.intern(null, "&"), Symbol.intern(null, "exprs"))));
  const__1641 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "precision"), Symbol.intern(null, "&"), Symbol.intern(null, "exprs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets the precision and rounding mode to be used for BigDecimal operations.\n\n  Usage: (with-precision 10 (/ 1M 3))\n  or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\n  The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\n  HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.", Keyword.intern(null, "line"), 4614, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1642 = (clojure.lang.Var)RT.var("clojure.core", "mk-bound-fn");
  const__1643 = (java.lang.Integer)4631;
  const__1644 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key"))));
  const__1645 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4631, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1646 = (clojure.lang.Var)RT.var("clojure.core", "subseq");
  const__1647 = (java.lang.Integer)4637;
  const__1648 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "start-test"), Symbol.intern(null, "start-key"), Symbol.intern(null, "end-test"), Symbol.intern(null, "end-key"))));
  const__1649 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "start-test"), Symbol.intern(null, "start-key"), Symbol.intern(null, "end-test"), Symbol.intern(null, "end-key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", Keyword.intern(null, "line"), 4637, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1650 = (clojure.lang.Var)RT.var("clojure.core", "rsubseq");
  const__1651 = (java.lang.Integer)4654;
  const__1652 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "start-test"), Symbol.intern(null, "start-key"), Symbol.intern(null, "end-test"), Symbol.intern(null, "end-key"))));
  const__1653 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "test"), Symbol.intern(null, "key")), RT.vector(((clojure.lang.IObj)Symbol.intern(null, "sc")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Sorted"))), Symbol.intern(null, "start-test"), Symbol.intern(null, "start-key"), Symbol.intern(null, "end-test"), Symbol.intern(null, "end-key")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", Keyword.intern(null, "line"), 4654, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1654 = (clojure.lang.Var)RT.var("clojure.core", "repeatedly");
  const__1655 = (java.lang.Integer)4671;
  const__1656 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "f"))));
  const__1657 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", Keyword.intern(null, "line"), 4671, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1658 = (clojure.lang.Var)RT.var("clojure.core", "add-classpath");
  const__1659 = (java.lang.Integer)4680;
  const__1660 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "url"))));
  const__1661 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "url")))), Keyword.intern(null, "deprecated"), "1.1", Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "DEPRECATED\n\n  Adds the url (String or URL object) to the classpath per\n  URLClassLoader.addURL", Keyword.intern(null, "line"), 4680, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1662 = (clojure.lang.Var)RT.var("clojure.core", "hash");
  const__1663 = (java.lang.Integer)4693;
  const__1664 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1665 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the hash code of its argument. Note this is the hash code\n  consistent with =, and thus is different than .hashCode for Integer,\n  Short, Byte and Clojure collections.", Keyword.intern(null, "line"), 4693, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1666 = (clojure.lang.Var)RT.var("clojure.core", "interpose");
  const__1667 = (java.lang.Integer)4702;
  const__1668 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sep"), Symbol.intern(null, "coll"))));
  const__1669 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sep"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy seq of the elements of coll separated by sep", Keyword.intern(null, "line"), 4702, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1670 = (clojure.lang.Var)RT.var("clojure.core", "definline");
  const__1671 = (java.lang.Integer)4708;
  const__1672 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "decl"))));
  const__1673 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "decl")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Experimental - like defmacro, except defines a named function whose\n  body is the expansion, calls to which may be expanded inline as if\n  it were a macro. Cannot be used with variadic (&) args.", Keyword.intern(null, "line"), 4708, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1674 = (clojure.lang.Var)RT.var("clojure.core", "empty");
  const__1675 = (java.lang.Integer)4720;
  const__1676 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1677 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns an empty collection of the same category as coll, or nil", Keyword.intern(null, "line"), 4720, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1678 = (clojure.lang.Var)RT.var("clojure.core", "amap");
  const__1679 = (java.lang.Integer)4728;
  const__1680 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "idx"), Symbol.intern(null, "ret"), Symbol.intern(null, "expr"))));
  const__1681 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "idx"), Symbol.intern(null, "ret"), Symbol.intern(null, "expr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.", Keyword.intern(null, "line"), 4728, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1682 = (clojure.lang.Var)RT.var("clojure.core", "areduce");
  const__1683 = (java.lang.Integer)4744;
  const__1684 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "idx"), Symbol.intern(null, "ret"), Symbol.intern(null, "init"), Symbol.intern(null, "expr"))));
  const__1685 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "a"), Symbol.intern(null, "idx"), Symbol.intern(null, "ret"), Symbol.intern(null, "init"), Symbol.intern(null, "expr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.", Keyword.intern(null, "line"), 4744, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1686 = (clojure.lang.Var)RT.var("clojure.core", "float-array");
  const__1687 = (java.lang.Integer)4756;
  const__1688 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1689 = (java.lang.Long)1L;
  const__1690 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1691 = (clojure.lang.Var)RT.var("clojure.core", "boolean-array");
  const__1692 = (java.lang.Integer)4764;
  const__1693 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1694 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1695 = (clojure.lang.Var)RT.var("clojure.core", "byte-array");
  const__1696 = (java.lang.Integer)4772;
  const__1697 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1698 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1699 = (clojure.lang.Var)RT.var("clojure.core", "char-array");
 }
 static void __init17() {
  const__1700 = (java.lang.Integer)4780;
  const__1701 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1702 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1703 = (clojure.lang.Var)RT.var("clojure.core", "short-array");
  const__1704 = (java.lang.Integer)4788;
  const__1705 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1706 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1707 = (clojure.lang.Var)RT.var("clojure.core", "double-array");
  const__1708 = (java.lang.Integer)4796;
  const__1709 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1710 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1711 = (clojure.lang.Var)RT.var("clojure.core", "object-array");
  const__1712 = (java.lang.Integer)4804;
  const__1713 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq"))));
  const__1714 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L);
  const__1715 = (clojure.lang.Var)RT.var("clojure.core", "int-array");
  const__1716 = (java.lang.Integer)4811;
  const__1717 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1718 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1719 = (clojure.lang.Var)RT.var("clojure.core", "long-array");
  const__1720 = (java.lang.Integer)4819;
  const__1721 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "size-or-seq")), RT.vector(Symbol.intern(null, "size"), Symbol.intern(null, "init-val-or-seq"))));
  const__1722 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L, 2L);
  const__1723 = (clojure.lang.Var)RT.var("clojure.core", "booleans");
  const__1724 = (java.lang.Integer)4827;
  const__1725 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1726 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Casts to boolean[]", Keyword.intern(null, "line"), 4827, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1727 = (clojure.lang.Var)RT.var("clojure.core", "bytes");
  const__1728 = (java.lang.Integer)4832;
  const__1729 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1730 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Casts to bytes[]", Keyword.intern(null, "line"), 4832, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1731 = (clojure.lang.Var)RT.var("clojure.core", "chars");
  const__1732 = (java.lang.Integer)4837;
  const__1733 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1734 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Casts to chars[]", Keyword.intern(null, "line"), 4837, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1735 = (clojure.lang.Var)RT.var("clojure.core", "shorts");
  const__1736 = (java.lang.Integer)4842;
  const__1737 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1738 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Casts to shorts[]", Keyword.intern(null, "line"), 4842, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1739 = (clojure.lang.Var)RT.var("clojure.core", "floats");
  const__1740 = (java.lang.Integer)4847;
  const__1741 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1742 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Casts to float[]", Keyword.intern(null, "line"), 4847, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1743 = (clojure.lang.Var)RT.var("clojure.core", "ints");
  const__1744 = (java.lang.Integer)4852;
  const__1745 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1746 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Casts to int[]", Keyword.intern(null, "line"), 4852, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1747 = (clojure.lang.Var)RT.var("clojure.core", "doubles");
  const__1748 = (java.lang.Integer)4857;
  const__1749 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1750 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Casts to double[]", Keyword.intern(null, "line"), 4857, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1751 = (clojure.lang.Var)RT.var("clojure.core", "longs");
  const__1752 = (java.lang.Integer)4862;
  const__1753 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs"))));
  const__1754 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "xs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Casts to long[]", Keyword.intern(null, "line"), 4862, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1755 = (clojure.lang.Var)RT.var("clojure.core", "seque");
  const__1756 = (java.lang.Integer)4869;
  const__1757 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")), RT.vector(Symbol.intern(null, "n-or-q"), Symbol.intern(null, "s"))));
  const__1758 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")), RT.vector(Symbol.intern(null, "n-or-q"), Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.", Keyword.intern(null, "line"), 4869, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1759 = (clojure.lang.Var)RT.var("clojure.core", "class?");
  const__1760 = (java.lang.Integer)4914;
  const__1761 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1762 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is an instance of Class", Keyword.intern(null, "line"), 4914, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1763 = (clojure.lang.Var)RT.var("clojure.core", "is-annotation?");
  const__1764 = (java.lang.Integer)4920;
  const__1765 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "c"))));
  const__1766 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "c")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4920, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1767 = (clojure.lang.Var)RT.var("clojure.core", "is-runtime-annotation?");
  const__1768 = (java.lang.Integer)4924;
  const__1769 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))))));
  const__1770 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4924, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1771 = (clojure.lang.Var)RT.var("clojure.core", "descriptor");
  const__1772 = (java.lang.Integer)4931;
  const__1773 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))))));
  const__1774 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4931, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1775 = (clojure.lang.Var)RT.var("clojure.core", "process-annotation");
  const__1776 = (java.lang.Integer)4933;
  const__1777 = (clojure.lang.Keyword)Keyword.intern(null, "declared");
  const__1778 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 4933, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1779 = (clojure.lang.Var)RT.var("clojure.core", "process-print-annotation");
  const__1780 = (java.lang.Integer)4934;
  const__1781 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 4934, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1782 = (clojure.lang.Var)RT.var("clojure.core", "print-annotation-value");
  const__1783 = (java.lang.Integer)4936;
  const__1784 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"))));
  const__1785 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4936, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1786 = (clojure.lang.Var)RT.var("clojure.core", "add-annotation");
  const__1787 = (java.lang.Integer)4953;
  const__1788 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "av")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.asm.AnnotationVisitor"))), Symbol.intern(null, "name"), Symbol.intern(null, "v"))));
  const__1789 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "av")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.asm.AnnotationVisitor"))), Symbol.intern(null, "name"), Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4953, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1790 = (java.lang.Integer)4974;
  const__1791 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "av"), Symbol.intern(null, "v"))));
  const__1792 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "av"), Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4974, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1793 = (java.lang.Integer)4980;
  const__1794 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v"))));
  const__1795 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4980, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1796 = (clojure.lang.Var)RT.var("clojure.core", "add-annotations");
  const__1797 = (java.lang.Integer)4985;
  const__1798 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "visitor"), Symbol.intern(null, "m")), RT.vector(Symbol.intern(null, "visitor"), Symbol.intern(null, "m"), Symbol.intern(null, "i"))));
  const__1799 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "visitor"), Symbol.intern(null, "m")), RT.vector(Symbol.intern(null, "visitor"), Symbol.intern(null, "m"), Symbol.intern(null, "i")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 4985, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static void __init18() {
  const__1800 = (clojure.lang.Var)RT.var("clojure.core", "alter-var-root");
  const__1801 = (java.lang.Integer)5005;
  const__1802 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "v")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1803 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "v")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Var"))), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Atomically alters the root binding of var v by applying f to its\n  current value plus any args", Keyword.intern(null, "line"), 5005, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1804 = (clojure.lang.Var)RT.var("clojure.core", "bound?");
  const__1805 = (java.lang.Integer)5012;
  const__1806 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vars"))));
  const__1807 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vars")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\n   Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.", Keyword.intern(null, "line"), 5012, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1808 = (clojure.lang.Var)RT.var("clojure.core", "thread-bound?");
  const__1809 = (java.lang.Integer)5020;
  const__1810 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vars"))));
  const__1811 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vars")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if all of the vars provided as arguments have thread-local bindings.\n   Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.", Keyword.intern(null, "line"), 5020, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1812 = (clojure.lang.Var)RT.var("clojure.core", "make-hierarchy");
  const__1813 = (java.lang.Integer)5028;
  const__1814 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1815 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Creates a hierarchy object for use with derive, isa? etc.", Keyword.intern(null, "line"), 5028, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1816 = (java.lang.Integer)5034;
  const__1817 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 5034, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1818 = (clojure.lang.Var)RT.var("clojure.core", "not-empty");
  const__1819 = (java.lang.Integer)5037;
  const__1820 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1821 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "If coll is empty, returns nil, else coll", Keyword.intern(null, "line"), 5037, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1822 = (clojure.lang.Var)RT.var("clojure.core", "bases");
  const__1823 = (java.lang.Integer)5043;
  const__1824 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))))));
  const__1825 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the immediate superclass and direct interfaces of c, if any", Keyword.intern(null, "line"), 5043, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1826 = (clojure.lang.Var)RT.var("clojure.core", "supers");
  const__1827 = (java.lang.Integer)5053;
  const__1828 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "class")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class"))))));
  const__1829 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "class")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Class")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the immediate and indirect superclasses and interfaces of c, if any", Keyword.intern(null, "line"), 5053, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1830 = (clojure.lang.Var)RT.var("clojure.core", "isa?");
  const__1831 = (java.lang.Integer)5064;
  const__1832 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "child"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "child"), Symbol.intern(null, "parent"))));
  const__1833 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "child"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "child"), Symbol.intern(null, "parent")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", Keyword.intern(null, "line"), 5064, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1834 = (clojure.lang.Var)RT.var("clojure.core", "parents");
  const__1835 = (java.lang.Integer)5085;
  const__1836 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"))));
  const__1837 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the immediate parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", Keyword.intern(null, "line"), 5085, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1838 = (clojure.lang.Var)RT.var("clojure.core", "ancestors");
  const__1839 = (java.lang.Integer)5098;
  const__1840 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"))));
  const__1841 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", Keyword.intern(null, "line"), 5098, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1842 = (clojure.lang.Var)RT.var("clojure.core", "descendants");
  const__1843 = (java.lang.Integer)5114;
  const__1844 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"))));
  const__1845 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on Java type inheritance\n  relationships.", Keyword.intern(null, "line"), 5114, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1846 = (clojure.lang.Var)RT.var("clojure.core", "derive");
  const__1847 = (java.lang.Integer)5126;
  const__1848 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"), Symbol.intern(null, "parent"))));
  const__1849 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"), Symbol.intern(null, "parent")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", Keyword.intern(null, "line"), 5126, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1850 = (clojure.lang.Var)RT.var("clojure.core", "flatten");
  const__1851 = (java.lang.Integer)5162;
  const__1852 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 5162, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1853 = (clojure.lang.Var)RT.var("clojure.core", "underive");
  const__1854 = (java.lang.Integer)5164;
  const__1855 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"), Symbol.intern(null, "parent"))));
  const__1856 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "parent")), RT.vector(Symbol.intern(null, "h"), Symbol.intern(null, "tag"), Symbol.intern(null, "parent")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", Keyword.intern(null, "line"), 5164, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1857 = (clojure.lang.Var)RT.var("clojure.core", "distinct?");
  const__1858 = (java.lang.Integer)5185;
  const__1859 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__1860 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if no two of the arguments are =", Keyword.intern(null, "line"), 5185, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__1861 = (clojure.lang.Var)RT.var("clojure.core", "iterator-seq");
  const__1862 = (java.lang.Integer)5222;
  const__1863 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "iter"))));
  const__1864 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "iter")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq on a java.util.Iterator. Note that most collections\n  providing iterators implement Iterable and thus support seq directly.", Keyword.intern(null, "line"), 5222, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1865 = (clojure.lang.Var)RT.var("clojure.core", "enumeration-seq");
  const__1866 = (java.lang.Integer)5230;
  const__1867 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "e"))));
  const__1868 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "e")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a seq on a java.util.Enumeration", Keyword.intern(null, "line"), 5230, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1869 = (clojure.lang.Var)RT.var("clojure.core", "format");
  const__1870 = (java.lang.Integer)5237;
  const__1871 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))));
  const__1872 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Formats a string using java.lang.String.format, see java.util.Formatter for format\n  string syntax", Keyword.intern(null, "line"), 5237, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1873 = (clojure.lang.Var)RT.var("clojure.core", "printf");
  const__1874 = (java.lang.Integer)5245;
  const__1875 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1876 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Prints formatted output, as per format", Keyword.intern(null, "line"), 5245, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1877 = (clojure.lang.Var)RT.var("clojure.core", "gen-class");
  const__1878 = (java.lang.Integer)5252;
  const__1879 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 5252, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1880 = (clojure.lang.Var)RT.var("clojure.core", "with-loading-context");
  const__1881 = (java.lang.Integer)5254;
  const__1882 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__1883 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 5254, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1884 = (clojure.lang.Var)RT.var("clojure.core", "ns");
  const__1885 = (java.lang.Integer)5263;
  const__1886 = (clojure.lang.IPersistentList)((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring?"), Symbol.intern(null, "attr-map?"), Symbol.intern(null, "references*"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 5284, Keyword.intern(null, "column"), 15));
  const__1887 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), ((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring?"), Symbol.intern(null, "attr-map?"), Symbol.intern(null, "references*"))))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 5284, Keyword.intern(null, "column"), 15)), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Sets *ns* to the namespace named by name (unevaluated), creating it\n  if needed.  references can be zero or more of: (:refer-clojure ...)\n  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\n  with the syntax of refer-clojure/require/use/import/load/gen-class\n  respectively, except the arguments are unevaluated and need not be\n  quoted. (:gen-class ...), when supplied, defaults to :name\n  corresponding to the ns name, :main true, :impl-ns same as ns, and\n  :init-impl-ns true. All options of gen-class are\n  supported. The :gen-class directive is ignored when not\n  compiling. If :gen-class is not supplied, when compiled only an\n  nsname__init.class will be generated. If :refer-clojure is not used, a\n  default (refer 'clojure.core) is used.  Use of ns is preferred to\n  individual calls to in-ns/require/use/import:\n\n  (ns foo.bar\n    (:refer-clojure :exclude [ancestors printf])\n    (:require (clojure.contrib sql combinatorics))\n    (:use (my.lib this that))\n    (:import (java.util Date Timer Random)\n             (java.sql Connection Statement)))", Keyword.intern(null, "line"), 5263, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1888 = (clojure.lang.Var)RT.var("clojure.core", "refer-clojure");
  const__1889 = (java.lang.Integer)5319;
  const__1890 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "filters"))));
  const__1891 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "filters")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Same as (refer 'clojure.core <filters>)", Keyword.intern(null, "line"), 5319, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1892 = (clojure.lang.Var)RT.var("clojure.core", "defonce");
  const__1893 = (java.lang.Integer)5325;
  const__1894 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "expr"))));
  const__1895 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "expr")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "defs name to have the root value of the expr iff the named var has no root value,\n  else expr is unevaluated", Keyword.intern(null, "line"), 5325, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1896 = (clojure.lang.Var)RT.var("clojure.core", "throw-if");
  const__1897 = (java.lang.Integer)5351;
  const__1898 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1899 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Throws an exception with a message if pred is true", Keyword.intern(null, "line"), 5351, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static void __init19() {
  const__1900 = (clojure.lang.Var)RT.var("clojure.core", "libspec?");
  const__1901 = (java.lang.Integer)5363;
  const__1902 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1903 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is a libspec", Keyword.intern(null, "line"), 5363, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1904 = (clojure.lang.Var)RT.var("clojure.core", "prependss");
  const__1905 = (java.lang.Integer)5372;
  const__1906 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "coll"))));
  const__1907 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Prepends a symbol or a seq to coll", Keyword.intern(null, "line"), 5372, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1908 = (clojure.lang.Var)RT.var("clojure.core", "root-resource");
  const__1909 = (java.lang.Integer)5379;
  const__1910 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"))));
  const__1911 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the root directory path for a lib", Keyword.intern(null, "line"), 5379, Keyword.intern(null, "file"), "clojure/core.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__1912 = (clojure.lang.Var)RT.var("clojure.core", "root-directory");
  const__1913 = (java.lang.Integer)5388;
  const__1914 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"))));
  const__1915 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the root resource path for a lib", Keyword.intern(null, "line"), 5388, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1916 = (clojure.lang.Var)RT.var("clojure.core", "load");
  const__1917 = (java.lang.Integer)5394;
  const__1918 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 5394, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1919 = (clojure.lang.Var)RT.var("clojure.core", "load-one");
  const__1920 = (java.lang.Integer)5396;
  const__1921 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"), Symbol.intern(null, "need-ns"), Symbol.intern(null, "require"))));
  const__1922 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"), Symbol.intern(null, "need-ns"), Symbol.intern(null, "require")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Loads a lib given its name. If need-ns, ensures that the associated\n  namespace exists after loading. If require, records the load so any\n  duplicate loads can be skipped.", Keyword.intern(null, "line"), 5396, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1923 = (clojure.lang.Var)RT.var("clojure.core", "load-all");
  const__1924 = (java.lang.Integer)5409;
  const__1925 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"), Symbol.intern(null, "need-ns"), Symbol.intern(null, "require"))));
  const__1926 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"), Symbol.intern(null, "need-ns"), Symbol.intern(null, "require")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Loads a lib given its name and forces a load of any libs it directly or\n  indirectly loads. If need-ns, ensures that the associated namespace\n  exists after loading. If require, records the load so any duplicate loads\n  can be skipped.", Keyword.intern(null, "line"), 5409, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1927 = (clojure.lang.Var)RT.var("clojure.core", "load-lib");
  const__1928 = (java.lang.Integer)5421;
  const__1929 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "prefix"), Symbol.intern(null, "lib"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__1930 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "prefix"), Symbol.intern(null, "lib"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Loads a lib with options", Keyword.intern(null, "line"), 5421, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1931 = (clojure.lang.Var)RT.var("clojure.core", "load-libs");
  const__1932 = (java.lang.Integer)5461;
  const__1933 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1934 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Loads libs, interpreting libspecs, prefix lists, and flags for\n  forwarding to load-lib", Keyword.intern(null, "line"), 5461, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1935 = (clojure.lang.Var)RT.var("clojure.core", "check-cyclic-dependency");
  const__1936 = (java.lang.Integer)5484;
  const__1937 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "path"))));
  const__1938 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "path")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Detects and rejects non-trivial cyclic load dependencies. The\n  exception message shows the dependency chain with the cycle\n  highlighted. Ignores the trivial case of a file attempting to load\n  itself because that can occur when a gen-class'd class loads its\n  implementation.", Keyword.intern(null, "line"), 5484, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1939 = (clojure.lang.Var)RT.var("clojure.core", "require");
  const__1940 = (java.lang.Integer)5499;
  const__1941 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1942 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib, a prefix list that identifies\n  multiple libs whose names share a common prefix, or a flag that modifies\n  how all the identified libs are loaded. Use :require in the ns macro\n  in preference to calling this directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of Clojure code. Lib names are symbols and each lib is associated\n  with a Clojure namespace and a Java package that share its name. A lib's\n  name also locates its root directory within classpath using Java's\n  package name to classpath-relative path mapping. All resources in a lib\n  should be contained in the directory structure under its root directory.\n  All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace or the :all\n    keyword to bring in all public vars.\n\n  Prefix Lists\n\n  It's common for Clojure code to depend on several libs whose names have\n  the same prefix. When specifying libs, prefix lists can be used to reduce\n  repetition. A prefix list contains the shared prefix followed by libspecs\n  with the shared prefix removed from the lib names. After removing the\n  prefix, the names that remain must not contain any periods.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the libraries clojure.zip and clojure.set\n  abbreviated as 's'.\n\n  (require '(clojure zip [set :as s]))", Keyword.intern(null, "line"), 5499, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1943 = (clojure.lang.Var)RT.var("clojure.core", "use");
  const__1944 = (java.lang.Integer)5563;
  const__1945 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1946 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Like 'require, but also refers to each lib's namespace using\n  clojure.core/refer. Use :use in the ns macro in preference to calling\n  this directly.\n\n  'use accepts additional options in libspecs: :exclude, :only, :rename.\n  The arguments and semantics for :exclude, :only, and :rename are the same\n  as those documented for clojure.core/refer.", Keyword.intern(null, "line"), 5563, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1947 = (clojure.lang.Var)RT.var("clojure.core", "loaded-libs");
  const__1948 = (java.lang.Integer)5574;
  const__1949 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__1950 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a sorted set of symbols naming the currently loaded libs", Keyword.intern(null, "line"), 5574, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1951 = (java.lang.Integer)5579;
  const__1952 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "paths"))));
  const__1953 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "paths")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Loads Clojure code from resources in classpath. A path is interpreted as\n  classpath-relative if it begins with a slash or relative to the root\n  directory for the current namespace otherwise.", Keyword.intern(null, "line"), 5579, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1954 = (clojure.lang.Var)RT.var("clojure.core", "compile");
  const__1955 = (java.lang.Integer)5597;
  const__1956 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib"))));
  const__1957 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lib")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Compiles the namespace named by the symbol lib into a set of\n  classfiles. The source for the lib must be in a proper\n  classpath-relative directory. The output files will go into the\n  directory specified by *compile-path*, and that directory too must\n  be in the classpath.", Keyword.intern(null, "line"), 5597, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1958 = (clojure.lang.Var)RT.var("clojure.core", "get-in");
  const__1959 = (java.lang.Integer)5611;
  const__1960 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "ks")), RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "ks"), Symbol.intern(null, "not-found"))));
  const__1961 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "ks")), RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "ks"), Symbol.intern(null, "not-found")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key\n  is not present, or the not-found value if supplied.", Keyword.intern(null, "line"), 5611, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1962 = (clojure.lang.Var)RT.var("clojure.core", "assoc-in");
  const__1963 = (java.lang.Integer)5630;
  const__1964 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")), Symbol.intern(null, "v"))));
  const__1965 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")), Symbol.intern(null, "v")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", Keyword.intern(null, "line"), 5630, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1966 = (clojure.lang.Var)RT.var("clojure.core", "update-in");
  const__1967 = (java.lang.Integer)5641;
  const__1968 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__1969 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), RT.vector(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks")), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", Keyword.intern(null, "line"), 5641, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1970 = (clojure.lang.Var)RT.var("clojure.core", "empty?");
  const__1971 = (java.lang.Integer)5655;
  const__1972 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1973 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", Keyword.intern(null, "line"), 5655, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1974 = (clojure.lang.Var)RT.var("clojure.core", "coll?");
  const__1975 = (java.lang.Integer)5662;
  const__1976 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1977 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x implements IPersistentCollection", Keyword.intern(null, "line"), 5662, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1978 = (clojure.lang.Var)RT.var("clojure.core", "list?");
  const__1979 = (java.lang.Integer)5668;
  const__1980 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1981 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x implements IPersistentList", Keyword.intern(null, "line"), 5668, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1982 = (clojure.lang.Var)RT.var("clojure.core", "set?");
  const__1983 = (java.lang.Integer)5674;
  const__1984 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1985 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x implements IPersistentSet", Keyword.intern(null, "line"), 5674, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1986 = (clojure.lang.Var)RT.var("clojure.core", "ifn?");
  const__1987 = (java.lang.Integer)5680;
  const__1988 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1989 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x implements IFn. Note that many data structures\n  (e.g. sets and maps) implement IFn", Keyword.intern(null, "line"), 5680, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1990 = (clojure.lang.Var)RT.var("clojure.core", "fn?");
  const__1991 = (java.lang.Integer)5687;
  const__1992 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__1993 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x implements Fn, i.e. is an object created via fn.", Keyword.intern(null, "line"), 5687, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1994 = (clojure.lang.Var)RT.var("clojure.core", "associative?");
  const__1995 = (java.lang.Integer)5694;
  const__1996 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__1997 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll implements Associative", Keyword.intern(null, "line"), 5694, Keyword.intern(null, "file"), "clojure/core.clj");
  const__1998 = (clojure.lang.Var)RT.var("clojure.core", "sequential?");
  const__1999 = (java.lang.Integer)5700;
 }
 static void __init20() {
  const__2000 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2001 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll implements Sequential", Keyword.intern(null, "line"), 5700, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2002 = (clojure.lang.Var)RT.var("clojure.core", "sorted?");
  const__2003 = (java.lang.Integer)5706;
  const__2004 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2005 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll implements Sorted", Keyword.intern(null, "line"), 5706, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2006 = (clojure.lang.Var)RT.var("clojure.core", "counted?");
  const__2007 = (java.lang.Integer)5712;
  const__2008 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2009 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll implements count in constant time", Keyword.intern(null, "line"), 5712, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2010 = (clojure.lang.Var)RT.var("clojure.core", "reversible?");
  const__2011 = (java.lang.Integer)5718;
  const__2012 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2013 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if coll implements Reversible", Keyword.intern(null, "line"), 5718, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2014 = (clojure.lang.Var)RT.var("clojure.core", "*1");
  const__2015 = (java.lang.Integer)5724;
  const__2016 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bound in a repl thread to the most recent value printed", Keyword.intern(null, "line"), 5724, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2017 = (clojure.lang.Var)RT.var("clojure.core", "*2");
  const__2018 = (java.lang.Integer)5729;
  const__2019 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bound in a repl thread to the second most recent value printed", Keyword.intern(null, "line"), 5729, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2020 = (clojure.lang.Var)RT.var("clojure.core", "*3");
  const__2021 = (java.lang.Integer)5734;
  const__2022 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bound in a repl thread to the third most recent value printed", Keyword.intern(null, "line"), 5734, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2023 = (clojure.lang.Var)RT.var("clojure.core", "*e");
  const__2024 = (java.lang.Integer)5739;
  const__2025 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "bound in a repl thread to the most recent exception caught by the repl", Keyword.intern(null, "line"), 5739, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2026 = (clojure.lang.Var)RT.var("clojure.core", "trampoline");
  const__2027 = (java.lang.Integer)5744;
  const__2028 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__2029 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", Keyword.intern(null, "line"), 5744, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2030 = (clojure.lang.Var)RT.var("clojure.core", "intern");
  const__2031 = (java.lang.Integer)5762;
  const__2032 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), ((clojure.lang.IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Symbol")))), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name"), Symbol.intern(null, "val"))));
  const__2033 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ns"), ((clojure.lang.IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.Symbol")))), RT.vector(Symbol.intern(null, "ns"), Symbol.intern(null, "name"), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Finds or creates a var named by the symbol name in the namespace\n  ns (which can be a symbol or a namespace), setting its root binding\n  to val if supplied. The namespace must exist. The var will adopt any\n  metadata from the name symbol.  Returns the var.", Keyword.intern(null, "line"), 5762, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2034 = (clojure.lang.Var)RT.var("clojure.core", "while");
  const__2035 = (java.lang.Integer)5778;
  const__2036 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__2037 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil", Keyword.intern(null, "line"), 5778, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2038 = (clojure.lang.Var)RT.var("clojure.core", "memoize");
  const__2039 = (java.lang.Integer)5788;
  const__2040 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__2041 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", Keyword.intern(null, "line"), 5788, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2042 = (java.lang.Integer)5806;
  const__2043 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 5806, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2044 = (java.lang.Integer)5807;
  const__2045 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 5807, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2046 = (clojure.lang.Var)RT.var("clojure.core", "condp");
  const__2047 = (java.lang.Integer)5809;
  const__2048 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses"))));
  const__2049 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.", Keyword.intern(null, "line"), 5809, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2050 = (clojure.lang.Var)RT.var("clojure.core", "*agent*");
  const__2051 = (clojure.lang.Var)RT.var("clojure.core", "load-file");
  const__2052 = (clojure.lang.Var)RT.var("clojure.core", "add-doc-and-meta");
  const__2053 = (java.lang.Integer)5857;
  const__2054 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring"), Symbol.intern(null, "meta"))));
  const__2055 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "docstring"), Symbol.intern(null, "meta")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 5857, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2056 = (clojure.lang.Var)RT.var("clojure.core", "*file*");
  const__2057 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2058 = (clojure.lang.Var)RT.var("clojure.core", "*command-line-args*");
  const__2059 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2060 = (clojure.lang.Var)RT.var("clojure.core", "*warn-on-reflection*");
  const__2061 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2062 = (clojure.lang.Var)RT.var("clojure.core", "*compile-path*");
  const__2063 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2064 = (clojure.lang.Var)RT.var("clojure.core", "*compile-files*");
  const__2065 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2066 = (clojure.lang.Var)RT.var("clojure.core", "*unchecked-math*");
  const__2067 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.3");
  const__2068 = (clojure.lang.Var)RT.var("clojure.core", "*compiler-options*");
  const__2069 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.4");
  const__2070 = (clojure.lang.Var)RT.var("clojure.core", "*ns*");
  const__2071 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2072 = (clojure.lang.Var)RT.var("clojure.core", "*in*");
  const__2073 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2074 = (clojure.lang.Var)RT.var("clojure.core", "*out*");
  const__2075 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2076 = (clojure.lang.Var)RT.var("clojure.core", "*err*");
  const__2077 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2078 = (clojure.lang.Var)RT.var("clojure.core", "*flush-on-newline*");
  const__2079 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2080 = (clojure.lang.Var)RT.var("clojure.core", "*print-meta*");
  const__2081 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2082 = (clojure.lang.Var)RT.var("clojure.core", "*print-dup*");
  const__2083 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2084 = (clojure.lang.Var)RT.var("clojure.core", "*print-readably*");
  const__2085 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2086 = (clojure.lang.Var)RT.var("clojure.core", "*read-eval*");
  const__2087 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.0");
  const__2088 = (clojure.lang.Var)RT.var("clojure.core", "future?");
  const__2089 = (java.lang.Integer)5979;
  const__2090 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__2091 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if x is a future", Keyword.intern(null, "line"), 5979, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2092 = (clojure.lang.Var)RT.var("clojure.core", "future-done?");
  const__2093 = (java.lang.Integer)5985;
  const__2094 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future"))))));
  const__2095 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if future f is done", Keyword.intern(null, "line"), 5985, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2096 = (clojure.lang.Var)RT.var("clojure.core", "letfn");
  const__2097 = (java.lang.Integer)5992;
  const__2098 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fnspecs"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__2099 = (clojure.lang.Keyword)Keyword.intern(null, "url");
 }
 static void __init21() {
  const__2100 = (clojure.lang.PersistentVector)RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "letfn"), RT.vector(Symbol.intern(null, "fnspecs*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 5998, Keyword.intern(null, "column"), 27)));
  const__2101 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fnspecs"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "forms"), RT.vector(((clojure.lang.IObj)PersistentList.create(java.util.Arrays.asList(Symbol.intern(null, "letfn"), RT.vector(Symbol.intern(null, "fnspecs*")), Symbol.intern(null, "exprs*")))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "line"), 5998, Keyword.intern(null, "column"), 27))), Keyword.intern(null, "special-form"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "url"), null, Keyword.intern(null, "doc"), "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.", Keyword.intern(null, "line"), 5992, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2102 = (clojure.lang.Var)RT.var("clojure.core", "fnil");
  const__2103 = (java.lang.Integer)6005;
  const__2104 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"))));
  const__2105 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", Keyword.intern(null, "line"), 6005, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2106 = (clojure.lang.Var)RT.var("clojure.core", "shift-mask");
  const__2107 = (java.lang.Integer)6032;
  const__2108 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "shift"), Symbol.intern(null, "mask"), Symbol.intern(null, "x"))));
  const__2109 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "shift"), Symbol.intern(null, "mask"), Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 6032, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2110 = (clojure.lang.Var)RT.var("clojure.core", "max-mask-bits");
  const__2111 = (java.lang.Integer)6035;
  const__2112 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 6035, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2113 = (java.lang.Long)13L;
  const__2114 = (clojure.lang.Var)RT.var("clojure.core", "max-switch-table-size");
  const__2115 = (java.lang.Integer)6036;
  const__2116 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 6036, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2117 = (clojure.lang.Var)RT.var("clojure.core", "maybe-min-hash");
  const__2118 = (java.lang.Integer)6038;
  const__2119 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "hashes"))));
  const__2120 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "hashes")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "takes a collection of hashes and returns [shift mask] or nil if none found", Keyword.intern(null, "line"), 6038, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2121 = (clojure.lang.Var)RT.var("clojure.core", "case-map");
  const__2122 = (java.lang.Integer)6048;
  const__2123 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "case-f"), Symbol.intern(null, "test-f"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens"))));
  const__2124 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "case-f"), Symbol.intern(null, "test-f"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Transforms a sequence of test constants and a corresponding sequence of then\n  expressions into a sorted map to be consumed by case*. The form of the map\n  entries are {(case-f test) [(test-f test) then]}.", Keyword.intern(null, "line"), 6048, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2125 = (clojure.lang.Var)RT.var("clojure.core", "fits-table?");
  const__2126 = (java.lang.Integer)6059;
  const__2127 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ints"))));
  const__2128 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "ints")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if the collection of ints can fit within the\n  max-table-switch-size, false otherwise.", Keyword.intern(null, "line"), 6059, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2129 = (clojure.lang.Var)RT.var("clojure.core", "prep-ints");
  const__2130 = (java.lang.Integer)6065;
  const__2131 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tests"), Symbol.intern(null, "thens"))));
  const__2132 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tests"), Symbol.intern(null, "thens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a sequence of int-sized test constants and a corresponding sequence of\n  then expressions. Returns a tuple of [shift mask case-map switch-type] where\n  case-map is a map of int case values to [test then] tuples, and switch-type\n  is either :sparse or :compact.", Keyword.intern(null, "line"), 6065, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2133 = (clojure.lang.Var)RT.var("clojure.core", "merge-hash-collisions");
  const__2134 = (java.lang.Integer)6081;
  const__2135 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr-sym"), Symbol.intern(null, "default"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens"))));
  const__2136 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr-sym"), Symbol.intern(null, "default"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a case expression, default expression, and a sequence of test constants\n  and a corresponding sequence of then expressions. Returns a tuple of\n  [tests thens skip-check-set] where no tests have the same hash. Each set of\n  input test constants with the same hash is replaced with a single test\n  constant (the case int), and their respective thens are combined into:\n  (condp = expr\n    test-1 then-1\n    ...\n    test-n then-n\n    default).\n  The skip-check is a set of case ints for which post-switch equivalence\n  checking must not be done (the cases holding the above condp thens).", Keyword.intern(null, "line"), 6081, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2137 = (clojure.lang.Var)RT.var("clojure.core", "prep-hashes");
  const__2138 = (java.lang.Integer)6117;
  const__2139 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr-sym"), Symbol.intern(null, "default"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens"))));
  const__2140 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr-sym"), Symbol.intern(null, "default"), Symbol.intern(null, "tests"), Symbol.intern(null, "thens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a sequence of test constants and a corresponding sequence of then\n  expressions. Returns a tuple of [shift mask case-map switch-type skip-check]\n  where case-map is a map of int case values to [test then] tuples, switch-type\n  is either :sparse or :compact, and skip-check is a set of case ints for which\n  post-switch equivalence checking must not be done (occurs with hash\n  collisions).", Keyword.intern(null, "line"), 6117, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2141 = (clojure.lang.Var)RT.var("clojure.core", "case");
  const__2142 = (java.lang.Integer)6209;
  const__2143 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "e"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses"))));
  const__2144 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "e"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 6209, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2145 = (clojure.lang.Var)RT.var("clojure.core", "reduced");
  const__2146 = (java.lang.Integer)6213;
  const__2147 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__2148 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Wraps x in a way such that a reduce will terminate with the value x", Keyword.intern(null, "line"), 6213, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2149 = (clojure.lang.Var)RT.var("clojure.core", "reduced?");
  const__2150 = (java.lang.Integer)6219;
  const__2151 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__2152 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(1L);
  const__2153 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__2154 = (clojure.lang.Var)RT.var("clojure.core", "reduce");
  const__2155 = (java.lang.Integer)6237;
  const__2156 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "val"), Symbol.intern(null, "coll"))));
  const__2157 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "val"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", Keyword.intern(null, "line"), 6237, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2158 = (clojure.lang.Var)RT.var("clojure.core", "extend");
  const__2159 = (java.lang.Class)clojure.lang.PersistentVector.class;
  const__2160 = (clojure.lang.Var)RT.var("clojure.core.protocols", "IKVReduce");
  const__2161 = (clojure.lang.Keyword)Keyword.intern(null, "kv-reduce");
  const__2162 = (java.lang.Class)clojure.lang.PersistentTreeMap.class;
  const__2163 = (java.lang.Class)clojure.lang.PersistentArrayMap.class;
  const__2164 = (java.lang.Class)clojure.lang.PersistentHashMap.class;
  const__2165 = (java.lang.Class)clojure.lang.IPersistentMap.class;
  const__2166 = (clojure.lang.Var)RT.var("clojure.core", "reduce-kv");
  const__2167 = (java.lang.Integer)6285;
  const__2168 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "coll"))));
  const__2169 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "doc"), "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", Keyword.intern(null, "line"), 6285, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2170 = (clojure.lang.Var)RT.var("clojure.core", "into");
  const__2171 = (java.lang.Integer)6296;
  const__2172 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "to"), Symbol.intern(null, "from"))));
  const__2173 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "to"), Symbol.intern(null, "from")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", Keyword.intern(null, "line"), 6296, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2174 = (clojure.lang.Var)RT.var("clojure.core", "mapv");
  const__2175 = (java.lang.Integer)6306;
  const__2176 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3"), Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__2177 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "c1"), Symbol.intern(null, "c2"), Symbol.intern(null, "c3"), Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", Keyword.intern(null, "line"), 6306, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2178 = (clojure.lang.Var)RT.var("clojure.core", "filterv");
  const__2179 = (java.lang.Integer)6324;
  const__2180 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll"))));
  const__2181 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", Keyword.intern(null, "line"), 6324, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2182 = (clojure.lang.PersistentVector)RT.vector(Symbol.intern(null, "clojure.java.io"), Keyword.intern(null, "as"), Symbol.intern(null, "jio"));
  const__2183 = (clojure.lang.Var)RT.var("clojure.core", "normalize-slurp-opts");
  const__2184 = (java.lang.Integer)6337;
  const__2185 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts"))));
  const__2186 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 6337, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2187 = (clojure.lang.Var)RT.var("clojure.core", "slurp");
  const__2188 = (java.lang.Integer)6345;
  const__2189 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__2190 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Opens a reader on f and reads all its contents, returning a string.\n  See clojure.java.io/reader for a complete list of supported arguments.", Keyword.intern(null, "line"), 6345, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2191 = (clojure.lang.Var)RT.var("clojure.core", "spit");
  const__2192 = (java.lang.Integer)6360;
  const__2193 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "content"), Symbol.intern(null, "&"), Symbol.intern(null, "options"))));
  const__2194 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "content"), Symbol.intern(null, "&"), Symbol.intern(null, "options")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Opposite of slurp.  Opens f with writer, writes content, then\n  closes f. Options passed to clojure.java.io/writer.", Keyword.intern(null, "line"), 6360, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2195 = (clojure.lang.Var)RT.var("clojure.core", "future-call");
  const__2196 = (java.lang.Integer)6369;
  const__2197 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__2198 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?.", Keyword.intern(null, "line"), 6369, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2199 = (clojure.lang.Var)RT.var("clojure.core", "future");
 }
 static void __init22() {
  const__2200 = (java.lang.Integer)6396;
  const__2201 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__2202 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.", Keyword.intern(null, "line"), 6396, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2203 = (clojure.lang.Var)RT.var("clojure.core", "future-cancel");
  const__2204 = (java.lang.Integer)6406;
  const__2205 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future"))))));
  const__2206 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Cancels the future, if possible.", Keyword.intern(null, "line"), 6406, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2207 = (clojure.lang.Var)RT.var("clojure.core", "future-cancelled?");
  const__2208 = (java.lang.Integer)6412;
  const__2209 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future"))))));
  const__2210 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.concurrent.Future")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns true if future f is cancelled", Keyword.intern(null, "line"), 6412, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2211 = (clojure.lang.Var)RT.var("clojure.core", "pmap");
  const__2212 = (java.lang.Integer)6418;
  const__2213 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"), Symbol.intern(null, "&"), Symbol.intern(null, "colls"))));
  const__2214 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"), Symbol.intern(null, "&"), Symbol.intern(null, "colls")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Like map, except f is applied in parallel. Semi-lazy in that the\n  parallel computation stays ahead of the consumption, but doesn't\n  realize the entire result unless required. Only useful for\n  computationally intensive functions where the time of f dominates\n  the coordination overhead.", Keyword.intern(null, "line"), 6418, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2215 = (clojure.lang.Var)RT.var("clojure.core", "pcalls");
  const__2216 = (java.lang.Integer)6443;
  const__2217 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "fns"))));
  const__2218 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "fns")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Executes the no-arg fns in parallel, returning a lazy sequence of\n  their values", Keyword.intern(null, "line"), 6443, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2219 = (clojure.lang.Var)RT.var("clojure.core", "pvalues");
  const__2220 = (java.lang.Integer)6450;
  const__2221 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "exprs"))));
  const__2222 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "exprs")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the values of the exprs, which are\n  evaluated in parallel", Keyword.intern(null, "line"), 6450, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2223 = (clojure.lang.Var)RT.var("clojure.core", "*clojure-version*");
  const__2224 = (java.lang.Integer)6480;
  const__2225 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 6480, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2226 = (clojure.lang.Keyword)Keyword.intern(null, "major");
  const__2227 = (clojure.lang.Keyword)Keyword.intern(null, "minor");
  const__2228 = (java.lang.Long)5L;
  const__2229 = (clojure.lang.Keyword)Keyword.intern(null, "incremental");
  const__2230 = (clojure.lang.Keyword)Keyword.intern(null, "qualifier");
  const__2231 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "qualifier"), null, Keyword.intern(null, "minor"), 5L, Keyword.intern(null, "incremental"), 1L, Keyword.intern(null, "major"), 1L);
  const__2232 = (clojure.lang.Var)RT.var("clojure.core", "clojure-version");
  const__2233 = (java.lang.Integer)6489;
  const__2234 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__2235 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns clojure version as a printable string.", Keyword.intern(null, "line"), 6489, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2236 = (clojure.lang.Var)RT.var("clojure.core", "promise");
  const__2237 = (java.lang.Integer)6504;
  const__2238 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__2239 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?.", Keyword.intern(null, "line"), 6504, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2240 = (clojure.lang.Var)RT.var("clojure.core", "deliver");
  const__2241 = (java.lang.Integer)6536;
  const__2242 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "promise"), Symbol.intern(null, "val"))));
  const__2243 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "promise"), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Alpha - subject to change.\n  Delivers the supplied value to the promise, releasing any pending\n  derefs. A subsequent call to deliver on a promise will have no effect.", Keyword.intern(null, "line"), 6536, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2244 = (java.lang.Integer)6546;
  const__2245 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__2246 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns an empty sequence.", Keyword.intern(null, "line"), 6546, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2247 = (clojure.lang.Var)RT.var("clojure.core", "group-by");
  const__2248 = (java.lang.Integer)6556;
  const__2249 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"))));
  const__2250 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", Keyword.intern(null, "line"), 6556, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2251 = (clojure.lang.Var)RT.var("clojure.core", "partition-by");
  const__2252 = (java.lang.Integer)6570;
  const__2253 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"))));
  const__2254 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", Keyword.intern(null, "line"), 6570, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2255 = (clojure.lang.Var)RT.var("clojure.core", "frequencies");
  const__2256 = (java.lang.Integer)6583;
  const__2257 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2258 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a map from distinct items in coll to the number of times\n  they appear.", Keyword.intern(null, "line"), 6583, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2259 = (clojure.lang.Var)RT.var("clojure.core", "reductions");
  const__2260 = (java.lang.Integer)6594;
  const__2261 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "coll"))));
  const__2262 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", Keyword.intern(null, "line"), 6594, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2263 = (clojure.lang.Var)RT.var("clojure.core", "rand-nth");
  const__2264 = (java.lang.Integer)6609;
  const__2265 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll"))));
  const__2266 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", Keyword.intern(null, "line"), 6609, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2267 = (clojure.lang.Var)RT.var("clojure.core", "partition-all");
  const__2268 = (java.lang.Integer)6618;
  const__2269 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "coll"))));
  const__2270 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "coll")), RT.vector(Symbol.intern(null, "n"), Symbol.intern(null, "step"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", Keyword.intern(null, "line"), 6618, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2271 = (clojure.lang.Var)RT.var("clojure.core", "shuffle");
  const__2272 = (java.lang.Integer)6631;
  const__2273 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Collection"))))));
  const__2274 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "coll")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Collection")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return a random permutation of coll", Keyword.intern(null, "line"), 6631, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2275 = (clojure.lang.Var)RT.var("clojure.core", "map-indexed");
  const__2276 = (java.lang.Integer)6640;
  const__2277 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"))));
  const__2278 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", Keyword.intern(null, "line"), 6640, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2279 = (clojure.lang.Var)RT.var("clojure.core", "keep");
  const__2280 = (java.lang.Integer)6661;
  const__2281 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"))));
  const__2282 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", Keyword.intern(null, "line"), 6661, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2283 = (clojure.lang.Var)RT.var("clojure.core", "keep-indexed");
  const__2284 = (java.lang.Integer)6684;
  const__2285 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll"))));
  const__2286 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "coll")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "static"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", Keyword.intern(null, "line"), 6684, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2287 = (clojure.lang.Var)RT.var("clojure.core", "every-pred");
  const__2288 = (java.lang.Integer)6709;
  const__2289 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "p")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3"), Symbol.intern(null, "&"), Symbol.intern(null, "ps"))));
  const__2290 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "p")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3"), Symbol.intern(null, "&"), Symbol.intern(null, "ps")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "doc"), "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", Keyword.intern(null, "line"), 6709, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2291 = (clojure.lang.Var)RT.var("clojure.core", "some-fn");
  const__2292 = (java.lang.Integer)6749;
  const__2293 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "p")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3"), Symbol.intern(null, "&"), Symbol.intern(null, "ps"))));
  const__2294 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "p")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3")), RT.vector(Symbol.intern(null, "p1"), Symbol.intern(null, "p2"), Symbol.intern(null, "p3"), Symbol.intern(null, "&"), Symbol.intern(null, "ps")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "doc"), "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", Keyword.intern(null, "line"), 6749, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2295 = (java.lang.Integer)6789;
  const__2296 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fdecl"))));
  const__2297 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "fdecl")))), Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.", Keyword.intern(null, "line"), 6789, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2298 = (clojure.lang.Var)RT.var("clojure.core", "with-redefs-fn");
  const__2299 = (java.lang.Integer)6812;
 }
 static void __init23() {
  const__2300 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "func"))));
  const__2301 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "binding-map"), Symbol.intern(null, "func")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "doc"), "Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.", Keyword.intern(null, "line"), 6812, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2302 = (clojure.lang.Var)RT.var("clojure.core", "with-redefs");
  const__2303 = (java.lang.Integer)6832;
  const__2304 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__2305 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "doc"), "binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing.", Keyword.intern(null, "line"), 6832, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2306 = (clojure.lang.Var)RT.var("clojure.core", "realized?");
  const__2307 = (java.lang.Integer)6847;
  const__2308 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IPending"))))));
  const__2309 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "clojure.lang.IPending")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.3", Keyword.intern(null, "doc"), "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", Keyword.intern(null, "line"), 6847, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2310 = (clojure.lang.Var)RT.var("clojure.core", "cond->");
  const__2311 = (java.lang.Integer)6852;
  const__2312 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses"))));
  const__2313 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.", Keyword.intern(null, "line"), 6852, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2314 = (clojure.lang.Var)RT.var("clojure.core", "cond->>");
  const__2315 = (java.lang.Integer)6866;
  const__2316 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses"))));
  const__2317 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.", Keyword.intern(null, "line"), 6866, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2318 = (clojure.lang.Var)RT.var("clojure.core", "as->");
  const__2319 = (java.lang.Integer)6880;
  const__2320 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__2321 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.", Keyword.intern(null, "line"), 6880, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2322 = (clojure.lang.Var)RT.var("clojure.core", "some->");
  const__2323 = (java.lang.Integer)6890;
  const__2324 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__2325 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc", Keyword.intern(null, "line"), 6890, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2326 = (clojure.lang.Var)RT.var("clojure.core", "some->>");
  const__2327 = (java.lang.Integer)6901;
  const__2328 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms"))));
  const__2329 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc", Keyword.intern(null, "line"), 6901, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2330 = (clojure.lang.Var)RT.var("clojure.core", "default-data-readers");
  const__2331 = (java.lang.Integer)6914;
  const__2332 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "doc"), "Default map of data reader functions provided by Clojure. May be\n  overridden by binding *data-readers*.", Keyword.intern(null, "line"), 6914, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2333 = (clojure.lang.Symbol)Symbol.intern(null, "inst");
  const__2334 = (clojure.lang.Var)RT.var("clojure.instant", "read-instant-date");
  const__2335 = (clojure.lang.Symbol)Symbol.intern(null, "uuid");
  const__2336 = (clojure.lang.Var)RT.var("clojure.uuid", "default-uuid-reader");
  const__2337 = (clojure.lang.Var)RT.var("clojure.core", "*data-readers*");
  const__2338 = (java.lang.Integer)6920;
  const__2339 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.4", Keyword.intern(null, "doc"), "Map from reader tag symbols to data reader Vars.\n\n  When Clojure starts, it searches for files named 'data_readers.clj'\n  at the root of the classpath. Each such file must contain a literal\n  map of symbols, like this:\n\n      {foo/bar my.project.foo/bar\n       foo/baz my.project/baz}\n\n  The first symbol in each pair is a tag that will be recognized by\n  the Clojure reader. The second symbol in the pair is the\n  fully-qualified name of a Var which will be invoked by the reader to\n  parse the form following the tag. For example, given the\n  data_readers.clj file above, the Clojure reader would parse this\n  form:\n\n      #foo/bar [1 2 3]\n\n  by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\n  data reader function is invoked on the form AFTER it has been read\n  as a normal Clojure data structure by the reader.\n\n  Reader tags without namespace qualifiers are reserved for\n  Clojure. Default reader tags are defined in\n  clojure.core/default-data-readers but may be overridden in\n  data_readers.clj or by rebinding this Var.", Keyword.intern(null, "line"), 6920, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2340 = (clojure.lang.Var)RT.var("clojure.core", "*default-data-reader-fn*");
  const__2341 = (java.lang.Integer)6949;
  const__2342 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.5", Keyword.intern(null, "doc"), "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments,\n  the tag and the value.  If *default-data-reader-fn* is nil (the\n  default), an exception will be thrown for the unknown tag.", Keyword.intern(null, "line"), 6949, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2343 = (clojure.lang.Var)RT.var("clojure.core", "sel");
  const__2344 = (java.lang.Integer)7002;
  const__2345 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__2346 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 7002, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2347 = (clojure.lang.Var)RT.var("clojure.core", "objc-class");
  const__2348 = (java.lang.Integer)7005;
  const__2349 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__2350 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 7005, Keyword.intern(null, "file"), "clojure/core.clj");
  const__2351 = (clojure.lang.Var)RT.var("clojure.core", "$");
  const__2352 = (java.lang.Integer)7010;
  const__2353 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__2354 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 7010, Keyword.intern(null, "file"), "clojure/core.clj");
 }
 static {
  __init0();
  __init1();
  __init2();
  __init3();
  __init4();
  __init5();
  __init6();
  __init7();
  __init8();
  __init9();
  __init10();
  __init11();
  __init12();
  __init13();
  __init14();
  __init15();
  __init16();
  __init17();
  __init18();
  __init19();
  __init20();
  __init21();
  __init22();
  __init23();
  clojure.lang.Compiler.pushNSandLoader(clojure.core__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
