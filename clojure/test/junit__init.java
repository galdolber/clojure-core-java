package clojure.test;

import clojure.lang.*;

public class junit__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((IFn)new clojure.test.junit_loading__4931__auto__()).invoke();
  if (((clojure.lang.Symbol)const__1).equals(((java.lang.Object)const__2))) {
  } else {
   clojure.lang.LockingTransaction.runInTransaction((java.util.concurrent.Callable)((java.util.concurrent.Callable)new clojure.test.junit_fn__7247()));
  }
  const__3.setMeta((IPersistentMap)const__10);
  const__3.bindRoot(((IFn)const__11.getRawRoot()).invoke("'<>\"&", ((IFn)const__12.getRawRoot()).invoke(new clojure.test.junit_fn__7250(), const__13)));
  const__14.setMeta((IPersistentMap)const__18);
  const__14.bindRoot(new clojure.test.junit_escape_xml());
  const__19.setDynamic(true);
  const__19.setMeta((IPersistentMap)const__22);
  const__23.setDynamic(true);
  const__23.setMeta((IPersistentMap)const__25);
  const__26.setMeta((IPersistentMap)const__29);
  const__26.bindRoot(new clojure.test.junit_indent());
  const__30.setMeta((IPersistentMap)const__33);
  const__30.bindRoot(new clojure.test.junit_start_element());
  const__34.setMeta((IPersistentMap)const__37);
  const__34.bindRoot(new clojure.test.junit_element_content());
  const__38.setMeta((IPersistentMap)const__41);
  const__38.bindRoot(new clojure.test.junit_finish_element());
  const__42.setMeta((IPersistentMap)const__45);
  const__42.bindRoot(new clojure.test.junit_test_name());
  const__46.setMeta((IPersistentMap)const__49);
  const__46.bindRoot(new clojure.test.junit_package_class());
  const__50.setMeta((IPersistentMap)const__53);
  const__50.bindRoot(new clojure.test.junit_start_case());
  const__54.setMeta((IPersistentMap)const__57);
  const__54.bindRoot(new clojure.test.junit_finish_case());
  const__58.setMeta((IPersistentMap)const__61);
  const__58.bindRoot(new clojure.test.junit_suite_attrs());
  const__62.setMeta((IPersistentMap)const__65);
  const__62.bindRoot(new clojure.test.junit_start_suite());
  const__66.setMeta((IPersistentMap)const__69);
  const__66.bindRoot(new clojure.test.junit_finish_suite());
  const__70.setMeta((IPersistentMap)const__73);
  const__70.bindRoot(new clojure.test.junit_message_el());
  const__74.setMeta((IPersistentMap)const__77);
  const__74.bindRoot(new clojure.test.junit_failure_el());
  const__78.setMeta((IPersistentMap)const__81);
  const__78.bindRoot(new clojure.test.junit_error_el());
  ((IFn)new clojure.test.junit_fn__7289()).invoke();
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__83), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7293()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__84), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7295()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__85), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7297()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__86), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7299()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__87), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7301()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__88), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7303()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__89), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7305()));
  ((clojure.lang.MultiFn)const__82.get()).addMethod(((java.lang.Object)const__90), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.test.junit_fn__7307()));
  const__91.setMeta((IPersistentMap)const__96);
  const__91.bindRoot(new clojure.test.junit_with_junit_output());
  ((clojure.lang.Var)const__91).setMacro();
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Symbol const__2;
 private static clojure.lang.Var const__3;
 private static clojure.lang.Keyword const__4;
 private static clojure.lang.Keyword const__5;
 private static java.lang.Integer const__6;
 private static clojure.lang.Keyword const__7;
 private static java.lang.Integer const__8;
 private static clojure.lang.Keyword const__9;
 private static clojure.lang.IPersistentMap const__10;
 private static clojure.lang.Var const__11;
 private static clojure.lang.Var const__12;
 private static clojure.lang.PersistentVector const__13;
 private static clojure.lang.Var const__14;
 private static java.lang.Integer const__15;
 private static clojure.lang.Keyword const__16;
 private static clojure.lang.IPersistentList const__17;
 private static clojure.lang.IPersistentMap const__18;
 private static clojure.lang.Var const__19;
 private static java.lang.Integer const__20;
 private static clojure.lang.Keyword const__21;
 private static clojure.lang.IPersistentMap const__22;
 private static clojure.lang.Var const__23;
 private static java.lang.Integer const__24;
 private static clojure.lang.IPersistentMap const__25;
 private static clojure.lang.Var const__26;
 private static java.lang.Integer const__27;
 private static clojure.lang.IPersistentList const__28;
 private static clojure.lang.IPersistentMap const__29;
 private static clojure.lang.Var const__30;
 private static java.lang.Integer const__31;
 private static clojure.lang.IPersistentList const__32;
 private static clojure.lang.IPersistentMap const__33;
 private static clojure.lang.Var const__34;
 private static java.lang.Integer const__35;
 private static clojure.lang.IPersistentList const__36;
 private static clojure.lang.IPersistentMap const__37;
 private static clojure.lang.Var const__38;
 private static java.lang.Integer const__39;
 private static clojure.lang.IPersistentList const__40;
 private static clojure.lang.IPersistentMap const__41;
 private static clojure.lang.Var const__42;
 private static java.lang.Integer const__43;
 private static clojure.lang.IPersistentList const__44;
 private static clojure.lang.IPersistentMap const__45;
 private static clojure.lang.Var const__46;
 private static java.lang.Integer const__47;
 private static clojure.lang.IPersistentList const__48;
 private static clojure.lang.IPersistentMap const__49;
 private static clojure.lang.Var const__50;
 private static java.lang.Integer const__51;
 private static clojure.lang.IPersistentList const__52;
 private static clojure.lang.IPersistentMap const__53;
 private static clojure.lang.Var const__54;
 private static java.lang.Integer const__55;
 private static clojure.lang.IPersistentList const__56;
 private static clojure.lang.IPersistentMap const__57;
 private static clojure.lang.Var const__58;
 private static java.lang.Integer const__59;
 private static clojure.lang.IPersistentList const__60;
 private static clojure.lang.IPersistentMap const__61;
 private static clojure.lang.Var const__62;
 private static java.lang.Integer const__63;
 private static clojure.lang.IPersistentList const__64;
 private static clojure.lang.IPersistentMap const__65;
 private static clojure.lang.Var const__66;
 private static java.lang.Integer const__67;
 private static clojure.lang.IPersistentList const__68;
 private static clojure.lang.IPersistentMap const__69;
 private static clojure.lang.Var const__70;
 private static java.lang.Integer const__71;
 private static clojure.lang.IPersistentList const__72;
 private static clojure.lang.IPersistentMap const__73;
 private static clojure.lang.Var const__74;
 private static java.lang.Integer const__75;
 private static clojure.lang.IPersistentList const__76;
 private static clojure.lang.IPersistentMap const__77;
 private static clojure.lang.Var const__78;
 private static java.lang.Integer const__79;
 private static clojure.lang.IPersistentList const__80;
 private static clojure.lang.IPersistentMap const__81;
 private static clojure.lang.Var const__82;
 private static clojure.lang.Keyword const__83;
 private static clojure.lang.Keyword const__84;
 private static clojure.lang.Keyword const__85;
 private static clojure.lang.Keyword const__86;
 private static clojure.lang.Keyword const__87;
 private static clojure.lang.Keyword const__88;
 private static clojure.lang.Keyword const__89;
 private static clojure.lang.Keyword const__90;
 private static clojure.lang.Var const__91;
 private static java.lang.Integer const__92;
 private static clojure.lang.IPersistentList const__93;
 private static clojure.lang.Keyword const__94;
 private static clojure.lang.Keyword const__95;
 private static clojure.lang.IPersistentMap const__96;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "clojure.test.junit")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "author"), "Jason Sankey", Keyword.intern(null, "doc"), "clojure.test extension for JUnit-compatible XML output.\n\n  JUnit (http://junit.org/) is the most popular unit-testing library\n  for Java.  As such, tool support for JUnit output formats is\n  common.  By producing compatible output from tests, this tool\n  support can be exploited.\n\n  To use, wrap any calls to clojure.test/run-tests in the\n  with-junit-output macro, like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.junit)\n\n    (with-junit-output\n      (run-tests 'my.cool.library))\n\n  To write the output to a file, rebind clojure.test/*test-out* to\n  your own PrintWriter (perhaps opened using\n  clojure.java.io/writer)."));
  const__2 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__3 = (clojure.lang.Var)RT.var("clojure.test.junit", "escape-xml-map");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__5 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__6 = (java.lang.Integer)1;
  const__7 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__8 = (java.lang.Integer)42;
  const__9 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__10 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 42, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__11 = (clojure.lang.Var)RT.var("clojure.core", "zipmap");
  const__12 = (clojure.lang.Var)RT.var("clojure.core", "map");
  const__13 = (clojure.lang.PersistentVector)RT.vector(Symbol.intern(null, "apos"), Symbol.intern(null, "lt"), Symbol.intern(null, "gt"), Symbol.intern(null, "quot"), Symbol.intern(null, "amp"));
  const__14 = (clojure.lang.Var)RT.var("clojure.test.junit", "escape-xml");
  const__15 = (java.lang.Integer)45;
  const__16 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__17 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "text"))));
  const__18 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "text")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 45, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__19 = (clojure.lang.Var)RT.var("clojure.test.junit", "*var-context*");
  const__20 = (java.lang.Integer)48;
  const__21 = (clojure.lang.Keyword)Keyword.intern(null, "dynamic");
  const__22 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 48, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__23 = (clojure.lang.Var)RT.var("clojure.test.junit", "*depth*");
  const__24 = (java.lang.Integer)49;
  const__25 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 49, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__26 = (clojure.lang.Var)RT.var("clojure.test.junit", "indent");
  const__27 = (java.lang.Integer)51;
  const__28 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__29 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 51, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__30 = (clojure.lang.Var)RT.var("clojure.test.junit", "start-element");
  const__31 = (java.lang.Integer)55;
  const__32 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty"), Symbol.intern(null, "&"), RT.vector(Symbol.intern(null, "attrs")))));
  const__33 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty"), Symbol.intern(null, "&"), RT.vector(Symbol.intern(null, "attrs"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 55, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__34 = (clojure.lang.Var)RT.var("clojure.test.junit", "element-content");
  const__35 = (java.lang.Integer)66;
  const__36 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "content"))));
  const__37 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "content")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 66, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__38 = (clojure.lang.Var)RT.var("clojure.test.junit", "finish-element");
  const__39 = (java.lang.Integer)70;
  const__40 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty"))));
  const__41 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 70, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__42 = (clojure.lang.Var)RT.var("clojure.test.junit", "test-name");
  const__43 = (java.lang.Integer)77;
  const__44 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "vars"))));
  const__45 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "vars")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 77, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__46 = (clojure.lang.Var)RT.var("clojure.test.junit", "package-class");
  const__47 = (java.lang.Integer)82;
  const__48 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"))));
  const__49 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 82, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__50 = (clojure.lang.Var)RT.var("clojure.test.junit", "start-case");
  const__51 = (java.lang.Integer)89;
  const__52 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "classname"))));
  const__53 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"), Symbol.intern(null, "classname")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 89, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__54 = (clojure.lang.Var)RT.var("clojure.test.junit", "finish-case");
  const__55 = (java.lang.Integer)93;
  const__56 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__57 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 93, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__58 = (clojure.lang.Var)RT.var("clojure.test.junit", "suite-attrs");
  const__59 = (java.lang.Integer)97;
  const__60 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "package"), Symbol.intern(null, "classname"))));
  const__61 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "package"), Symbol.intern(null, "classname")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 97, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__62 = (clojure.lang.Var)RT.var("clojure.test.junit", "start-suite");
  const__63 = (java.lang.Integer)104;
  const__64 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name"))));
  const__65 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "name")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 104, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__66 = (clojure.lang.Var)RT.var("clojure.test.junit", "finish-suite");
  const__67 = (java.lang.Integer)109;
  const__68 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__69 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 109, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__70 = (clojure.lang.Var)RT.var("clojure.test.junit", "message-el");
  const__71 = (java.lang.Integer)113;
  const__72 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "message"), Symbol.intern(null, "expected-str"), Symbol.intern(null, "actual-str"))));
  const__73 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tag"), Symbol.intern(null, "message"), Symbol.intern(null, "expected-str"), Symbol.intern(null, "actual-str")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 113, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__74 = (clojure.lang.Var)RT.var("clojure.test.junit", "failure-el");
  const__75 = (java.lang.Integer)128;
  const__76 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual"))));
  const__77 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 128, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__78 = (clojure.lang.Var)RT.var("clojure.test.junit", "error-el");
  const__79 = (java.lang.Integer)132;
  const__80 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual"))));
  const__81 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 132, Keyword.intern(null, "file"), "clojure/test/junit.clj");
  const__82 = (clojure.lang.Var)RT.var("clojure.test.junit", "junit-report");
  const__83 = (clojure.lang.Keyword)Keyword.intern(null, "begin-test-ns");
  const__84 = (clojure.lang.Keyword)Keyword.intern(null, "end-test-ns");
  const__85 = (clojure.lang.Keyword)Keyword.intern(null, "begin-test-var");
  const__86 = (clojure.lang.Keyword)Keyword.intern(null, "end-test-var");
  const__87 = (clojure.lang.Keyword)Keyword.intern(null, "pass");
  const__88 = (clojure.lang.Keyword)Keyword.intern(null, "fail");
  const__89 = (clojure.lang.Keyword)Keyword.intern(null, "error");
  const__90 = (clojure.lang.Keyword)Keyword.intern(null, "default");
  const__91 = (clojure.lang.Var)RT.var("clojure.test.junit", "with-junit-output");
  const__92 = (java.lang.Integer)182;
  const__93 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body"))));
  const__94 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__95 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__96 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.1", Keyword.intern(null, "doc"), "Execute body with modified test-is reporting functions that write\n  JUnit-compatible XML output.", Keyword.intern(null, "line"), 182, Keyword.intern(null, "file"), "clojure/test/junit.clj");
 }
 static {
  __init0();
  clojure.lang.Compiler.pushNSandLoader(clojure.test.junit__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
