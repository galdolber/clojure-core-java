package clojure;

import clojure.lang.*;

public class zip__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((IFn)new clojure.zip_loading__4931__auto__()).invoke();
  if (((clojure.lang.Symbol)const__1).equals(((java.lang.Object)const__2))) {
  } else {
   clojure.lang.LockingTransaction.runInTransaction((java.util.concurrent.Callable)((java.util.concurrent.Callable)new clojure.zip_fn__6978()));
  }
  const__3.setMeta((IPersistentMap)const__13);
  const__3.bindRoot(new clojure.zip_zipper());
  const__14.setMeta((IPersistentMap)const__17);
  const__14.bindRoot(new clojure.zip_seq_zip());
  const__18.setMeta((IPersistentMap)const__21);
  const__18.bindRoot(new clojure.zip_vector_zip());
  const__22.setMeta((IPersistentMap)const__25);
  const__22.bindRoot(new clojure.zip_xml_zip());
  const__26.setMeta((IPersistentMap)const__29);
  const__26.bindRoot(new clojure.zip_node());
  const__30.setMeta((IPersistentMap)const__33);
  const__30.bindRoot(new clojure.zip_branch_QMARK_());
  const__34.setMeta((IPersistentMap)const__37);
  const__34.bindRoot(new clojure.zip_children());
  const__38.setMeta((IPersistentMap)const__41);
  const__38.bindRoot(new clojure.zip_make_node());
  const__42.setMeta((IPersistentMap)const__45);
  const__42.bindRoot(new clojure.zip_path());
  const__46.setMeta((IPersistentMap)const__49);
  const__46.bindRoot(new clojure.zip_lefts());
  const__50.setMeta((IPersistentMap)const__53);
  const__50.bindRoot(new clojure.zip_rights());
  const__54.setMeta((IPersistentMap)const__57);
  const__54.bindRoot(new clojure.zip_down());
  const__58.setMeta((IPersistentMap)const__61);
  const__58.bindRoot(new clojure.zip_up());
  const__62.setMeta((IPersistentMap)const__65);
  const__62.bindRoot(new clojure.zip_root());
  const__66.setMeta((IPersistentMap)const__69);
  const__66.bindRoot(new clojure.zip_right());
  const__70.setMeta((IPersistentMap)const__73);
  const__70.bindRoot(new clojure.zip_rightmost());
  const__74.setMeta((IPersistentMap)const__77);
  const__74.bindRoot(new clojure.zip_left());
  const__78.setMeta((IPersistentMap)const__81);
  const__78.bindRoot(new clojure.zip_leftmost());
  const__82.setMeta((IPersistentMap)const__85);
  const__82.bindRoot(new clojure.zip_insert_left());
  const__86.setMeta((IPersistentMap)const__89);
  const__86.bindRoot(new clojure.zip_insert_right());
  const__90.setMeta((IPersistentMap)const__93);
  const__90.bindRoot(new clojure.zip_replace());
  const__94.setMeta((IPersistentMap)const__97);
  const__94.bindRoot(new clojure.zip_edit());
  const__98.setMeta((IPersistentMap)const__101);
  const__98.bindRoot(new clojure.zip_insert_child());
  const__102.setMeta((IPersistentMap)const__105);
  const__102.bindRoot(new clojure.zip_append_child());
  const__106.setMeta((IPersistentMap)const__109);
  const__106.bindRoot(new clojure.zip_next());
  const__110.setMeta((IPersistentMap)const__113);
  const__110.bindRoot(new clojure.zip_prev());
  const__114.setMeta((IPersistentMap)const__117);
  const__114.bindRoot(new clojure.zip_end_QMARK_());
  const__118.setMeta((IPersistentMap)const__121);
  const__118.bindRoot(new clojure.zip_remove());
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Symbol const__2;
 private static clojure.lang.Var const__3;
 private static clojure.lang.Keyword const__4;
 private static clojure.lang.Keyword const__5;
 private static java.lang.Integer const__6;
 private static clojure.lang.Keyword const__7;
 private static java.lang.Integer const__8;
 private static clojure.lang.Keyword const__9;
 private static clojure.lang.IPersistentList const__10;
 private static clojure.lang.Keyword const__11;
 private static clojure.lang.Keyword const__12;
 private static clojure.lang.IPersistentMap const__13;
 private static clojure.lang.Var const__14;
 private static java.lang.Integer const__15;
 private static clojure.lang.IPersistentList const__16;
 private static clojure.lang.IPersistentMap const__17;
 private static clojure.lang.Var const__18;
 private static java.lang.Integer const__19;
 private static clojure.lang.IPersistentList const__20;
 private static clojure.lang.IPersistentMap const__21;
 private static clojure.lang.Var const__22;
 private static java.lang.Integer const__23;
 private static clojure.lang.IPersistentList const__24;
 private static clojure.lang.IPersistentMap const__25;
 private static clojure.lang.Var const__26;
 private static java.lang.Integer const__27;
 private static clojure.lang.IPersistentList const__28;
 private static clojure.lang.IPersistentMap const__29;
 private static clojure.lang.Var const__30;
 private static java.lang.Integer const__31;
 private static clojure.lang.IPersistentList const__32;
 private static clojure.lang.IPersistentMap const__33;
 private static clojure.lang.Var const__34;
 private static java.lang.Integer const__35;
 private static clojure.lang.IPersistentList const__36;
 private static clojure.lang.IPersistentMap const__37;
 private static clojure.lang.Var const__38;
 private static java.lang.Integer const__39;
 private static clojure.lang.IPersistentList const__40;
 private static clojure.lang.IPersistentMap const__41;
 private static clojure.lang.Var const__42;
 private static java.lang.Integer const__43;
 private static clojure.lang.IPersistentList const__44;
 private static clojure.lang.IPersistentMap const__45;
 private static clojure.lang.Var const__46;
 private static java.lang.Integer const__47;
 private static clojure.lang.IPersistentList const__48;
 private static clojure.lang.IPersistentMap const__49;
 private static clojure.lang.Var const__50;
 private static java.lang.Integer const__51;
 private static clojure.lang.IPersistentList const__52;
 private static clojure.lang.IPersistentMap const__53;
 private static clojure.lang.Var const__54;
 private static java.lang.Integer const__55;
 private static clojure.lang.IPersistentList const__56;
 private static clojure.lang.IPersistentMap const__57;
 private static clojure.lang.Var const__58;
 private static java.lang.Integer const__59;
 private static clojure.lang.IPersistentList const__60;
 private static clojure.lang.IPersistentMap const__61;
 private static clojure.lang.Var const__62;
 private static java.lang.Integer const__63;
 private static clojure.lang.IPersistentList const__64;
 private static clojure.lang.IPersistentMap const__65;
 private static clojure.lang.Var const__66;
 private static java.lang.Integer const__67;
 private static clojure.lang.IPersistentList const__68;
 private static clojure.lang.IPersistentMap const__69;
 private static clojure.lang.Var const__70;
 private static java.lang.Integer const__71;
 private static clojure.lang.IPersistentList const__72;
 private static clojure.lang.IPersistentMap const__73;
 private static clojure.lang.Var const__74;
 private static java.lang.Integer const__75;
 private static clojure.lang.IPersistentList const__76;
 private static clojure.lang.IPersistentMap const__77;
 private static clojure.lang.Var const__78;
 private static java.lang.Integer const__79;
 private static clojure.lang.IPersistentList const__80;
 private static clojure.lang.IPersistentMap const__81;
 private static clojure.lang.Var const__82;
 private static java.lang.Integer const__83;
 private static clojure.lang.IPersistentList const__84;
 private static clojure.lang.IPersistentMap const__85;
 private static clojure.lang.Var const__86;
 private static java.lang.Integer const__87;
 private static clojure.lang.IPersistentList const__88;
 private static clojure.lang.IPersistentMap const__89;
 private static clojure.lang.Var const__90;
 private static java.lang.Integer const__91;
 private static clojure.lang.IPersistentList const__92;
 private static clojure.lang.IPersistentMap const__93;
 private static clojure.lang.Var const__94;
 private static java.lang.Integer const__95;
 private static clojure.lang.IPersistentList const__96;
 private static clojure.lang.IPersistentMap const__97;
 private static clojure.lang.Var const__98;
 private static java.lang.Integer const__99;
 private static clojure.lang.IPersistentList const__100;
 private static clojure.lang.IPersistentMap const__101;
 private static clojure.lang.Var const__102;
 private static java.lang.Integer const__103;
 private static clojure.lang.IPersistentList const__104;
 private static clojure.lang.IPersistentMap const__105;
 private static clojure.lang.Var const__106;
 private static java.lang.Integer const__107;
 private static clojure.lang.IPersistentList const__108;
 private static clojure.lang.IPersistentMap const__109;
 private static clojure.lang.Var const__110;
 private static java.lang.Integer const__111;
 private static clojure.lang.IPersistentList const__112;
 private static clojure.lang.IPersistentMap const__113;
 private static clojure.lang.Var const__114;
 private static java.lang.Integer const__115;
 private static clojure.lang.IPersistentList const__116;
 private static clojure.lang.IPersistentMap const__117;
 private static clojure.lang.Var const__118;
 private static java.lang.Integer const__119;
 private static clojure.lang.IPersistentList const__120;
 private static clojure.lang.IPersistentMap const__121;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "clojure.zip")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "author"), "Rich Hickey", Keyword.intern(null, "doc"), "Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"));
  const__2 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__3 = (clojure.lang.Var)RT.var("clojure.zip", "zipper");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__5 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__6 = (java.lang.Integer)1;
  const__7 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__8 = (java.lang.Integer)18;
  const__9 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__10 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "branch?"), Symbol.intern(null, "children"), Symbol.intern(null, "make-node"), Symbol.intern(null, "root"))));
  const__11 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__12 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__13 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "branch?"), Symbol.intern(null, "children"), Symbol.intern(null, "make-node"), Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.", Keyword.intern(null, "line"), 18, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__14 = (clojure.lang.Var)RT.var("clojure.zip", "seq-zip");
  const__15 = (java.lang.Integer)35;
  const__16 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root"))));
  const__17 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a zipper for nested sequences, given a root sequence", Keyword.intern(null, "line"), 35, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__18 = (clojure.lang.Var)RT.var("clojure.zip", "vector-zip");
  const__19 = (java.lang.Integer)44;
  const__20 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root"))));
  const__21 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a zipper for nested vectors, given a root vector", Keyword.intern(null, "line"), 44, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__22 = (clojure.lang.Var)RT.var("clojure.zip", "xml-zip");
  const__23 = (java.lang.Integer)53;
  const__24 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root"))));
  const__25 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "root")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a zipper for xml elements (as from xml/parse),\n  given a root element", Keyword.intern(null, "line"), 53, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__26 = (clojure.lang.Var)RT.var("clojure.zip", "node");
  const__27 = (java.lang.Integer)64;
  const__28 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__29 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the node at loc", Keyword.intern(null, "line"), 64, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__30 = (clojure.lang.Var)RT.var("clojure.zip", "branch?");
  const__31 = (java.lang.Integer)69;
  const__32 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__33 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns true if the node at loc is a branch", Keyword.intern(null, "line"), 69, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__34 = (clojure.lang.Var)RT.var("clojure.zip", "children");
  const__35 = (java.lang.Integer)75;
  const__36 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__37 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a seq of the children of node at loc, which must be a branch", Keyword.intern(null, "line"), 75, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__38 = (clojure.lang.Var)RT.var("clojure.zip", "make-node");
  const__39 = (java.lang.Integer)83;
  const__40 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "node"), Symbol.intern(null, "children"))));
  const__41 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "node"), Symbol.intern(null, "children")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.", Keyword.intern(null, "line"), 83, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__42 = (clojure.lang.Var)RT.var("clojure.zip", "path");
  const__43 = (java.lang.Integer)90;
  const__44 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__45 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a seq of nodes leading to this loc", Keyword.intern(null, "line"), 90, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__46 = (clojure.lang.Var)RT.var("clojure.zip", "lefts");
  const__47 = (java.lang.Integer)96;
  const__48 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__49 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a seq of the left siblings of this loc", Keyword.intern(null, "line"), 96, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__50 = (clojure.lang.Var)RT.var("clojure.zip", "rights");
  const__51 = (java.lang.Integer)102;
  const__52 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__53 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns a seq of the right siblings of this loc", Keyword.intern(null, "line"), 102, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__54 = (clojure.lang.Var)RT.var("clojure.zip", "down");
  const__55 = (java.lang.Integer)109;
  const__56 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__57 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children", Keyword.intern(null, "line"), 109, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__58 = (clojure.lang.Var)RT.var("clojure.zip", "up");
  const__59 = (java.lang.Integer)123;
  const__60 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__61 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the parent of the node at this loc, or nil if at\n  the top", Keyword.intern(null, "line"), 123, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__62 = (clojure.lang.Var)RT.var("clojure.zip", "root");
  const__63 = (java.lang.Integer)137;
  const__64 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__65 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "zips all the way up and returns the root node, reflecting any\n changes.", Keyword.intern(null, "line"), 137, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__66 = (clojure.lang.Var)RT.var("clojure.zip", "right");
  const__67 = (java.lang.Integer)149;
  const__68 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__69 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the right sibling of the node at this loc, or nil", Keyword.intern(null, "line"), 149, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__70 = (clojure.lang.Var)RT.var("clojure.zip", "rightmost");
  const__71 = (java.lang.Integer)157;
  const__72 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__73 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the rightmost sibling of the node at this loc, or self", Keyword.intern(null, "line"), 157, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__74 = (clojure.lang.Var)RT.var("clojure.zip", "left");
  const__75 = (java.lang.Integer)166;
  const__76 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__77 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the left sibling of the node at this loc, or nil", Keyword.intern(null, "line"), 166, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__78 = (clojure.lang.Var)RT.var("clojure.zip", "leftmost");
  const__79 = (java.lang.Integer)174;
  const__80 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__81 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns the loc of the leftmost sibling of the node at this loc, or self", Keyword.intern(null, "line"), 174, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__82 = (clojure.lang.Var)RT.var("clojure.zip", "insert-left");
  const__83 = (java.lang.Integer)183;
  const__84 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item"))));
  const__85 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Inserts the item as the left sibling of the node at this loc,\n without moving", Keyword.intern(null, "line"), 183, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__86 = (clojure.lang.Var)RT.var("clojure.zip", "insert-right");
  const__87 = (java.lang.Integer)193;
  const__88 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item"))));
  const__89 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Inserts the item as the right sibling of the node at this loc,\n  without moving", Keyword.intern(null, "line"), 193, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__90 = (clojure.lang.Var)RT.var("clojure.zip", "replace");
  const__91 = (java.lang.Integer)203;
  const__92 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "node"))));
  const__93 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "node")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Replaces the node at this loc, without moving", Keyword.intern(null, "line"), 203, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__94 = (clojure.lang.Var)RT.var("clojure.zip", "edit");
  const__95 = (java.lang.Integer)210;
  const__96 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__97 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Replaces the node at this loc with the value of (f node args)", Keyword.intern(null, "line"), 210, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__98 = (clojure.lang.Var)RT.var("clojure.zip", "insert-child");
  const__99 = (java.lang.Integer)216;
 }
 static void __init1() {
  const__100 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item"))));
  const__101 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Inserts the item as the leftmost child of the node at this loc,\n  without moving", Keyword.intern(null, "line"), 216, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__102 = (clojure.lang.Var)RT.var("clojure.zip", "append-child");
  const__103 = (java.lang.Integer)223;
  const__104 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item"))));
  const__105 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"), Symbol.intern(null, "item")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Inserts the item as the rightmost child of the node at this loc,\n  without moving", Keyword.intern(null, "line"), 223, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__106 = (clojure.lang.Var)RT.var("clojure.zip", "next");
  const__107 = (java.lang.Integer)230;
  const__108 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__109 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.", Keyword.intern(null, "line"), 230, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__110 = (clojure.lang.Var)RT.var("clojure.zip", "prev");
  const__111 = (java.lang.Integer)246;
  const__112 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__113 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.", Keyword.intern(null, "line"), 246, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__114 = (clojure.lang.Var)RT.var("clojure.zip", "end?");
  const__115 = (java.lang.Integer)258;
  const__116 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__117 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Returns true if loc represents the end of a depth-first walk", Keyword.intern(null, "line"), 258, Keyword.intern(null, "file"), "clojure/zip.clj");
  const__118 = (clojure.lang.Var)RT.var("clojure.zip", "remove");
  const__119 = (java.lang.Integer)264;
  const__120 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc"))));
  const__121 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "loc")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.0", Keyword.intern(null, "doc"), "Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.", Keyword.intern(null, "line"), 264, Keyword.intern(null, "file"), "clojure/zip.clj");
 }
 static {
  __init0();
  __init1();
  clojure.lang.Compiler.pushNSandLoader(clojure.zip__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
