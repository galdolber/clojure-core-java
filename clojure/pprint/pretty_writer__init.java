package clojure.pprint;

import clojure.lang.*;

public class pretty_writer__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((Namespace)RT.CURRENT_NS.deref()).importClass(clojure.lang.IDeref.class);
  ((Namespace)RT.CURRENT_NS.deref()).importClass(java.io.Writer.class);
  const__2.setMeta((IPersistentMap)const__9);
  const__10.setMeta((IPersistentMap)const__16);
  const__10.bindRoot(new clojure.pprint_getf());
  ((clojure.lang.Var)const__10).setMacro();
  const__17.setMeta((IPersistentMap)const__20);
  const__17.bindRoot(new clojure.pprint_setf());
  ((clojure.lang.Var)const__17).setMacro();
  const__21.setMeta((IPersistentMap)const__24);
  const__21.bindRoot(new clojure.pprint_deftype());
  ((clojure.lang.Var)const__21).setMacro();
  const__25.setMeta((IPersistentMap)const__27);
  const__25.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__29, const__30, const__31, const__32, const__33, const__34, const__35, const__36, const__37, const__38));
  const__39.setMeta((IPersistentMap)const__42);
  const__39.bindRoot(new clojure.pprint_ancestor_QMARK_());
  const__43.setMeta((IPersistentMap)const__45);
  const__43.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__29));
  const__46.setMeta((IPersistentMap)const__49);
  const__46.bindRoot(new clojure.pprint_buffer_length());
  const__50.setMeta((IPersistentMap)const__52);
  const__50.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__53, const__54, const__55, const__56, const__57));
  ((IFn)const__58.getRawRoot()).invoke(const__50, const__59.getRawRoot(), const__15, Boolean.TRUE);
  const__60.setMeta((IPersistentMap)const__62);
  const__60.bindRoot(new clojure.pprint_make_buffer_blob());
  const__63.setMeta((IPersistentMap)const__65);
  const__63.bindRoot(new clojure.pprint_buffer_blob_QMARK_());
  const__66.setMeta((IPersistentMap)const__68);
  const__66.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__53, const__69, const__70, const__56, const__57));
  ((IFn)const__58.getRawRoot()).invoke(const__66, const__59.getRawRoot(), const__15, Boolean.TRUE);
  const__71.setMeta((IPersistentMap)const__73);
  const__71.bindRoot(new clojure.pprint_make_nl_t());
  const__74.setMeta((IPersistentMap)const__76);
  const__74.bindRoot(new clojure.pprint_nl_t_QMARK_());
  const__77.setMeta((IPersistentMap)const__79);
  const__77.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__53, const__70, const__56, const__57));
  ((IFn)const__58.getRawRoot()).invoke(const__77, const__59.getRawRoot(), const__15, Boolean.TRUE);
  const__80.setMeta((IPersistentMap)const__82);
  const__80.bindRoot(new clojure.pprint_make_start_block_t());
  const__83.setMeta((IPersistentMap)const__85);
  const__83.bindRoot(new clojure.pprint_start_block_t_QMARK_());
  const__86.setMeta((IPersistentMap)const__88);
  const__86.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__53, const__70, const__56, const__57));
  ((IFn)const__58.getRawRoot()).invoke(const__86, const__59.getRawRoot(), const__15, Boolean.TRUE);
  const__89.setMeta((IPersistentMap)const__91);
  const__89.bindRoot(new clojure.pprint_make_end_block_t());
  const__92.setMeta((IPersistentMap)const__94);
  const__92.bindRoot(new clojure.pprint_end_block_t_QMARK_());
  const__95.setMeta((IPersistentMap)const__97);
  const__95.bindRoot(((IFn)const__28.getRawRoot()).invoke(const__53, const__70, const__98, const__99, const__56, const__57));
  ((IFn)const__58.getRawRoot()).invoke(const__95, const__59.getRawRoot(), const__15, Boolean.TRUE);
  const__100.setMeta((IPersistentMap)const__102);
  const__100.bindRoot(new clojure.pprint_make_indent_t());
  const__103.setMeta((IPersistentMap)const__105);
  const__103.bindRoot(new clojure.pprint_indent_t_QMARK_());
  const__106.setMeta((IPersistentMap)const__108);
  const__106.bindRoot(((IFn)const__109.getRawRoot()).invoke(new clojure.pprint_fn__7433()));
  const__110.setMeta((IPersistentMap)const__112);
  ((IFn)new clojure.pprint_fn__7437()).invoke();
  ((clojure.lang.MultiFn)const__113.getRawRoot()).addMethod(((java.lang.Object)const__114), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7443()));
  ((clojure.lang.MultiFn)const__113.getRawRoot()).addMethod(((java.lang.Object)const__115), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7449()));
  ((clojure.lang.MultiFn)const__113.getRawRoot()).addMethod(((java.lang.Object)const__116), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7453()));
  ((clojure.lang.MultiFn)const__113.getRawRoot()).addMethod(((java.lang.Object)const__117), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7458()));
  ((clojure.lang.MultiFn)const__113.getRawRoot()).addMethod(((java.lang.Object)const__118), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7460()));
  const__119.setMeta((IPersistentMap)const__122);
  const__119.bindRoot(new clojure.pprint_write_tokens());
  const__123.setMeta((IPersistentMap)const__126);
  const__123.bindRoot(new clojure.pprint_tokens_fit_QMARK_());
  const__127.setMeta((IPersistentMap)const__130);
  const__127.bindRoot(new clojure.pprint_linear_nl_QMARK_());
  const__131.setMeta((IPersistentMap)const__134);
  const__131.bindRoot(new clojure.pprint_miser_nl_QMARK_());
  ((IFn)new clojure.pprint_fn__7485()).invoke();
  ((clojure.lang.MultiFn)const__135.getRawRoot()).addMethod(((java.lang.Object)const__136), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7491()));
  ((clojure.lang.MultiFn)const__135.getRawRoot()).addMethod(((java.lang.Object)const__137), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7493()));
  ((clojure.lang.MultiFn)const__135.getRawRoot()).addMethod(((java.lang.Object)const__138), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7495()));
  ((clojure.lang.MultiFn)const__135.getRawRoot()).addMethod(((java.lang.Object)const__139), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7499()));
  const__140.setMeta((IPersistentMap)const__143);
  const__140.bindRoot(new clojure.pprint_get_section());
  const__144.setMeta((IPersistentMap)const__147);
  const__144.bindRoot(new clojure.pprint_get_sub_section());
  const__148.setMeta((IPersistentMap)const__151);
  const__148.bindRoot(new clojure.pprint_update_nl_state());
  const__110.setMeta((IPersistentMap)const__154);
  const__110.bindRoot(new clojure.pprint_emit_nl());
  const__155.setMeta((IPersistentMap)const__158);
  const__155.bindRoot(new clojure.pprint_split_at_newline());
  ((IFn)new clojure.pprint_fn__7522()).invoke();
  ((clojure.lang.MultiFn)const__159.getRawRoot()).addMethod(((java.lang.Object)const__118), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7526()));
  ((clojure.lang.MultiFn)const__159.getRawRoot()).addMethod(((java.lang.Object)const__117), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7528()));
  ((clojure.lang.MultiFn)const__159.getRawRoot()).addMethod(((java.lang.Object)const__160), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.pprint_fn__7530()));
  const__161.setMeta((IPersistentMap)const__164);
  const__161.bindRoot(new clojure.pprint_toks());
  const__165.setMeta((IPersistentMap)const__168);
  const__165.bindRoot(new clojure.pprint_write_token_string());
  const__169.setMeta((IPersistentMap)const__172);
  const__169.bindRoot(new clojure.pprint_write_line());
  const__173.setMeta((IPersistentMap)const__176);
  const__173.bindRoot(new clojure.pprint_add_to_buffer());
  const__177.setMeta((IPersistentMap)const__180);
  const__177.bindRoot(new clojure.pprint_write_buffered_output());
  const__181.setMeta((IPersistentMap)const__184);
  const__181.bindRoot(new clojure.pprint_write_white_space());
  const__185.setMeta((IPersistentMap)const__188);
  const__185.bindRoot(new clojure.pprint_write_initial_lines());
  const__189.setMeta((IPersistentMap)const__192);
  const__189.bindRoot(new clojure.pprint_p_write_char());
  const__193.setMeta((IPersistentMap)const__196);
  const__193.bindRoot(new clojure.pprint_pretty_writer());
  const__197.setMeta((IPersistentMap)const__200);
  const__197.bindRoot(new clojure.pprint_start_block());
  const__201.setMeta((IPersistentMap)const__204);
  const__201.bindRoot(new clojure.pprint_end_block());
  const__205.setMeta((IPersistentMap)const__208);
  const__205.bindRoot(new clojure.pprint_nl());
  const__209.setMeta((IPersistentMap)const__212);
  const__209.bindRoot(new clojure.pprint_indent());
  const__2.setMeta((IPersistentMap)const__215);
  const__2.bindRoot(new clojure.pprint_get_miser_width());
  const__216.setMeta((IPersistentMap)const__219);
  const__216.bindRoot(new clojure.pprint_set_miser_width());
  const__220.setMeta((IPersistentMap)const__223);
  const__220.bindRoot(new clojure.pprint_set_logical_block_callback());
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Var const__2;
 private static clojure.lang.Keyword const__3;
 private static clojure.lang.Keyword const__4;
 private static java.lang.Integer const__5;
 private static clojure.lang.Keyword const__6;
 private static java.lang.Integer const__7;
 private static clojure.lang.Keyword const__8;
 private static clojure.lang.IPersistentMap const__9;
 private static clojure.lang.Var const__10;
 private static java.lang.Integer const__11;
 private static clojure.lang.Keyword const__12;
 private static clojure.lang.IPersistentList const__13;
 private static clojure.lang.Keyword const__14;
 private static clojure.lang.Keyword const__15;
 private static clojure.lang.IPersistentMap const__16;
 private static clojure.lang.Var const__17;
 private static java.lang.Integer const__18;
 private static clojure.lang.IPersistentList const__19;
 private static clojure.lang.IPersistentMap const__20;
 private static clojure.lang.Var const__21;
 private static java.lang.Integer const__22;
 private static clojure.lang.IPersistentList const__23;
 private static clojure.lang.IPersistentMap const__24;
 private static clojure.lang.Var const__25;
 private static java.lang.Integer const__26;
 private static clojure.lang.IPersistentMap const__27;
 private static clojure.lang.Var const__28;
 private static clojure.lang.Keyword const__29;
 private static clojure.lang.Keyword const__30;
 private static clojure.lang.Keyword const__31;
 private static clojure.lang.Keyword const__32;
 private static clojure.lang.Keyword const__33;
 private static clojure.lang.Keyword const__34;
 private static clojure.lang.Keyword const__35;
 private static clojure.lang.Keyword const__36;
 private static clojure.lang.Keyword const__37;
 private static clojure.lang.Keyword const__38;
 private static clojure.lang.Var const__39;
 private static java.lang.Integer const__40;
 private static clojure.lang.IPersistentList const__41;
 private static clojure.lang.IPersistentMap const__42;
 private static clojure.lang.Var const__43;
 private static java.lang.Integer const__44;
 private static clojure.lang.IPersistentMap const__45;
 private static clojure.lang.Var const__46;
 private static java.lang.Integer const__47;
 private static clojure.lang.IPersistentList const__48;
 private static clojure.lang.IPersistentMap const__49;
 private static clojure.lang.Var const__50;
 private static java.lang.Integer const__51;
 private static clojure.lang.IPersistentMap const__52;
 private static clojure.lang.Keyword const__53;
 private static clojure.lang.Keyword const__54;
 private static clojure.lang.Keyword const__55;
 private static clojure.lang.Keyword const__56;
 private static clojure.lang.Keyword const__57;
 private static clojure.lang.Var const__58;
 private static clojure.lang.Var const__59;
 private static clojure.lang.Var const__60;
 private static clojure.lang.IPersistentList const__61;
 private static clojure.lang.IPersistentMap const__62;
 private static clojure.lang.Var const__63;
 private static clojure.lang.IPersistentList const__64;
 private static clojure.lang.IPersistentMap const__65;
 private static clojure.lang.Var const__66;
 private static java.lang.Integer const__67;
 private static clojure.lang.IPersistentMap const__68;
 private static clojure.lang.Keyword const__69;
 private static clojure.lang.Keyword const__70;
 private static clojure.lang.Var const__71;
 private static clojure.lang.IPersistentList const__72;
 private static clojure.lang.IPersistentMap const__73;
 private static clojure.lang.Var const__74;
 private static clojure.lang.IPersistentList const__75;
 private static clojure.lang.IPersistentMap const__76;
 private static clojure.lang.Var const__77;
 private static java.lang.Integer const__78;
 private static clojure.lang.IPersistentMap const__79;
 private static clojure.lang.Var const__80;
 private static clojure.lang.IPersistentList const__81;
 private static clojure.lang.IPersistentMap const__82;
 private static clojure.lang.Var const__83;
 private static clojure.lang.IPersistentList const__84;
 private static clojure.lang.IPersistentMap const__85;
 private static clojure.lang.Var const__86;
 private static java.lang.Integer const__87;
 private static clojure.lang.IPersistentMap const__88;
 private static clojure.lang.Var const__89;
 private static clojure.lang.IPersistentList const__90;
 private static clojure.lang.IPersistentMap const__91;
 private static clojure.lang.Var const__92;
 private static clojure.lang.IPersistentList const__93;
 private static clojure.lang.IPersistentMap const__94;
 private static clojure.lang.Var const__95;
 private static java.lang.Integer const__96;
 private static clojure.lang.IPersistentMap const__97;
 private static clojure.lang.Keyword const__98;
 private static clojure.lang.Keyword const__99;
 private static clojure.lang.Var const__100;
 private static clojure.lang.IPersistentList const__101;
 private static clojure.lang.IPersistentMap const__102;
 private static clojure.lang.Var const__103;
 private static clojure.lang.IPersistentList const__104;
 private static clojure.lang.IPersistentMap const__105;
 private static clojure.lang.Var const__106;
 private static java.lang.Integer const__107;
 private static clojure.lang.IPersistentMap const__108;
 private static clojure.lang.Var const__109;
 private static clojure.lang.Var const__110;
 private static java.lang.Integer const__111;
 private static clojure.lang.IPersistentMap const__112;
 private static clojure.lang.Var const__113;
 private static clojure.lang.Keyword const__114;
 private static clojure.lang.Keyword const__115;
 private static clojure.lang.Keyword const__116;
 private static clojure.lang.Keyword const__117;
 private static clojure.lang.Keyword const__118;
 private static clojure.lang.Var const__119;
 private static java.lang.Integer const__120;
 private static clojure.lang.IPersistentList const__121;
 private static clojure.lang.IPersistentMap const__122;
 private static clojure.lang.Var const__123;
 private static java.lang.Integer const__124;
 private static clojure.lang.IPersistentList const__125;
 private static clojure.lang.IPersistentMap const__126;
 private static clojure.lang.Var const__127;
 private static java.lang.Integer const__128;
 private static clojure.lang.IPersistentList const__129;
 private static clojure.lang.IPersistentMap const__130;
 private static clojure.lang.Var const__131;
 private static java.lang.Integer const__132;
 private static clojure.lang.IPersistentList const__133;
 private static clojure.lang.IPersistentMap const__134;
 private static clojure.lang.Var const__135;
 private static clojure.lang.Keyword const__136;
 private static clojure.lang.Keyword const__137;
 private static clojure.lang.Keyword const__138;
 private static clojure.lang.Keyword const__139;
 private static clojure.lang.Var const__140;
 private static java.lang.Integer const__141;
 private static clojure.lang.IPersistentList const__142;
 private static clojure.lang.IPersistentMap const__143;
 private static clojure.lang.Var const__144;
 private static java.lang.Integer const__145;
 private static clojure.lang.IPersistentList const__146;
 private static clojure.lang.IPersistentMap const__147;
 private static clojure.lang.Var const__148;
 private static java.lang.Integer const__149;
 private static clojure.lang.IPersistentList const__150;
 private static clojure.lang.IPersistentMap const__151;
 private static java.lang.Integer const__152;
 private static clojure.lang.IPersistentList const__153;
 private static clojure.lang.IPersistentMap const__154;
 private static clojure.lang.Var const__155;
 private static java.lang.Integer const__156;
 private static clojure.lang.IPersistentList const__157;
 private static clojure.lang.IPersistentMap const__158;
 private static clojure.lang.Var const__159;
 private static clojure.lang.Keyword const__160;
 private static clojure.lang.Var const__161;
 private static java.lang.Integer const__162;
 private static clojure.lang.IPersistentList const__163;
 private static clojure.lang.IPersistentMap const__164;
 private static clojure.lang.Var const__165;
 private static java.lang.Integer const__166;
 private static clojure.lang.IPersistentList const__167;
 private static clojure.lang.IPersistentMap const__168;
 private static clojure.lang.Var const__169;
 private static java.lang.Integer const__170;
 private static clojure.lang.IPersistentList const__171;
 private static clojure.lang.IPersistentMap const__172;
 private static clojure.lang.Var const__173;
 private static java.lang.Integer const__174;
 private static clojure.lang.IPersistentList const__175;
 private static clojure.lang.IPersistentMap const__176;
 private static clojure.lang.Var const__177;
 private static java.lang.Integer const__178;
 private static clojure.lang.IPersistentList const__179;
 private static clojure.lang.IPersistentMap const__180;
 private static clojure.lang.Var const__181;
 private static java.lang.Integer const__182;
 private static clojure.lang.IPersistentList const__183;
 private static clojure.lang.IPersistentMap const__184;
 private static clojure.lang.Var const__185;
 private static java.lang.Integer const__186;
 private static clojure.lang.IPersistentList const__187;
 private static clojure.lang.IPersistentMap const__188;
 private static clojure.lang.Var const__189;
 private static java.lang.Integer const__190;
 private static clojure.lang.IPersistentList const__191;
 private static clojure.lang.IPersistentMap const__192;
 private static clojure.lang.Var const__193;
 private static java.lang.Integer const__194;
 private static clojure.lang.IPersistentList const__195;
 private static clojure.lang.IPersistentMap const__196;
 private static clojure.lang.Var const__197;
 private static java.lang.Integer const__198;
 private static clojure.lang.IPersistentList const__199;
 private static clojure.lang.IPersistentMap const__200;
 private static clojure.lang.Var const__201;
 private static java.lang.Integer const__202;
 private static clojure.lang.IPersistentList const__203;
 private static clojure.lang.IPersistentMap const__204;
 private static clojure.lang.Var const__205;
 private static java.lang.Integer const__206;
 private static clojure.lang.IPersistentList const__207;
 private static clojure.lang.IPersistentMap const__208;
 private static clojure.lang.Var const__209;
 private static java.lang.Integer const__210;
 private static clojure.lang.IPersistentList const__211;
 private static clojure.lang.IPersistentMap const__212;
 private static java.lang.Integer const__213;
 private static clojure.lang.IPersistentList const__214;
 private static clojure.lang.IPersistentMap const__215;
 private static clojure.lang.Var const__216;
 private static java.lang.Integer const__217;
 private static clojure.lang.IPersistentList const__218;
 private static clojure.lang.IPersistentMap const__219;
 private static clojure.lang.Var const__220;
 private static java.lang.Integer const__221;
 private static clojure.lang.IPersistentList const__222;
 private static clojure.lang.IPersistentMap const__223;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.pprint");
  const__2 = (clojure.lang.Var)RT.var("clojure.pprint", "get-miser-width");
  const__3 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__5 = (java.lang.Integer)1;
  const__6 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__7 = (java.lang.Integer)30;
  const__8 = (clojure.lang.Keyword)Keyword.intern(null, "declared");
  const__9 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 30, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__10 = (clojure.lang.Var)RT.var("clojure.pprint", "getf");
  const__11 = (java.lang.Integer)37;
  const__12 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__13 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"))));
  const__14 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__15 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__16 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Get the value of the field a named by the argument (which should be a keyword).", Keyword.intern(null, "line"), 37, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__17 = (clojure.lang.Var)RT.var("clojure.pprint", "setf");
  const__18 = (java.lang.Integer)43;
  const__19 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"), Symbol.intern(null, "new-val"))));
  const__20 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "sym"), Symbol.intern(null, "new-val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 43, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__21 = (clojure.lang.Var)RT.var("clojure.pprint", "deftype");
  const__22 = (java.lang.Integer)48;
  const__23 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "type-name"), Symbol.intern(null, "&"), Symbol.intern(null, "fields"))));
  const__24 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "type-name"), Symbol.intern(null, "&"), Symbol.intern(null, "fields")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 48, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__25 = (clojure.lang.Var)RT.var("clojure.pprint", "logical-block");
  const__26 = (java.lang.Integer)62;
  const__27 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 62, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__28 = (clojure.lang.Var)RT.var("clojure.core", "create-struct");
  const__29 = (clojure.lang.Keyword)Keyword.intern(null, "parent");
  const__30 = (clojure.lang.Keyword)Keyword.intern(null, "section");
  const__31 = (clojure.lang.Keyword)Keyword.intern(null, "start-col");
  const__32 = (clojure.lang.Keyword)Keyword.intern(null, "indent");
  const__33 = (clojure.lang.Keyword)Keyword.intern(null, "done-nl");
  const__34 = (clojure.lang.Keyword)Keyword.intern(null, "intra-block-nl");
  const__35 = (clojure.lang.Keyword)Keyword.intern(null, "prefix");
  const__36 = (clojure.lang.Keyword)Keyword.intern(null, "per-line-prefix");
  const__37 = (clojure.lang.Keyword)Keyword.intern(null, "suffix");
  const__38 = (clojure.lang.Keyword)Keyword.intern(null, "logical-block-callback");
  const__39 = (clojure.lang.Var)RT.var("clojure.pprint", "ancestor?");
  const__40 = (java.lang.Integer)68;
  const__41 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child"))));
  const__42 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 68, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__43 = (clojure.lang.Var)RT.var("clojure.pprint", "section");
  const__44 = (java.lang.Integer)75;
  const__45 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 75, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__46 = (clojure.lang.Var)RT.var("clojure.pprint", "buffer-length");
  const__47 = (java.lang.Integer)77;
  const__48 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "l"))));
  const__49 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "l")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 77, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__50 = (clojure.lang.Var)RT.var("clojure.pprint", "buffer-blob");
  const__51 = (java.lang.Integer)84;
  const__52 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 84, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__53 = (clojure.lang.Keyword)Keyword.intern(null, "type-tag");
  const__54 = (clojure.lang.Keyword)Keyword.intern(null, "data");
  const__55 = (clojure.lang.Keyword)Keyword.intern(null, "trailing-white-space");
  const__56 = (clojure.lang.Keyword)Keyword.intern(null, "start-pos");
  const__57 = (clojure.lang.Keyword)Keyword.intern(null, "end-pos");
  const__58 = (clojure.lang.Var)RT.var("clojure.core", "alter-meta!");
  const__59 = (clojure.lang.Var)RT.var("clojure.core", "assoc");
  const__60 = (clojure.lang.Var)RT.var("clojure.pprint", "make-buffer-blob");
  const__61 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__"))));
  const__62 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 84, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__63 = (clojure.lang.Var)RT.var("clojure.pprint", "buffer-blob?");
  const__64 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__"))));
  const__65 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 84, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__66 = (clojure.lang.Var)RT.var("clojure.pprint", "nl-t");
  const__67 = (java.lang.Integer)87;
  const__68 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 87, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__69 = (clojure.lang.Keyword)Keyword.intern(null, "type");
  const__70 = (clojure.lang.Keyword)Keyword.intern(null, "logical-block");
  const__71 = (clojure.lang.Var)RT.var("clojure.pprint", "make-nl-t");
  const__72 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__"))));
  const__73 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 87, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__74 = (clojure.lang.Var)RT.var("clojure.pprint", "nl-t?");
  const__75 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__"))));
  const__76 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 87, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__77 = (clojure.lang.Var)RT.var("clojure.pprint", "start-block-t");
  const__78 = (java.lang.Integer)89;
  const__79 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 89, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__80 = (clojure.lang.Var)RT.var("clojure.pprint", "make-start-block-t");
  const__81 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__"))));
  const__82 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 89, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__83 = (clojure.lang.Var)RT.var("clojure.pprint", "start-block-t?");
  const__84 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__"))));
  const__85 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 89, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__86 = (clojure.lang.Var)RT.var("clojure.pprint", "end-block-t");
  const__87 = (java.lang.Integer)91;
  const__88 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 91, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__89 = (clojure.lang.Var)RT.var("clojure.pprint", "make-end-block-t");
  const__90 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__"))));
  const__91 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 91, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__92 = (clojure.lang.Var)RT.var("clojure.pprint", "end-block-t?");
  const__93 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__"))));
  const__94 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 91, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__95 = (clojure.lang.Var)RT.var("clojure.pprint", "indent-t");
  const__96 = (java.lang.Integer)93;
  const__97 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 93, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__98 = (clojure.lang.Keyword)Keyword.intern(null, "relative-to");
  const__99 = (clojure.lang.Keyword)Keyword.intern(null, "offset");
 }
 static void __init1() {
  const__100 = (clojure.lang.Var)RT.var("clojure.pprint", "make-indent-t");
  const__101 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__"))));
  const__102 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "vals__7418__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 93, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__103 = (clojure.lang.Var)RT.var("clojure.pprint", "indent-t?");
  const__104 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__"))));
  const__105 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x__7419__auto__")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 93, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__106 = (clojure.lang.Var)RT.var("clojure.pprint", "pp-newline");
  const__107 = (java.lang.Integer)99;
  const__108 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 99, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__109 = (clojure.lang.Var)RT.var("clojure.core", "memoize");
  const__110 = (clojure.lang.Var)RT.var("clojure.pprint", "emit-nl");
  const__111 = (java.lang.Integer)101;
  const__112 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 101, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__113 = (clojure.lang.Var)RT.var("clojure.pprint", "write-token");
  const__114 = (clojure.lang.Keyword)Keyword.intern(null, "start-block-t");
  const__115 = (clojure.lang.Keyword)Keyword.intern(null, "end-block-t");
  const__116 = (clojure.lang.Keyword)Keyword.intern(null, "indent-t");
  const__117 = (clojure.lang.Keyword)Keyword.intern(null, "buffer-blob");
  const__118 = (clojure.lang.Keyword)Keyword.intern(null, "nl-t");
  const__119 = (clojure.lang.Var)RT.var("clojure.pprint", "write-tokens");
  const__120 = (java.lang.Integer)141;
  const__121 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "tokens"), Symbol.intern(null, "force-trailing-whitespace"))));
  const__122 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "tokens"), Symbol.intern(null, "force-trailing-whitespace")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 141, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__123 = (clojure.lang.Var)RT.var("clojure.pprint", "tokens-fit?");
  const__124 = (java.lang.Integer)159;
  const__125 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "tokens"))));
  const__126 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "tokens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 159, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__127 = (clojure.lang.Var)RT.var("clojure.pprint", "linear-nl?");
  const__128 = (java.lang.Integer)166;
  const__129 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "lb"), Symbol.intern(null, "section"))));
  const__130 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "lb"), Symbol.intern(null, "section")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 166, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__131 = (clojure.lang.Var)RT.var("clojure.pprint", "miser-nl?");
  const__132 = (java.lang.Integer)171;
  const__133 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "lb"), Symbol.intern(null, "section"))));
  const__134 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "lb"), Symbol.intern(null, "section")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 171, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__135 = (clojure.lang.Var)RT.var("clojure.pprint", "emit-nl?");
  const__136 = (clojure.lang.Keyword)Keyword.intern(null, "linear");
  const__137 = (clojure.lang.Keyword)Keyword.intern(null, "miser");
  const__138 = (clojure.lang.Keyword)Keyword.intern(null, "fill");
  const__139 = (clojure.lang.Keyword)Keyword.intern(null, "mandatory");
  const__140 = (clojure.lang.Var)RT.var("clojure.pprint", "get-section");
  const__141 = (java.lang.Integer)202;
  const__142 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "buffer"))));
  const__143 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "buffer")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 202, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__144 = (clojure.lang.Var)RT.var("clojure.pprint", "get-sub-section");
  const__145 = (java.lang.Integer)209;
  const__146 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "buffer"))));
  const__147 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "buffer")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 209, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__148 = (clojure.lang.Var)RT.var("clojure.pprint", "update-nl-state");
  const__149 = (java.lang.Integer)217;
  const__150 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lb"))));
  const__151 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "lb")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 217, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__152 = (java.lang.Integer)227;
  const__153 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "nl"))));
  const__154 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "nl")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 227, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__155 = (clojure.lang.Var)RT.var("clojure.pprint", "split-at-newline");
  const__156 = (java.lang.Integer)239;
  const__157 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tokens"))));
  const__158 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "tokens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 239, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__159 = (clojure.lang.Var)RT.var("clojure.pprint", "tok");
  const__160 = (clojure.lang.Keyword)Keyword.intern(null, "default");
  const__161 = (clojure.lang.Var)RT.var("clojure.pprint", "toks");
  const__162 = (java.lang.Integer)252;
  const__163 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "toks"))));
  const__164 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "toks")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 252, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__165 = (clojure.lang.Var)RT.var("clojure.pprint", "write-token-string");
  const__166 = (java.lang.Integer)257;
  const__167 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "tokens"))));
  const__168 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "tokens")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 257, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__169 = (clojure.lang.Var)RT.var("clojure.pprint", "write-line");
  const__170 = (java.lang.Integer)287;
  const__171 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__172 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 287, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__173 = (clojure.lang.Var)RT.var("clojure.pprint", "add-to-buffer");
  const__174 = (java.lang.Integer)300;
  const__175 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "token"))));
  const__176 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "token")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 300, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__177 = (clojure.lang.Var)RT.var("clojure.pprint", "write-buffered-output");
  const__178 = (java.lang.Integer)308;
  const__179 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__180 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 308, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__181 = (clojure.lang.Var)RT.var("clojure.pprint", "write-white-space");
  const__182 = (java.lang.Integer)315;
  const__183 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__184 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 315, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__185 = (clojure.lang.Var)RT.var("clojure.pprint", "write-initial-lines");
  const__186 = (java.lang.Integer)324;
  const__187 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))));
  const__188 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 324, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__189 = (clojure.lang.Var)RT.var("clojure.pprint", "p-write-char");
  const__190 = (java.lang.Integer)351;
  const__191 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Integer"))))));
  const__192 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Integer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 351, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__193 = (clojure.lang.Var)RT.var("clojure.pprint", "pretty-writer");
  const__194 = (java.lang.Integer)370;
  const__195 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer"), Symbol.intern(null, "max-columns"), Symbol.intern(null, "miser-width"))));
  const__196 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer"), Symbol.intern(null, "max-columns"), Symbol.intern(null, "miser-width")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 370, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__197 = (clojure.lang.Var)RT.var("clojure.pprint", "start-block");
  const__198 = (java.lang.Integer)430;
  const__199 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "prefix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "per-line-prefix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "suffix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))));
 }
 static void __init2() {
  const__200 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), ((clojure.lang.IObj)Symbol.intern(null, "prefix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "per-line-prefix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), ((clojure.lang.IObj)Symbol.intern(null, "suffix")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 430, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__201 = (clojure.lang.Var)RT.var("clojure.pprint", "end-block");
  const__202 = (java.lang.Integer)452;
  const__203 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__204 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 452, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__205 = (clojure.lang.Var)RT.var("clojure.pprint", "nl");
  const__206 = (java.lang.Integer)468;
  const__207 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "type"))));
  const__208 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "type")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 468, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__209 = (clojure.lang.Var)RT.var("clojure.pprint", "indent");
  const__210 = (java.lang.Integer)474;
  const__211 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "relative-to"), Symbol.intern(null, "offset"))));
  const__212 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "relative-to"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 474, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__213 = (java.lang.Integer)487;
  const__214 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))))));
  const__215 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 487, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__216 = (clojure.lang.Var)RT.var("clojure.pprint", "set-miser-width");
  const__217 = (java.lang.Integer)490;
  const__218 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "new-miser-width"))));
  const__219 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "new-miser-width")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 490, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
  const__220 = (clojure.lang.Var)RT.var("clojure.pprint", "set-logical-block-callback");
  const__221 = (java.lang.Integer)493;
  const__222 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "f"))));
  const__223 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Writer"))), Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 493, Keyword.intern(null, "file"), "clojure/pprint/pretty_writer.clj");
 }
 static {
  __init0();
  __init1();
  __init2();
  clojure.lang.Compiler.pushNSandLoader(clojure.pprint.pretty_writer__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
