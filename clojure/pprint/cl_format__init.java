package clojure.pprint;

import clojure.lang.*;

public class cl_format__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  const__2.setMeta((IPersistentMap)const__9);
  const__10.setMeta((IPersistentMap)const__12);
  const__13.setMeta((IPersistentMap)const__15);
  const__16.setMeta((IPersistentMap)const__26);
  const__16.bindRoot(new clojure.pprint_cl_format());
  const__27.setDynamic(true);
  const__27.setMeta((IPersistentMap)const__31);
  const__27.bindRoot(null);
  const__32.setMeta((IPersistentMap)const__35);
  const__32.bindRoot(new clojure.pprint_format_error());
  const__36.setMeta((IPersistentMap)const__38);
  const__36.bindRoot(((IFn)const__39.getRawRoot()).invoke(const__40, const__41, const__42));
  const__13.setMeta((IPersistentMap)const__46);
  const__13.bindRoot(new clojure.pprint_init_navigator());
  const__47.setMeta((IPersistentMap)const__50);
  const__47.bindRoot(new clojure.pprint_next_arg());
  const__51.setMeta((IPersistentMap)const__54);
  const__51.bindRoot(new clojure.pprint_next_arg_or_nil());
  const__55.setMeta((IPersistentMap)const__58);
  const__55.bindRoot(new clojure.pprint_get_format_arg());
  const__59.setMeta((IPersistentMap)const__61);
  const__62.setMeta((IPersistentMap)const__65);
  const__62.bindRoot(new clojure.pprint_absolute_reposition());
  const__59.setMeta((IPersistentMap)const__68);
  const__59.bindRoot(new clojure.pprint_relative_reposition());
  const__69.setMeta((IPersistentMap)const__71);
  const__69.bindRoot(((IFn)const__39.getRawRoot()).invoke(const__72, const__73, const__74, const__75));
  const__76.setMeta((IPersistentMap)const__79);
  const__76.bindRoot(new clojure.pprint_realize_parameter());
  const__80.setMeta((IPersistentMap)const__83);
  const__80.bindRoot(new clojure.pprint_realize_parameter_list());
  const__84.setMeta((IPersistentMap)const__86);
  const__87.setMeta((IPersistentMap)const__89);
  const__87.bindRoot(const__93);
  const__94.setMeta((IPersistentMap)const__97);
  const__94.bindRoot(new clojure.pprint_format_simple_number());
  const__98.setMeta((IPersistentMap)const__101);
  const__98.bindRoot(new clojure.pprint_format_ascii());
  const__102.setMeta((IPersistentMap)const__105);
  const__102.bindRoot(new clojure.pprint_integral_QMARK_());
  const__106.setMeta((IPersistentMap)const__109);
  const__106.bindRoot(new clojure.pprint_remainders());
  const__110.setMeta((IPersistentMap)const__113);
  const__110.bindRoot(new clojure.pprint_base_str());
  const__114.setMeta((IPersistentMap)const__116);
  const__114.bindRoot(const__118);
  const__84.setMeta((IPersistentMap)const__121);
  const__84.bindRoot(new clojure.pprint_opt_base_str());
  const__122.setMeta((IPersistentMap)const__125);
  const__122.bindRoot(new clojure.pprint_group_by_STAR_());
  const__126.setMeta((IPersistentMap)const__129);
  const__126.bindRoot(new clojure.pprint_format_integer());
  const__130.setMeta((IPersistentMap)const__132);
  const__130.bindRoot(const__133);
  const__134.setMeta((IPersistentMap)const__136);
  const__134.bindRoot(const__137);
  const__138.setMeta((IPersistentMap)const__140);
  const__138.bindRoot(const__141);
  const__142.setMeta((IPersistentMap)const__144);
  const__142.bindRoot(const__145);
  const__146.setMeta((IPersistentMap)const__148);
  const__146.bindRoot(const__149);
  const__150.setMeta((IPersistentMap)const__153);
  const__150.bindRoot(new clojure.pprint_format_simple_cardinal());
  const__154.setMeta((IPersistentMap)const__157);
  const__154.bindRoot(new clojure.pprint_add_english_scales());
  const__158.setMeta((IPersistentMap)const__161);
  const__158.bindRoot(new clojure.pprint_format_cardinal_english());
  const__162.setMeta((IPersistentMap)const__165);
  const__162.bindRoot(new clojure.pprint_format_simple_ordinal());
  const__166.setMeta((IPersistentMap)const__169);
  const__166.bindRoot(new clojure.pprint_format_ordinal_english());
  const__170.setMeta((IPersistentMap)const__172);
  const__170.bindRoot(const__177);
  const__178.setMeta((IPersistentMap)const__180);
  const__178.bindRoot(const__185);
  const__186.setMeta((IPersistentMap)const__189);
  const__186.bindRoot(new clojure.pprint_format_roman());
  const__190.setMeta((IPersistentMap)const__193);
  const__190.bindRoot(new clojure.pprint_format_old_roman());
  const__194.setMeta((IPersistentMap)const__197);
  const__194.bindRoot(new clojure.pprint_format_new_roman());
  const__198.setMeta((IPersistentMap)const__200);
  const__198.bindRoot(const__204);
  const__205.setMeta((IPersistentMap)const__208);
  const__205.bindRoot(new clojure.pprint_pretty_character());
  const__209.setMeta((IPersistentMap)const__212);
  const__209.bindRoot(new clojure.pprint_readable_character());
  const__213.setMeta((IPersistentMap)const__216);
  const__213.bindRoot(new clojure.pprint_plain_character());
  const__217.setMeta((IPersistentMap)const__220);
  const__217.bindRoot(new clojure.pprint_abort_QMARK_());
  const__221.setMeta((IPersistentMap)const__224);
  const__221.bindRoot(new clojure.pprint_execute_sub_format());
  const__225.setMeta((IPersistentMap)const__228);
  const__225.bindRoot(new clojure.pprint_float_parts_base());
  const__229.setMeta((IPersistentMap)const__232);
  const__229.bindRoot(new clojure.pprint_float_parts());
  const__233.setMeta((IPersistentMap)const__238);
  const__233.bindRoot(new clojure.pprint_inc_s());
  const__239.setMeta((IPersistentMap)const__242);
  const__239.bindRoot(new clojure.pprint_round_str());
  const__243.setMeta((IPersistentMap)const__246);
  const__243.bindRoot(new clojure.pprint_expand_fixed());
  const__247.setMeta((IPersistentMap)const__250);
  const__247.bindRoot(new clojure.pprint_insert_decimal());
  const__251.setMeta((IPersistentMap)const__254);
  const__251.bindRoot(new clojure.pprint_get_fixed());
  const__255.setMeta((IPersistentMap)const__258);
  const__255.bindRoot(new clojure.pprint_insert_scaled_decimal());
  const__259.setMeta((IPersistentMap)const__262);
  const__259.bindRoot(new clojure.pprint_convert_ratio());
  const__263.setMeta((IPersistentMap)const__266);
  const__263.bindRoot(new clojure.pprint_fixed_float());
  const__267.setMeta((IPersistentMap)const__270);
  const__267.bindRoot(new clojure.pprint_exponential_float());
  const__271.setMeta((IPersistentMap)const__274);
  const__271.bindRoot(new clojure.pprint_general_float());
  const__275.setMeta((IPersistentMap)const__278);
  const__275.bindRoot(new clojure.pprint_dollar_float());
  const__279.setMeta((IPersistentMap)const__282);
  const__279.bindRoot(new clojure.pprint_choice_conditional());
  const__283.setMeta((IPersistentMap)const__286);
  const__283.bindRoot(new clojure.pprint_boolean_conditional());
  const__287.setMeta((IPersistentMap)const__290);
  const__287.bindRoot(new clojure.pprint_check_arg_conditional());
  const__291.setMeta((IPersistentMap)const__294);
  const__291.bindRoot(new clojure.pprint_iterate_sublist());
  const__295.setMeta((IPersistentMap)const__298);
  const__295.bindRoot(new clojure.pprint_iterate_list_of_sublists());
  const__299.setMeta((IPersistentMap)const__302);
  const__299.bindRoot(new clojure.pprint_iterate_main_list());
  const__303.setMeta((IPersistentMap)const__306);
  const__303.bindRoot(new clojure.pprint_iterate_main_sublists());
  const__307.setMeta((IPersistentMap)const__309);
  const__310.setMeta((IPersistentMap)const__312);
  const__313.setMeta((IPersistentMap)const__316);
  const__313.bindRoot(new clojure.pprint_logical_block_or_justify());
  const__317.setMeta((IPersistentMap)const__320);
  const__317.bindRoot(new clojure.pprint_render_clauses());
  const__310.setMeta((IPersistentMap)const__323);
  const__310.bindRoot(new clojure.pprint_justify_clauses());
  const__324.setMeta((IPersistentMap)const__327);
  const__324.bindRoot(new clojure.pprint_downcase_writer());
  const__328.setMeta((IPersistentMap)const__331);
  const__328.bindRoot(new clojure.pprint_upcase_writer());
  const__332.setMeta((IPersistentMap)const__335);
  const__332.bindRoot(new clojure.pprint_capitalize_string());
  const__336.setMeta((IPersistentMap)const__339);
  const__336.bindRoot(new clojure.pprint_capitalize_word_writer());
  const__340.setMeta((IPersistentMap)const__343);
  const__340.bindRoot(new clojure.pprint_init_cap_writer());
  const__344.setMeta((IPersistentMap)const__347);
  const__344.bindRoot(new clojure.pprint_modify_case());
  const__348.setMeta((IPersistentMap)const__351);
  const__348.bindRoot(new clojure.pprint_get_pretty_writer());
  const__352.setMeta((IPersistentMap)const__355);
  const__352.bindRoot(new clojure.pprint_fresh_line());
  const__356.setMeta((IPersistentMap)const__359);
  const__356.bindRoot(new clojure.pprint_absolute_tabulation());
  const__360.setMeta((IPersistentMap)const__363);
  const__360.bindRoot(new clojure.pprint_relative_tabulation());
  const__307.setMeta((IPersistentMap)const__366);
  const__307.bindRoot(new clojure.pprint_format_logical_block());
  const__367.setMeta((IPersistentMap)const__370);
  const__367.bindRoot(new clojure.pprint_set_indent());
  const__371.setMeta((IPersistentMap)const__374);
  const__371.bindRoot(new clojure.pprint_conditional_newline());
  const__375.setMeta((IPersistentMap)const__378);
  const__375.bindRoot(new clojure.pprint_process_directive_table_element());
  const__379.setMeta((IPersistentMap)const__382);
  const__379.bindRoot(new clojure.pprint_defdirectives());
  ((clojure.lang.Var)const__379).setMacro();
  const__383.setMeta((IPersistentMap)const__385);
  const__383.bindRoot(((IFn)const__386.getRawRoot()).invoke(const__387, RT.mapUniqueKeys(const__388, const__387, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__393, const__394, const__396, const__397, const__398, const__399, const__402), const__403, const__407, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7974()), const__410, RT.mapUniqueKeys(const__388, const__410, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__411, const__394, const__412, const__397, const__413, const__399, const__414), const__403, const__415, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7978()), const__416, RT.mapUniqueKeys(const__388, const__416, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__417, const__399, const__418, const__419, const__421, const__422, const__424), const__403, const__425, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7982()), const__426, RT.mapUniqueKeys(const__388, const__426, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__427, const__399, const__428, const__419, const__429, const__422, const__430), const__403, const__431, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7986()), const__432, RT.mapUniqueKeys(const__388, const__432, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__433, const__399, const__434, const__419, const__435, const__422, const__436), const__403, const__437, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7990()), const__438, RT.mapUniqueKeys(const__388, const__438, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__439, const__399, const__440, const__419, const__441, const__422, const__442), const__403, const__443, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7994()), const__444, RT.mapUniqueKeys(const__388, const__444, const__74, ((IFn)const__389.getRawRoot()).invoke(const__445, const__446, const__390, const__447, const__399, const__448, const__419, const__449, const__422, const__450), const__403, const__451, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__7998()), const__452, RT.mapUniqueKeys(const__388, const__452, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__453, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8011()), const__454, RT.mapUniqueKeys(const__388, const__454, const__74, ((IFn)const__389.getRawRoot()).invoke(const__455, const__456), const__403, const__457, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8016()), const__458, RT.mapUniqueKeys(const__388, const__458, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__460, const__461, const__462, const__463, const__464, const__465, const__466, const__399, const__467), const__403, const__468, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8018()), const__469, RT.mapUniqueKeys(const__388, const__469, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__470, const__461, const__471, const__472, const__473, const__463, const__474, const__465, const__475, const__399, const__476, const__477, const__478), const__403, const__479, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8020()), const__480, RT.mapUniqueKeys(const__388, const__480, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__481, const__461, const__482, const__472, const__483, const__463, const__484, const__465, const__485, const__399, const__486, const__477, const__487), const__403, const__488, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8022()), const__489, RT.mapUniqueKeys(const__388, const__489, const__74, ((IFn)const__389.getRawRoot()).invoke(const__461, const__490, const__491, const__492, const__459, const__493, const__399, const__494), const__403, const__495, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8024()), const__496, RT.mapUniqueKeys(const__388, const__496, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__498), const__403, clojure.lang.PersistentHashSet.EMPTY, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8026()), const__499, RT.mapUniqueKeys(const__388, const__499, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__500), const__403, const__502, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8031()), const__503, RT.mapUniqueKeys(const__388, const__503, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__504), const__403, clojure.lang.PersistentHashSet.EMPTY, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8036()), const__505, RT.mapUniqueKeys(const__388, const__505, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__506), const__403, clojure.lang.PersistentHashSet.EMPTY, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8041()), const__507, RT.mapUniqueKeys(const__388, const__507, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__508, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8045()), const__509, RT.mapUniqueKeys(const__388, const__509, const__74, ((IFn)const__389.getRawRoot()).invoke(const__510, const__511, const__394, const__512), const__403, const__513, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8049()), const__514, RT.mapUniqueKeys(const__388, const__514, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__515), const__403, const__516, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8055()), const__517, RT.mapUniqueKeys(const__388, const__517, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__518, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8059()), const__519, RT.mapUniqueKeys(const__388, const__519, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__520, const__408, const__525, const__409, new clojure.pprint_fn__8068()), const__522, RT.mapUniqueKeys(const__388, const__522, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, clojure.lang.PersistentHashSet.EMPTY, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8073()), const__526, RT.mapUniqueKeys(const__388, const__526, const__74, ((IFn)const__389.getRawRoot()).invoke(const__527, const__528), const__403, const__529, const__408, const__532, const__409, new clojure.pprint_fn__8075()), const__533, RT.mapUniqueKeys(const__388, const__533, const__74, ((IFn)const__389.getRawRoot()).invoke(const__534, const__535, const__536, const__537), const__403, const__538, const__408, const__540, const__409, new clojure.pprint_fn__8077()), const__530, RT.mapUniqueKeys(const__388, const__530, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, clojure.lang.PersistentHashSet.EMPTY, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8079()), const__541, RT.mapUniqueKeys(const__388, const__541, const__74, ((IFn)const__389.getRawRoot()).invoke(const__542, const__543), const__403, const__544, const__408, const__546, const__409, new clojure.pprint_fn__8081()), const__545, RT.mapUniqueKeys(const__388, const__545, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__547, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8084()), const__548, RT.mapUniqueKeys(const__388, const__548, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__549, const__394, const__550, const__397, const__551, const__399, const__552), const__403, const__553, const__408, const__556, const__409, new clojure.pprint_fn__8086()), const__554, RT.mapUniqueKeys(const__388, const__554, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__557, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8088()), const__558, RT.mapUniqueKeys(const__388, const__558, const__74, ((IFn)const__389.getRawRoot()).invoke(const__559, const__560, const__561, const__562, const__563, const__564), const__403, const__565, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8090()), const__566, RT.mapUniqueKeys(const__388, const__566, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__567, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8097()), const__568, RT.mapUniqueKeys(const__388, const__568, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__569, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8106()), const__570, RT.mapUniqueKeys(const__388, const__570, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__571), const__403, const__572, const__408, clojure.lang.PersistentArrayMap.EMPTY, const__409, new clojure.pprint_fn__8108())));
  const__573.setMeta((IPersistentMap)const__575);
  const__573.bindRoot(const__576);
  const__577.setMeta((IPersistentMap)const__579);
  const__577.bindRoot(const__582);
  const__583.setMeta((IPersistentMap)const__586);
  const__583.bindRoot(new clojure.pprint_extract_param());
  const__587.setMeta((IPersistentMap)const__590);
  const__587.bindRoot(new clojure.pprint_extract_params());
  const__591.setMeta((IPersistentMap)const__594);
  const__591.bindRoot(new clojure.pprint_translate_param());
  const__595.setMeta((IPersistentMap)const__597);
  const__595.bindRoot(const__600);
  const__601.setMeta((IPersistentMap)const__604);
  const__601.bindRoot(new clojure.pprint_extract_flags());
  const__605.setMeta((IPersistentMap)const__608);
  const__605.bindRoot(new clojure.pprint_check_flags());
  const__609.setMeta((IPersistentMap)const__612);
  const__609.bindRoot(new clojure.pprint_map_params());
  const__613.setMeta((IPersistentMap)const__616);
  const__613.bindRoot(new clojure.pprint_compile_directive());
  const__617.setMeta((IPersistentMap)const__620);
  const__617.bindRoot(new clojure.pprint_compile_raw_string());
  const__621.setMeta((IPersistentMap)const__624);
  const__621.bindRoot(new clojure.pprint_right_bracket());
  const__625.setMeta((IPersistentMap)const__628);
  const__625.bindRoot(new clojure.pprint_separator_QMARK_());
  const__629.setMeta((IPersistentMap)const__632);
  const__629.bindRoot(new clojure.pprint_else_separator_QMARK_());
  const__633.setMeta((IPersistentMap)const__635);
  const__636.setMeta((IPersistentMap)const__639);
  const__636.bindRoot(new clojure.pprint_process_bracket());
  const__640.setMeta((IPersistentMap)const__643);
  const__640.bindRoot(new clojure.pprint_process_clause());
  const__633.setMeta((IPersistentMap)const__646);
  const__633.bindRoot(new clojure.pprint_collect_clauses());
  const__647.setMeta((IPersistentMap)const__650);
  const__647.bindRoot(new clojure.pprint_process_nesting());
  const__2.setMeta((IPersistentMap)const__653);
  const__2.bindRoot(new clojure.pprint_compile_format());
  const__654.setMeta((IPersistentMap)const__657);
  const__654.bindRoot(new clojure.pprint_needs_pretty());
  const__10.setMeta((IPersistentMap)const__660);
  const__10.bindRoot(new clojure.pprint_execute_format());
  const__661.setMeta((IPersistentMap)const__663);
  const__661.bindRoot(((IFn)const__664.getRawRoot()).invoke(const__2.getRawRoot()));
  const__665.setMeta((IPersistentMap)const__668);
  const__665.bindRoot(new clojure.pprint_formatter());
  ((clojure.lang.Var)const__665).setMacro();
  const__669.setMeta((IPersistentMap)const__672);
  const__669.bindRoot(new clojure.pprint_formatter_out());
  ((clojure.lang.Var)const__669).setMacro();
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Var const__2;
 private static clojure.lang.Keyword const__3;
 private static clojure.lang.Keyword const__4;
 private static java.lang.Integer const__5;
 private static clojure.lang.Keyword const__6;
 private static java.lang.Integer const__7;
 private static clojure.lang.Keyword const__8;
 private static clojure.lang.IPersistentMap const__9;
 private static clojure.lang.Var const__10;
 private static java.lang.Integer const__11;
 private static clojure.lang.IPersistentMap const__12;
 private static clojure.lang.Var const__13;
 private static java.lang.Integer const__14;
 private static clojure.lang.IPersistentMap const__15;
 private static clojure.lang.Var const__16;
 private static java.lang.Integer const__17;
 private static clojure.lang.Keyword const__18;
 private static clojure.lang.IPersistentList const__19;
 private static clojure.lang.Keyword const__20;
 private static clojure.lang.PersistentVector const__21;
 private static clojure.lang.PersistentVector const__22;
 private static clojure.lang.PersistentVector const__23;
 private static clojure.lang.Keyword const__24;
 private static clojure.lang.Keyword const__25;
 private static clojure.lang.IPersistentMap const__26;
 private static clojure.lang.Var const__27;
 private static java.lang.Integer const__28;
 private static clojure.lang.Keyword const__29;
 private static clojure.lang.Keyword const__30;
 private static clojure.lang.IPersistentMap const__31;
 private static clojure.lang.Var const__32;
 private static java.lang.Integer const__33;
 private static clojure.lang.IPersistentList const__34;
 private static clojure.lang.IPersistentMap const__35;
 private static clojure.lang.Var const__36;
 private static java.lang.Integer const__37;
 private static clojure.lang.IPersistentMap const__38;
 private static clojure.lang.Var const__39;
 private static clojure.lang.Keyword const__40;
 private static clojure.lang.Keyword const__41;
 private static clojure.lang.Keyword const__42;
 private static java.lang.Integer const__43;
 private static clojure.lang.IPersistentList const__44;
 private static clojure.lang.Keyword const__45;
 private static clojure.lang.IPersistentMap const__46;
 private static clojure.lang.Var const__47;
 private static java.lang.Integer const__48;
 private static clojure.lang.IPersistentList const__49;
 private static clojure.lang.IPersistentMap const__50;
 private static clojure.lang.Var const__51;
 private static java.lang.Integer const__52;
 private static clojure.lang.IPersistentList const__53;
 private static clojure.lang.IPersistentMap const__54;
 private static clojure.lang.Var const__55;
 private static java.lang.Integer const__56;
 private static clojure.lang.IPersistentList const__57;
 private static clojure.lang.IPersistentMap const__58;
 private static clojure.lang.Var const__59;
 private static java.lang.Integer const__60;
 private static clojure.lang.IPersistentMap const__61;
 private static clojure.lang.Var const__62;
 private static java.lang.Integer const__63;
 private static clojure.lang.IPersistentList const__64;
 private static clojure.lang.IPersistentMap const__65;
 private static java.lang.Integer const__66;
 private static clojure.lang.IPersistentList const__67;
 private static clojure.lang.IPersistentMap const__68;
 private static clojure.lang.Var const__69;
 private static java.lang.Integer const__70;
 private static clojure.lang.IPersistentMap const__71;
 private static clojure.lang.Keyword const__72;
 private static clojure.lang.Keyword const__73;
 private static clojure.lang.Keyword const__74;
 private static clojure.lang.Keyword const__75;
 private static clojure.lang.Var const__76;
 private static java.lang.Integer const__77;
 private static clojure.lang.IPersistentList const__78;
 private static clojure.lang.IPersistentMap const__79;
 private static clojure.lang.Var const__80;
 private static java.lang.Integer const__81;
 private static clojure.lang.IPersistentList const__82;
 private static clojure.lang.IPersistentMap const__83;
 private static clojure.lang.Var const__84;
 private static java.lang.Integer const__85;
 private static clojure.lang.IPersistentMap const__86;
 private static clojure.lang.Var const__87;
 private static java.lang.Integer const__88;
 private static clojure.lang.IPersistentMap const__89;
 private static java.lang.Long const__90;
 private static java.lang.Long const__91;
 private static java.lang.Long const__92;
 private static clojure.lang.IPersistentMap const__93;
 private static clojure.lang.Var const__94;
 private static java.lang.Integer const__95;
 private static clojure.lang.IPersistentList const__96;
 private static clojure.lang.IPersistentMap const__97;
 private static clojure.lang.Var const__98;
 private static java.lang.Integer const__99;
 private static clojure.lang.IPersistentList const__100;
 private static clojure.lang.IPersistentMap const__101;
 private static clojure.lang.Var const__102;
 private static java.lang.Integer const__103;
 private static clojure.lang.IPersistentList const__104;
 private static clojure.lang.IPersistentMap const__105;
 private static clojure.lang.Var const__106;
 private static java.lang.Integer const__107;
 private static clojure.lang.IPersistentList const__108;
 private static clojure.lang.IPersistentMap const__109;
 private static clojure.lang.Var const__110;
 private static java.lang.Integer const__111;
 private static clojure.lang.IPersistentList const__112;
 private static clojure.lang.IPersistentMap const__113;
 private static clojure.lang.Var const__114;
 private static java.lang.Integer const__115;
 private static clojure.lang.IPersistentMap const__116;
 private static java.lang.Long const__117;
 private static clojure.lang.IPersistentMap const__118;
 private static java.lang.Integer const__119;
 private static clojure.lang.IPersistentList const__120;
 private static clojure.lang.IPersistentMap const__121;
 private static clojure.lang.Var const__122;
 private static java.lang.Integer const__123;
 private static clojure.lang.IPersistentList const__124;
 private static clojure.lang.IPersistentMap const__125;
 private static clojure.lang.Var const__126;
 private static java.lang.Integer const__127;
 private static clojure.lang.IPersistentList const__128;
 private static clojure.lang.IPersistentMap const__129;
 private static clojure.lang.Var const__130;
 private static java.lang.Integer const__131;
 private static clojure.lang.IPersistentMap const__132;
 private static clojure.lang.PersistentVector const__133;
 private static clojure.lang.Var const__134;
 private static java.lang.Integer const__135;
 private static clojure.lang.IPersistentMap const__136;
 private static clojure.lang.PersistentVector const__137;
 private static clojure.lang.Var const__138;
 private static java.lang.Integer const__139;
 private static clojure.lang.IPersistentMap const__140;
 private static clojure.lang.PersistentVector const__141;
 private static clojure.lang.Var const__142;
 private static java.lang.Integer const__143;
 private static clojure.lang.IPersistentMap const__144;
 private static clojure.lang.PersistentVector const__145;
 private static clojure.lang.Var const__146;
 private static java.lang.Integer const__147;
 private static clojure.lang.IPersistentMap const__148;
 private static clojure.lang.PersistentVector const__149;
 private static clojure.lang.Var const__150;
 private static java.lang.Integer const__151;
 private static clojure.lang.IPersistentList const__152;
 private static clojure.lang.IPersistentMap const__153;
 private static clojure.lang.Var const__154;
 private static java.lang.Integer const__155;
 private static clojure.lang.IPersistentList const__156;
 private static clojure.lang.IPersistentMap const__157;
 private static clojure.lang.Var const__158;
 private static java.lang.Integer const__159;
 private static clojure.lang.IPersistentList const__160;
 private static clojure.lang.IPersistentMap const__161;
 private static clojure.lang.Var const__162;
 private static java.lang.Integer const__163;
 private static clojure.lang.IPersistentList const__164;
 private static clojure.lang.IPersistentMap const__165;
 private static clojure.lang.Var const__166;
 private static java.lang.Integer const__167;
 private static clojure.lang.IPersistentList const__168;
 private static clojure.lang.IPersistentMap const__169;
 private static clojure.lang.Var const__170;
 private static java.lang.Integer const__171;
 private static clojure.lang.IPersistentMap const__172;
 private static clojure.lang.PersistentVector const__173;
 private static clojure.lang.PersistentVector const__174;
 private static clojure.lang.PersistentVector const__175;
 private static clojure.lang.PersistentVector const__176;
 private static clojure.lang.PersistentVector const__177;
 private static clojure.lang.Var const__178;
 private static java.lang.Integer const__179;
 private static clojure.lang.IPersistentMap const__180;
 private static clojure.lang.PersistentVector const__181;
 private static clojure.lang.PersistentVector const__182;
 private static clojure.lang.PersistentVector const__183;
 private static clojure.lang.PersistentVector const__184;
 private static clojure.lang.PersistentVector const__185;
 private static clojure.lang.Var const__186;
 private static java.lang.Integer const__187;
 private static clojure.lang.IPersistentList const__188;
 private static clojure.lang.IPersistentMap const__189;
 private static clojure.lang.Var const__190;
 private static java.lang.Integer const__191;
 private static clojure.lang.IPersistentList const__192;
 private static clojure.lang.IPersistentMap const__193;
 private static clojure.lang.Var const__194;
 private static java.lang.Integer const__195;
 private static clojure.lang.IPersistentList const__196;
 private static clojure.lang.IPersistentMap const__197;
 private static clojure.lang.Var const__198;
 private static java.lang.Integer const__199;
 private static clojure.lang.IPersistentMap const__200;
 private static java.lang.Long const__201;
 private static java.lang.Long const__202;
 private static java.lang.Long const__203;
 private static clojure.lang.IPersistentMap const__204;
 private static clojure.lang.Var const__205;
 private static java.lang.Integer const__206;
 private static clojure.lang.IPersistentList const__207;
 private static clojure.lang.IPersistentMap const__208;
 private static clojure.lang.Var const__209;
 private static java.lang.Integer const__210;
 private static clojure.lang.IPersistentList const__211;
 private static clojure.lang.IPersistentMap const__212;
 private static clojure.lang.Var const__213;
 private static java.lang.Integer const__214;
 private static clojure.lang.IPersistentList const__215;
 private static clojure.lang.IPersistentMap const__216;
 private static clojure.lang.Var const__217;
 private static java.lang.Integer const__218;
 private static clojure.lang.IPersistentList const__219;
 private static clojure.lang.IPersistentMap const__220;
 private static clojure.lang.Var const__221;
 private static java.lang.Integer const__222;
 private static clojure.lang.IPersistentList const__223;
 private static clojure.lang.IPersistentMap const__224;
 private static clojure.lang.Var const__225;
 private static java.lang.Integer const__226;
 private static clojure.lang.IPersistentList const__227;
 private static clojure.lang.IPersistentMap const__228;
 private static clojure.lang.Var const__229;
 private static java.lang.Integer const__230;
 private static clojure.lang.IPersistentList const__231;
 private static clojure.lang.IPersistentMap const__232;
 private static clojure.lang.Var const__233;
 private static java.lang.Integer const__234;
 private static clojure.lang.IPersistentList const__235;
 private static clojure.lang.Keyword const__236;
 private static java.lang.Class const__237;
 private static clojure.lang.IPersistentMap const__238;
 private static clojure.lang.Var const__239;
 private static java.lang.Integer const__240;
 private static clojure.lang.IPersistentList const__241;
 private static clojure.lang.IPersistentMap const__242;
 private static clojure.lang.Var const__243;
 private static java.lang.Integer const__244;
 private static clojure.lang.IPersistentList const__245;
 private static clojure.lang.IPersistentMap const__246;
 private static clojure.lang.Var const__247;
 private static java.lang.Integer const__248;
 private static clojure.lang.IPersistentList const__249;
 private static clojure.lang.IPersistentMap const__250;
 private static clojure.lang.Var const__251;
 private static java.lang.Integer const__252;
 private static clojure.lang.IPersistentList const__253;
 private static clojure.lang.IPersistentMap const__254;
 private static clojure.lang.Var const__255;
 private static java.lang.Integer const__256;
 private static clojure.lang.IPersistentList const__257;
 private static clojure.lang.IPersistentMap const__258;
 private static clojure.lang.Var const__259;
 private static java.lang.Integer const__260;
 private static clojure.lang.IPersistentList const__261;
 private static clojure.lang.IPersistentMap const__262;
 private static clojure.lang.Var const__263;
 private static java.lang.Integer const__264;
 private static clojure.lang.IPersistentList const__265;
 private static clojure.lang.IPersistentMap const__266;
 private static clojure.lang.Var const__267;
 private static java.lang.Integer const__268;
 private static clojure.lang.IPersistentList const__269;
 private static clojure.lang.IPersistentMap const__270;
 private static clojure.lang.Var const__271;
 private static java.lang.Integer const__272;
 private static clojure.lang.IPersistentList const__273;
 private static clojure.lang.IPersistentMap const__274;
 private static clojure.lang.Var const__275;
 private static java.lang.Integer const__276;
 private static clojure.lang.IPersistentList const__277;
 private static clojure.lang.IPersistentMap const__278;
 private static clojure.lang.Var const__279;
 private static java.lang.Integer const__280;
 private static clojure.lang.IPersistentList const__281;
 private static clojure.lang.IPersistentMap const__282;
 private static clojure.lang.Var const__283;
 private static java.lang.Integer const__284;
 private static clojure.lang.IPersistentList const__285;
 private static clojure.lang.IPersistentMap const__286;
 private static clojure.lang.Var const__287;
 private static java.lang.Integer const__288;
 private static clojure.lang.IPersistentList const__289;
 private static clojure.lang.IPersistentMap const__290;
 private static clojure.lang.Var const__291;
 private static java.lang.Integer const__292;
 private static clojure.lang.IPersistentList const__293;
 private static clojure.lang.IPersistentMap const__294;
 private static clojure.lang.Var const__295;
 private static java.lang.Integer const__296;
 private static clojure.lang.IPersistentList const__297;
 private static clojure.lang.IPersistentMap const__298;
 private static clojure.lang.Var const__299;
 private static java.lang.Integer const__300;
 private static clojure.lang.IPersistentList const__301;
 private static clojure.lang.IPersistentMap const__302;
 private static clojure.lang.Var const__303;
 private static java.lang.Integer const__304;
 private static clojure.lang.IPersistentList const__305;
 private static clojure.lang.IPersistentMap const__306;
 private static clojure.lang.Var const__307;
 private static java.lang.Integer const__308;
 private static clojure.lang.IPersistentMap const__309;
 private static clojure.lang.Var const__310;
 private static java.lang.Integer const__311;
 private static clojure.lang.IPersistentMap const__312;
 private static clojure.lang.Var const__313;
 private static java.lang.Integer const__314;
 private static clojure.lang.IPersistentList const__315;
 private static clojure.lang.IPersistentMap const__316;
 private static clojure.lang.Var const__317;
 private static java.lang.Integer const__318;
 private static clojure.lang.IPersistentList const__319;
 private static clojure.lang.IPersistentMap const__320;
 private static java.lang.Integer const__321;
 private static clojure.lang.IPersistentList const__322;
 private static clojure.lang.IPersistentMap const__323;
 private static clojure.lang.Var const__324;
 private static java.lang.Integer const__325;
 private static clojure.lang.IPersistentList const__326;
 private static clojure.lang.IPersistentMap const__327;
 private static clojure.lang.Var const__328;
 private static java.lang.Integer const__329;
 private static clojure.lang.IPersistentList const__330;
 private static clojure.lang.IPersistentMap const__331;
 private static clojure.lang.Var const__332;
 private static java.lang.Integer const__333;
 private static clojure.lang.IPersistentList const__334;
 private static clojure.lang.IPersistentMap const__335;
 private static clojure.lang.Var const__336;
 private static java.lang.Integer const__337;
 private static clojure.lang.IPersistentList const__338;
 private static clojure.lang.IPersistentMap const__339;
 private static clojure.lang.Var const__340;
 private static java.lang.Integer const__341;
 private static clojure.lang.IPersistentList const__342;
 private static clojure.lang.IPersistentMap const__343;
 private static clojure.lang.Var const__344;
 private static java.lang.Integer const__345;
 private static clojure.lang.IPersistentList const__346;
 private static clojure.lang.IPersistentMap const__347;
 private static clojure.lang.Var const__348;
 private static java.lang.Integer const__349;
 private static clojure.lang.IPersistentList const__350;
 private static clojure.lang.IPersistentMap const__351;
 private static clojure.lang.Var const__352;
 private static java.lang.Integer const__353;
 private static clojure.lang.IPersistentList const__354;
 private static clojure.lang.IPersistentMap const__355;
 private static clojure.lang.Var const__356;
 private static java.lang.Integer const__357;
 private static clojure.lang.IPersistentList const__358;
 private static clojure.lang.IPersistentMap const__359;
 private static clojure.lang.Var const__360;
 private static java.lang.Integer const__361;
 private static clojure.lang.IPersistentList const__362;
 private static clojure.lang.IPersistentMap const__363;
 private static java.lang.Integer const__364;
 private static clojure.lang.IPersistentList const__365;
 private static clojure.lang.IPersistentMap const__366;
 private static clojure.lang.Var const__367;
 private static java.lang.Integer const__368;
 private static clojure.lang.IPersistentList const__369;
 private static clojure.lang.IPersistentMap const__370;
 private static clojure.lang.Var const__371;
 private static java.lang.Integer const__372;
 private static clojure.lang.IPersistentList const__373;
 private static clojure.lang.IPersistentMap const__374;
 private static clojure.lang.Var const__375;
 private static java.lang.Integer const__376;
 private static clojure.lang.IPersistentList const__377;
 private static clojure.lang.IPersistentMap const__378;
 private static clojure.lang.Var const__379;
 private static java.lang.Integer const__380;
 private static clojure.lang.IPersistentList const__381;
 private static clojure.lang.IPersistentMap const__382;
 private static clojure.lang.Var const__383;
 private static java.lang.Integer const__384;
 private static clojure.lang.IPersistentMap const__385;
 private static clojure.lang.Var const__386;
 private static java.lang.Character const__387;
 private static clojure.lang.Keyword const__388;
 private static clojure.lang.Var const__389;
 private static clojure.lang.Keyword const__390;
 private static java.lang.Long const__391;
 private static java.lang.Class const__392;
 private static clojure.lang.PersistentVector const__393;
 private static clojure.lang.Keyword const__394;
 private static java.lang.Long const__395;
 private static clojure.lang.PersistentVector const__396;
 private static clojure.lang.Keyword const__397;
 private static clojure.lang.PersistentVector const__398;
 private static clojure.lang.Keyword const__399;
 private static java.lang.Character const__400;
 private static java.lang.Class const__401;
 private static clojure.lang.PersistentVector const__402;
 private static clojure.lang.Keyword const__403;
 private static clojure.lang.Keyword const__404;
 private static clojure.lang.Keyword const__405;
 private static clojure.lang.Keyword const__406;
 private static clojure.lang.PersistentHashSet const__407;
 private static clojure.lang.Keyword const__408;
 private static clojure.lang.Keyword const__409;
 private static java.lang.Character const__410;
 private static clojure.lang.PersistentVector const__411;
 private static clojure.lang.PersistentVector const__412;
 private static clojure.lang.PersistentVector const__413;
 private static clojure.lang.PersistentVector const__414;
 private static clojure.lang.PersistentHashSet const__415;
 private static java.lang.Character const__416;
 private static clojure.lang.PersistentVector const__417;
 private static clojure.lang.PersistentVector const__418;
 private static clojure.lang.Keyword const__419;
 private static java.lang.Character const__420;
 private static clojure.lang.PersistentVector const__421;
 private static clojure.lang.Keyword const__422;
 private static java.lang.Long const__423;
 private static clojure.lang.PersistentVector const__424;
 private static clojure.lang.PersistentHashSet const__425;
 private static java.lang.Character const__426;
 private static clojure.lang.PersistentVector const__427;
 private static clojure.lang.PersistentVector const__428;
 private static clojure.lang.PersistentVector const__429;
 private static clojure.lang.PersistentVector const__430;
 private static clojure.lang.PersistentHashSet const__431;
 private static java.lang.Character const__432;
 private static clojure.lang.PersistentVector const__433;
 private static clojure.lang.PersistentVector const__434;
 private static clojure.lang.PersistentVector const__435;
 private static clojure.lang.PersistentVector const__436;
 private static clojure.lang.PersistentHashSet const__437;
 private static java.lang.Character const__438;
 private static clojure.lang.PersistentVector const__439;
 private static clojure.lang.PersistentVector const__440;
 private static clojure.lang.PersistentVector const__441;
 private static clojure.lang.PersistentVector const__442;
 private static clojure.lang.PersistentHashSet const__443;
 private static java.lang.Character const__444;
 private static clojure.lang.Keyword const__445;
 private static clojure.lang.PersistentVector const__446;
 private static clojure.lang.PersistentVector const__447;
 private static clojure.lang.PersistentVector const__448;
 private static clojure.lang.PersistentVector const__449;
 private static clojure.lang.PersistentVector const__450;
 private static clojure.lang.PersistentHashSet const__451;
 private static java.lang.Character const__452;
 private static clojure.lang.PersistentHashSet const__453;
 private static java.lang.Character const__454;
 private static clojure.lang.Keyword const__455;
 private static clojure.lang.PersistentVector const__456;
 private static clojure.lang.PersistentHashSet const__457;
 private static java.lang.Character const__458;
 private static clojure.lang.Keyword const__459;
 private static clojure.lang.PersistentVector const__460;
 private static clojure.lang.Keyword const__461;
 private static clojure.lang.PersistentVector const__462;
 private static clojure.lang.Keyword const__463;
 private static clojure.lang.PersistentVector const__464;
 private static clojure.lang.Keyword const__465;
 private static clojure.lang.PersistentVector const__466;
 private static clojure.lang.PersistentVector const__467;
 private static clojure.lang.PersistentHashSet const__468;
 private static java.lang.Character const__469;
 private static clojure.lang.PersistentVector const__470;
 private static clojure.lang.PersistentVector const__471;
 private static clojure.lang.Keyword const__472;
 private static clojure.lang.PersistentVector const__473;
 private static clojure.lang.PersistentVector const__474;
 private static clojure.lang.PersistentVector const__475;
 private static clojure.lang.PersistentVector const__476;
 private static clojure.lang.Keyword const__477;
 private static clojure.lang.PersistentVector const__478;
 private static clojure.lang.PersistentHashSet const__479;
 private static java.lang.Character const__480;
 private static clojure.lang.PersistentVector const__481;
 private static clojure.lang.PersistentVector const__482;
 private static clojure.lang.PersistentVector const__483;
 private static clojure.lang.PersistentVector const__484;
 private static clojure.lang.PersistentVector const__485;
 private static clojure.lang.PersistentVector const__486;
 private static clojure.lang.PersistentVector const__487;
 private static clojure.lang.PersistentHashSet const__488;
 private static java.lang.Character const__489;
 private static clojure.lang.PersistentVector const__490;
 private static clojure.lang.Keyword const__491;
 private static clojure.lang.PersistentVector const__492;
 private static clojure.lang.PersistentVector const__493;
 private static clojure.lang.PersistentVector const__494;
 private static clojure.lang.PersistentHashSet const__495;
 private static java.lang.Character const__496;
 private static clojure.lang.Keyword const__497;
 private static clojure.lang.PersistentVector const__498;
 private static java.lang.Character const__499;
 private static clojure.lang.PersistentVector const__500;
 private static clojure.lang.Keyword const__501;
 private static clojure.lang.PersistentHashSet const__502;
 private static java.lang.Character const__503;
 private static clojure.lang.PersistentVector const__504;
 private static java.lang.Character const__505;
 private static clojure.lang.PersistentVector const__506;
 private static java.lang.Character const__507;
 private static clojure.lang.PersistentHashSet const__508;
 private static java.lang.Character const__509;
 private static clojure.lang.Keyword const__510;
 private static clojure.lang.PersistentVector const__511;
 private static clojure.lang.PersistentVector const__512;
 private static clojure.lang.PersistentHashSet const__513;
 private static java.lang.Character const__514;
 private static clojure.lang.PersistentVector const__515;
 private static clojure.lang.PersistentHashSet const__516;
 private static java.lang.Character const__517;
 private static clojure.lang.PersistentHashSet const__518;
 private static java.lang.Character const__519;
 private static clojure.lang.PersistentHashSet const__520;
 private static clojure.lang.Keyword const__521;
 private static java.lang.Character const__522;
 private static clojure.lang.Keyword const__523;
 private static clojure.lang.Keyword const__524;
 private static clojure.lang.IPersistentMap const__525;
 private static java.lang.Character const__526;
 private static clojure.lang.Keyword const__527;
 private static clojure.lang.PersistentVector const__528;
 private static clojure.lang.PersistentHashSet const__529;
 private static java.lang.Character const__530;
 private static clojure.lang.Keyword const__531;
 private static clojure.lang.IPersistentMap const__532;
 private static java.lang.Character const__533;
 private static clojure.lang.Keyword const__534;
 private static clojure.lang.PersistentVector const__535;
 private static clojure.lang.Keyword const__536;
 private static clojure.lang.PersistentVector const__537;
 private static clojure.lang.PersistentHashSet const__538;
 private static clojure.lang.Keyword const__539;
 private static clojure.lang.IPersistentMap const__540;
 private static java.lang.Character const__541;
 private static clojure.lang.Keyword const__542;
 private static clojure.lang.PersistentVector const__543;
 private static clojure.lang.PersistentHashSet const__544;
 private static java.lang.Character const__545;
 private static clojure.lang.IPersistentMap const__546;
 private static clojure.lang.PersistentHashSet const__547;
 private static java.lang.Character const__548;
 private static clojure.lang.PersistentVector const__549;
 private static clojure.lang.PersistentVector const__550;
 private static clojure.lang.PersistentVector const__551;
 private static clojure.lang.PersistentVector const__552;
 private static clojure.lang.PersistentHashSet const__553;
 private static java.lang.Character const__554;
 private static clojure.lang.Keyword const__555;
 private static clojure.lang.IPersistentMap const__556;
 private static clojure.lang.PersistentHashSet const__557;
 private static java.lang.Character const__558;
 private static clojure.lang.Keyword const__559;
 private static clojure.lang.PersistentVector const__560;
 private static clojure.lang.Keyword const__561;
 private static clojure.lang.PersistentVector const__562;
 private static clojure.lang.Keyword const__563;
 private static clojure.lang.PersistentVector const__564;
 private static clojure.lang.PersistentHashSet const__565;
 private static java.lang.Character const__566;
 private static clojure.lang.PersistentHashSet const__567;
 private static java.lang.Character const__568;
 private static clojure.lang.PersistentHashSet const__569;
 private static java.lang.Character const__570;
 private static clojure.lang.PersistentVector const__571;
 private static clojure.lang.PersistentHashSet const__572;
 private static clojure.lang.Var const__573;
 private static java.lang.Integer const__574;
 private static clojure.lang.IPersistentMap const__575;
 private static java.util.regex.Pattern const__576;
 private static clojure.lang.Var const__577;
 private static java.lang.Integer const__578;
 private static clojure.lang.IPersistentMap const__579;
 private static clojure.lang.Keyword const__580;
 private static clojure.lang.Keyword const__581;
 private static clojure.lang.PersistentHashSet const__582;
 private static clojure.lang.Var const__583;
 private static java.lang.Integer const__584;
 private static clojure.lang.IPersistentList const__585;
 private static clojure.lang.IPersistentMap const__586;
 private static clojure.lang.Var const__587;
 private static java.lang.Integer const__588;
 private static clojure.lang.IPersistentList const__589;
 private static clojure.lang.IPersistentMap const__590;
 private static clojure.lang.Var const__591;
 private static java.lang.Integer const__592;
 private static clojure.lang.IPersistentList const__593;
 private static clojure.lang.IPersistentMap const__594;
 private static clojure.lang.Var const__595;
 private static java.lang.Integer const__596;
 private static clojure.lang.IPersistentMap const__597;
 private static java.lang.Character const__598;
 private static java.lang.Character const__599;
 private static clojure.lang.IPersistentMap const__600;
 private static clojure.lang.Var const__601;
 private static java.lang.Integer const__602;
 private static clojure.lang.IPersistentList const__603;
 private static clojure.lang.IPersistentMap const__604;
 private static clojure.lang.Var const__605;
 private static java.lang.Integer const__606;
 private static clojure.lang.IPersistentList const__607;
 private static clojure.lang.IPersistentMap const__608;
 private static clojure.lang.Var const__609;
 private static java.lang.Integer const__610;
 private static clojure.lang.IPersistentList const__611;
 private static clojure.lang.IPersistentMap const__612;
 private static clojure.lang.Var const__613;
 private static java.lang.Integer const__614;
 private static clojure.lang.IPersistentList const__615;
 private static clojure.lang.IPersistentMap const__616;
 private static clojure.lang.Var const__617;
 private static java.lang.Integer const__618;
 private static clojure.lang.IPersistentList const__619;
 private static clojure.lang.IPersistentMap const__620;
 private static clojure.lang.Var const__621;
 private static java.lang.Integer const__622;
 private static clojure.lang.IPersistentList const__623;
 private static clojure.lang.IPersistentMap const__624;
 private static clojure.lang.Var const__625;
 private static java.lang.Integer const__626;
 private static clojure.lang.IPersistentList const__627;
 private static clojure.lang.IPersistentMap const__628;
 private static clojure.lang.Var const__629;
 private static java.lang.Integer const__630;
 private static clojure.lang.IPersistentList const__631;
 private static clojure.lang.IPersistentMap const__632;
 private static clojure.lang.Var const__633;
 private static java.lang.Integer const__634;
 private static clojure.lang.IPersistentMap const__635;
 private static clojure.lang.Var const__636;
 private static java.lang.Integer const__637;
 private static clojure.lang.IPersistentList const__638;
 private static clojure.lang.IPersistentMap const__639;
 private static clojure.lang.Var const__640;
 private static java.lang.Integer const__641;
 private static clojure.lang.IPersistentList const__642;
 private static clojure.lang.IPersistentMap const__643;
 private static java.lang.Integer const__644;
 private static clojure.lang.IPersistentList const__645;
 private static clojure.lang.IPersistentMap const__646;
 private static clojure.lang.Var const__647;
 private static java.lang.Integer const__648;
 private static clojure.lang.IPersistentList const__649;
 private static clojure.lang.IPersistentMap const__650;
 private static java.lang.Integer const__651;
 private static clojure.lang.IPersistentList const__652;
 private static clojure.lang.IPersistentMap const__653;
 private static clojure.lang.Var const__654;
 private static java.lang.Integer const__655;
 private static clojure.lang.IPersistentList const__656;
 private static clojure.lang.IPersistentMap const__657;
 private static java.lang.Integer const__658;
 private static clojure.lang.IPersistentList const__659;
 private static clojure.lang.IPersistentMap const__660;
 private static clojure.lang.Var const__661;
 private static java.lang.Integer const__662;
 private static clojure.lang.IPersistentMap const__663;
 private static clojure.lang.Var const__664;
 private static clojure.lang.Var const__665;
 private static java.lang.Integer const__666;
 private static clojure.lang.IPersistentList const__667;
 private static clojure.lang.IPersistentMap const__668;
 private static clojure.lang.Var const__669;
 private static java.lang.Integer const__670;
 private static clojure.lang.IPersistentList const__671;
 private static clojure.lang.IPersistentMap const__672;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.pprint");
  const__2 = (clojure.lang.Var)RT.var("clojure.pprint", "compile-format");
  const__3 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__5 = (java.lang.Integer)1;
  const__6 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__7 = (java.lang.Integer)22;
  const__8 = (clojure.lang.Keyword)Keyword.intern(null, "declared");
  const__9 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 22, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__10 = (clojure.lang.Var)RT.var("clojure.pprint", "execute-format");
  const__11 = (java.lang.Integer)23;
  const__12 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 23, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__13 = (clojure.lang.Var)RT.var("clojure.pprint", "init-navigator");
  const__14 = (java.lang.Integer)24;
  const__15 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 24, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__16 = (clojure.lang.Var)RT.var("clojure.pprint", "cl-format");
  const__17 = (java.lang.Integer)27;
  const__18 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__19 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer"), Symbol.intern(null, "format-in"), Symbol.intern(null, "&"), Symbol.intern(null, "args"))));
  const__20 = (clojure.lang.Keyword)Keyword.intern(null, "see-also");
  const__21 = (clojure.lang.PersistentVector)RT.vector("http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000", "Common Lisp the Language");
  const__22 = (clojure.lang.PersistentVector)RT.vector("http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", "Common Lisp HyperSpec");
  const__23 = (clojure.lang.PersistentVector)RT.vector(RT.vector("http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000", "Common Lisp the Language"), RT.vector("http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", "Common Lisp HyperSpec"));
  const__24 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__25 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__26 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer"), Symbol.intern(null, "format-in"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "see-also"), RT.vector(RT.vector("http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000", "Common Lisp the Language"), RT.vector("http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", "Common Lisp HyperSpec")), Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) \nand in the Common Lisp HyperSpec at \nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\n", Keyword.intern(null, "line"), 27, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__27 = (clojure.lang.Var)RT.var("clojure.pprint", "*format-str*");
  const__28 = (java.lang.Integer)66;
  const__29 = (clojure.lang.Keyword)Keyword.intern(null, "dynamic");
  const__30 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__31 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "dynamic"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 66, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__32 = (clojure.lang.Var)RT.var("clojure.pprint", "format-error");
  const__33 = (java.lang.Integer)68;
  const__34 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "offset"))));
  const__35 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "message"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 68, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__36 = (clojure.lang.Var)RT.var("clojure.pprint", "arg-navigator");
  const__37 = (java.lang.Integer)79;
  const__38 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 79, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__39 = (clojure.lang.Var)RT.var("clojure.core", "create-struct");
  const__40 = (clojure.lang.Keyword)Keyword.intern(null, "seq");
  const__41 = (clojure.lang.Keyword)Keyword.intern(null, "rest");
  const__42 = (clojure.lang.Keyword)Keyword.intern(null, "pos");
  const__43 = (java.lang.Integer)82;
  const__44 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__45 = (clojure.lang.Keyword)Keyword.intern(null, "skip-wiki");
  const__46 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "skip-wiki"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Create a new arg-navigator from the sequence with the position set to 0", Keyword.intern(null, "line"), 82, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__47 = (clojure.lang.Var)RT.var("clojure.pprint", "next-arg");
  const__48 = (java.lang.Integer)90;
  const__49 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"))));
  const__50 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 90, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__51 = (clojure.lang.Var)RT.var("clojure.pprint", "next-arg-or-nil");
  const__52 = (java.lang.Integer)96;
  const__53 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"))));
  const__54 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 96, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__55 = (clojure.lang.Var)RT.var("clojure.pprint", "get-format-arg");
  const__56 = (java.lang.Integer)103;
  const__57 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"))));
  const__58 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 103, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__59 = (clojure.lang.Var)RT.var("clojure.pprint", "relative-reposition");
  const__60 = (java.lang.Integer)110;
  const__61 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 110, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__62 = (clojure.lang.Var)RT.var("clojure.pprint", "absolute-reposition");
  const__63 = (java.lang.Integer)112;
  const__64 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"), Symbol.intern(null, "position"))));
  const__65 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"), Symbol.intern(null, "position")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 112, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__66 = (java.lang.Integer)117;
  const__67 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"), Symbol.intern(null, "position"))));
  const__68 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "navigator"), Symbol.intern(null, "position")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 117, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__69 = (clojure.lang.Var)RT.var("clojure.pprint", "compiled-directive");
  const__70 = (java.lang.Integer)123;
  const__71 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 123, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__72 = (clojure.lang.Keyword)Keyword.intern(null, "func");
  const__73 = (clojure.lang.Keyword)Keyword.intern(null, "def");
  const__74 = (clojure.lang.Keyword)Keyword.intern(null, "params");
  const__75 = (clojure.lang.Keyword)Keyword.intern(null, "offset");
  const__76 = (clojure.lang.Var)RT.var("clojure.pprint", "realize-parameter");
  const__77 = (java.lang.Integer)134;
  const__78 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "param"), RT.vector(Symbol.intern(null, "raw-val"), Symbol.intern(null, "offset"))), Symbol.intern(null, "navigator"))));
  const__79 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "param"), RT.vector(Symbol.intern(null, "raw-val"), Symbol.intern(null, "offset"))), Symbol.intern(null, "navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 134, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__80 = (clojure.lang.Var)RT.var("clojure.pprint", "realize-parameter-list");
  const__81 = (java.lang.Integer)150;
  const__82 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parameter-map"), Symbol.intern(null, "navigator"))));
  const__83 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parameter-map"), Symbol.intern(null, "navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 150, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__84 = (clojure.lang.Var)RT.var("clojure.pprint", "opt-base-str");
  const__85 = (java.lang.Integer)163;
  const__86 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 163, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__87 = (clojure.lang.Var)RT.var("clojure.pprint", "special-radix-markers");
  const__88 = (java.lang.Integer)165;
  const__89 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 165, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__90 = (java.lang.Long)2L;
  const__91 = (java.lang.Long)8L;
  const__92 = (java.lang.Long)16L;
  const__93 = (clojure.lang.IPersistentMap)RT.map(2L, "#b", 8L, "#o", 16L, "#x");
  const__94 = (clojure.lang.Var)RT.var("clojure.pprint", "format-simple-number");
  const__95 = (java.lang.Integer)168;
  const__96 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n"))));
  const__97 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 168, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__98 = (clojure.lang.Var)RT.var("clojure.pprint", "format-ascii");
  const__99 = (java.lang.Integer)182;
 }
 static void __init1() {
  const__100 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "print-func"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets"))));
  const__101 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "print-func"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 182, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__102 = (clojure.lang.Var)RT.var("clojure.pprint", "integral?");
  const__103 = (java.lang.Integer)205;
  const__104 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__105 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "returns true if a number is actually an integer (that is, has no fractional part)", Keyword.intern(null, "line"), 205, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__106 = (clojure.lang.Var)RT.var("clojure.pprint", "remainders");
  const__107 = (java.lang.Integer)216;
  const__108 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val"))));
  const__109 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return the list of remainders (essentially the 'digits') of val in the given base", Keyword.intern(null, "line"), 216, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__110 = (clojure.lang.Var)RT.var("clojure.pprint", "base-str");
  const__111 = (java.lang.Integer)227;
  const__112 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val"))));
  const__113 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return val as a string in the given base", Keyword.intern(null, "line"), 227, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__114 = (clojure.lang.Var)RT.var("clojure.pprint", "java-base-formats");
  const__115 = (java.lang.Integer)242;
  const__116 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 242, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__117 = (java.lang.Long)10L;
  const__118 = (clojure.lang.IPersistentMap)RT.map(8L, "%o", 10L, "%d", 16L, "%x");
  const__119 = (java.lang.Integer)245;
  const__120 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val"))));
  const__121 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "val")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Return val as a string in the given base, using clojure.core/format if supported\nfor improved performance", Keyword.intern(null, "line"), 245, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__122 = (clojure.lang.Var)RT.var("clojure.pprint", "group-by*");
  const__123 = (java.lang.Integer)254;
  const__124 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "unit"), Symbol.intern(null, "lis"))));
  const__125 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "unit"), Symbol.intern(null, "lis")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 254, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__126 = (clojure.lang.Var)RT.var("clojure.pprint", "format-integer");
  const__127 = (java.lang.Integer)259;
  const__128 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets"))));
  const__129 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "base"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 259, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__130 = (clojure.lang.Var)RT.var("clojure.pprint", "english-cardinal-units");
  const__131 = (java.lang.Integer)289;
  const__132 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 289, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__133 = (clojure.lang.PersistentVector)RT.vector("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen");
  const__134 = (clojure.lang.Var)RT.var("clojure.pprint", "english-ordinal-units");
  const__135 = (java.lang.Integer)295;
  const__136 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 295, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__137 = (clojure.lang.PersistentVector)RT.vector("zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth");
  const__138 = (clojure.lang.Var)RT.var("clojure.pprint", "english-cardinal-tens");
  const__139 = (java.lang.Integer)301;
  const__140 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 301, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__141 = (clojure.lang.PersistentVector)RT.vector("", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety");
  const__142 = (clojure.lang.Var)RT.var("clojure.pprint", "english-ordinal-tens");
  const__143 = (java.lang.Integer)305;
  const__144 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 305, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__145 = (clojure.lang.PersistentVector)RT.vector("", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth");
  const__146 = (clojure.lang.Var)RT.var("clojure.pprint", "english-scale-numbers");
  const__147 = (java.lang.Integer)314;
  const__148 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 314, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__149 = (clojure.lang.PersistentVector)RT.vector("", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion", "undecillion", "duodecillion", "tredecillion", "quattuordecillion", "quindecillion", "sexdecillion", "septendecillion", "octodecillion", "novemdecillion", "vigintillion");
  const__150 = (clojure.lang.Var)RT.var("clojure.pprint", "format-simple-cardinal");
  const__151 = (java.lang.Integer)322;
  const__152 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"))));
  const__153 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Convert a number less than 1000 to a cardinal english string", Keyword.intern(null, "line"), 322, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__154 = (clojure.lang.Var)RT.var("clojure.pprint", "add-english-scales");
  const__155 = (java.lang.Integer)340;
  const__156 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parts"), Symbol.intern(null, "offset"))));
  const__157 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "parts"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\noffset is a factor of 10^3 to multiply by", Keyword.intern(null, "line"), 340, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__158 = (clojure.lang.Var)RT.var("clojure.pprint", "format-cardinal-english");
  const__159 = (java.lang.Integer)363;
  const__160 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__161 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 363, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__162 = (clojure.lang.Var)RT.var("clojure.pprint", "format-simple-ordinal");
  const__163 = (java.lang.Integer)380;
  const__164 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"))));
  const__165 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Convert a number less than 1000 to a ordinal english string\nNote this should only be used for the last one in the sequence", Keyword.intern(null, "line"), 380, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__166 = (clojure.lang.Var)RT.var("clojure.pprint", "format-ordinal-english");
  const__167 = (java.lang.Integer)402;
  const__168 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__169 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 402, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__170 = (clojure.lang.Var)RT.var("clojure.pprint", "old-roman-table");
  const__171 = (java.lang.Integer)439;
  const__172 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 439, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__173 = (clojure.lang.PersistentVector)RT.vector("I", "II", "III", "IIII", "V", "VI", "VII", "VIII", "VIIII");
  const__174 = (clojure.lang.PersistentVector)RT.vector("X", "XX", "XXX", "XXXX", "L", "LX", "LXX", "LXXX", "LXXXX");
  const__175 = (clojure.lang.PersistentVector)RT.vector("C", "CC", "CCC", "CCCC", "D", "DC", "DCC", "DCCC", "DCCCC");
  const__176 = (clojure.lang.PersistentVector)RT.vector("M", "MM", "MMM");
  const__177 = (clojure.lang.PersistentVector)RT.vector(RT.vector("I", "II", "III", "IIII", "V", "VI", "VII", "VIII", "VIIII"), RT.vector("X", "XX", "XXX", "XXXX", "L", "LX", "LXX", "LXXX", "LXXXX"), RT.vector("C", "CC", "CCC", "CCCC", "D", "DC", "DCC", "DCCC", "DCCCC"), RT.vector("M", "MM", "MMM"));
  const__178 = (clojure.lang.Var)RT.var("clojure.pprint", "new-roman-table");
  const__179 = (java.lang.Integer)446;
  const__180 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 446, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__181 = (clojure.lang.PersistentVector)RT.vector("I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX");
  const__182 = (clojure.lang.PersistentVector)RT.vector("X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC");
  const__183 = (clojure.lang.PersistentVector)RT.vector("C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM");
  const__184 = (clojure.lang.PersistentVector)RT.vector("M", "MM", "MMM");
  const__185 = (clojure.lang.PersistentVector)RT.vector(RT.vector("I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"), RT.vector("X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"), RT.vector("C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"), RT.vector("M", "MM", "MMM"));
  const__186 = (clojure.lang.Var)RT.var("clojure.pprint", "format-roman");
  const__187 = (java.lang.Integer)453;
  const__188 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "table"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__189 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "table"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Format a roman numeral using the specified look-up table", Keyword.intern(null, "line"), 453, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__190 = (clojure.lang.Var)RT.var("clojure.pprint", "format-old-roman");
  const__191 = (java.lang.Integer)477;
  const__192 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__193 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 477, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__194 = (clojure.lang.Var)RT.var("clojure.pprint", "format-new-roman");
  const__195 = (java.lang.Integer)480;
  const__196 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__197 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 480, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__198 = (clojure.lang.Var)RT.var("clojure.pprint", "special-chars");
  const__199 = (java.lang.Integer)487;
 }
 static void __init2() {
  const__200 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 487, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__201 = (java.lang.Long)9L;
  const__202 = (java.lang.Long)13L;
  const__203 = (java.lang.Long)32L;
  const__204 = (clojure.lang.IPersistentMap)RT.map(32L, "Space", 8L, "Backspace", 9L, "Tab", 10L, "Newline", 13L, "Return");
  const__205 = (clojure.lang.Var)RT.var("clojure.pprint", "pretty-character");
  const__206 = (java.lang.Integer)490;
  const__207 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__208 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 490, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__209 = (clojure.lang.Var)RT.var("clojure.pprint", "readable-character");
  const__210 = (java.lang.Integer)504;
  const__211 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__212 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 504, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__213 = (clojure.lang.Var)RT.var("clojure.pprint", "plain-character");
  const__214 = (java.lang.Integer)512;
  const__215 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__216 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 512, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__217 = (clojure.lang.Var)RT.var("clojure.pprint", "abort?");
  const__218 = (java.lang.Integer)519;
  const__219 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "context"))));
  const__220 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "context")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 519, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__221 = (clojure.lang.Var)RT.var("clojure.pprint", "execute-sub-format");
  const__222 = (java.lang.Integer)524;
  const__223 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format"), Symbol.intern(null, "args"), Symbol.intern(null, "base-args"))));
  const__224 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format"), Symbol.intern(null, "args"), Symbol.intern(null, "base-args")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 524, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__225 = (clojure.lang.Var)RT.var("clojure.pprint", "float-parts-base");
  const__226 = (java.lang.Integer)542;
  const__227 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object"))))));
  const__228 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "Object")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Produce string parts for the mantissa (normalized 1-9) and exponent", Keyword.intern(null, "line"), 542, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__229 = (clojure.lang.Var)RT.var("clojure.pprint", "float-parts");
  const__230 = (java.lang.Integer)557;
  const__231 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"))));
  const__232 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Take care of leading and trailing zeros in decomposed floats", Keyword.intern(null, "line"), 557, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__233 = (clojure.lang.Var)RT.var("clojure.pprint", "inc-s");
  const__234 = (java.lang.Integer)569;
  const__235 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))));
  const__236 = (clojure.lang.Keyword)Keyword.intern(null, "tag");
  const__237 = (java.lang.Class)java.lang.String.class;
  const__238 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Assumption: The input string consists of one or more decimal digits,\nand no other characters.  Return a string containing one or more\ndecimal digits containing a decimal number one larger than the input\nstring.  The output string will always be the same length as the input\nstring, or one character longer.", Keyword.intern(null, "line"), 569, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__239 = (clojure.lang.Var)RT.var("clojure.pprint", "round-str");
  const__240 = (java.lang.Integer)585;
  const__241 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d"), Symbol.intern(null, "w"))));
  const__242 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d"), Symbol.intern(null, "w")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 585, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__243 = (clojure.lang.Var)RT.var("clojure.pprint", "expand-fixed");
  const__244 = (java.lang.Integer)627;
  const__245 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d"))));
  const__246 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 627, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__247 = (clojure.lang.Var)RT.var("clojure.pprint", "insert-decimal");
  const__248 = (java.lang.Integer)637;
  const__249 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"))));
  const__250 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Insert the decimal point at the right spot in the number to match an exponent", Keyword.intern(null, "line"), 637, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__251 = (clojure.lang.Var)RT.var("clojure.pprint", "get-fixed");
  const__252 = (java.lang.Integer)645;
  const__253 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d"))));
  const__254 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 645, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__255 = (clojure.lang.Var)RT.var("clojure.pprint", "insert-scaled-decimal");
  const__256 = (java.lang.Integer)648;
  const__257 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "k"))));
  const__258 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "m"), Symbol.intern(null, "k")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Insert the decimal point at the right spot in the number to match an exponent", Keyword.intern(null, "line"), 648, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__259 = (clojure.lang.Var)RT.var("clojure.pprint", "convert-ratio");
  const__260 = (java.lang.Integer)655;
  const__261 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__262 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 655, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__263 = (clojure.lang.Var)RT.var("clojure.pprint", "fixed-float");
  const__264 = (java.lang.Integer)672;
  const__265 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__266 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 672, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__267 = (clojure.lang.Var)RT.var("clojure.pprint", "exponential-float");
  const__268 = (java.lang.Integer)720;
  const__269 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__270 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 720, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__271 = (clojure.lang.Var)RT.var("clojure.pprint", "general-float");
  const__272 = (java.lang.Integer)794;
  const__273 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__274 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 794, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__275 = (clojure.lang.Var)RT.var("clojure.pprint", "dollar-float");
  const__276 = (java.lang.Integer)817;
  const__277 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__278 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 817, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__279 = (clojure.lang.Var)RT.var("clojure.pprint", "choice-conditional");
  const__280 = (java.lang.Integer)843;
  const__281 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets"))));
  const__282 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 843, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__283 = (clojure.lang.Var)RT.var("clojure.pprint", "boolean-conditional");
  const__284 = (java.lang.Integer)855;
  const__285 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets"))));
  const__286 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 855, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__287 = (clojure.lang.Var)RT.var("clojure.pprint", "check-arg-conditional");
  const__288 = (java.lang.Integer)867;
  const__289 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets"))));
  const__290 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 867, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__291 = (clojure.lang.Var)RT.var("clojure.pprint", "iterate-sublist");
  const__292 = (java.lang.Integer)886;
  const__293 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__294 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 886, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__295 = (clojure.lang.Var)RT.var("clojure.pprint", "iterate-list-of-sublists");
  const__296 = (java.lang.Integer)911;
  const__297 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__298 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 911, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__299 = (clojure.lang.Var)RT.var("clojure.pprint", "iterate-main-list");
 }
 static void __init3() {
  const__300 = (java.lang.Integer)934;
  const__301 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__302 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 934, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__303 = (clojure.lang.Var)RT.var("clojure.pprint", "iterate-main-sublists");
  const__304 = (java.lang.Integer)958;
  const__305 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__306 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 958, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__307 = (clojure.lang.Var)RT.var("clojure.pprint", "format-logical-block");
  const__308 = (java.lang.Integer)990;
  const__309 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 990, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__310 = (clojure.lang.Var)RT.var("clojure.pprint", "justify-clauses");
  const__311 = (java.lang.Integer)991;
  const__312 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 991, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__313 = (clojure.lang.Var)RT.var("clojure.pprint", "logical-block-or-justify");
  const__314 = (java.lang.Integer)993;
  const__315 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__316 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 993, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__317 = (clojure.lang.Var)RT.var("clojure.pprint", "render-clauses");
  const__318 = (java.lang.Integer)1002;
  const__319 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "clauses"), Symbol.intern(null, "navigator"), Symbol.intern(null, "base-navigator"))));
  const__320 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "clauses"), Symbol.intern(null, "navigator"), Symbol.intern(null, "base-navigator")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1002, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__321 = (java.lang.Integer)1017;
  const__322 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__323 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1017, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__324 = (clojure.lang.Var)RT.var("clojure.pprint", "downcase-writer");
  const__325 = (java.lang.Integer)1072;
  const__326 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__327 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a proxy that wraps writer, converting all characters to lower case", Keyword.intern(null, "line"), 1072, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__328 = (clojure.lang.Var)RT.var("clojure.pprint", "upcase-writer");
  const__329 = (java.lang.Integer)1090;
  const__330 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__331 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a proxy that wraps writer, converting all characters to upper case", Keyword.intern(null, "line"), 1090, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__332 = (clojure.lang.Var)RT.var("clojure.pprint", "capitalize-string");
  const__333 = (java.lang.Integer)1108;
  const__334 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "first?"))));
  const__335 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "first?")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Capitalizes the words in a string. If first? is false, don't capitalize the \n                                      first character of the string even if it's a letter.", Keyword.intern(null, "line"), 1108, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__336 = (clojure.lang.Var)RT.var("clojure.pprint", "capitalize-word-writer");
  const__337 = (java.lang.Integer)1132;
  const__338 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__339 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a proxy that wraps writer, capitalizing all words", Keyword.intern(null, "line"), 1132, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__340 = (clojure.lang.Var)RT.var("clojure.pprint", "init-cap-writer");
  const__341 = (java.lang.Integer)1160;
  const__342 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__343 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Returns a proxy that wraps writer, capitalizing the first word", Keyword.intern(null, "line"), 1160, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__344 = (clojure.lang.Var)RT.var("clojure.pprint", "modify-case");
  const__345 = (java.lang.Integer)1194;
  const__346 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "make-writer"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__347 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "make-writer"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1194, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__348 = (clojure.lang.Var)RT.var("clojure.pprint", "get-pretty-writer");
  const__349 = (java.lang.Integer)1203;
  const__350 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer"))));
  const__351 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "writer")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Returns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's \nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be \npreserved across calls, you will want to wrap them with this. \n\nFor example, when you want to generate column-aware output with multiple calls to cl-format, \ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1    \n       2      4       8    \n       3      9      27    \n       4     16      64    \n       5     25     125    \n       6     36     216    \n       7     49     343    \n       8     64     512    \n       9     81     729    \n      10    100    1000", Keyword.intern(null, "line"), 1203, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__352 = (clojure.lang.Var)RT.var("clojure.pprint", "fresh-line");
  const__353 = (java.lang.Integer)1245;
  const__354 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector()));
  const__355 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector())), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline.", Keyword.intern(null, "line"), 1245, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__356 = (clojure.lang.Var)RT.var("clojure.pprint", "absolute-tabulation");
  const__357 = (java.lang.Integer)1255;
  const__358 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__359 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1255, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__360 = (clojure.lang.Var)RT.var("clojure.pprint", "relative-tabulation");
  const__361 = (java.lang.Integer)1266;
  const__362 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__363 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1266, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__364 = (java.lang.Integer)1282;
  const__365 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__366 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1282, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__367 = (clojure.lang.Var)RT.var("clojure.pprint", "set-indent");
  const__368 = (java.lang.Integer)1300;
  const__369 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__370 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1300, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__371 = (clojure.lang.Var)RT.var("clojure.pprint", "conditional-newline");
  const__372 = (java.lang.Integer)1307;
  const__373 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets"))));
  const__374 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1307, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__375 = (clojure.lang.Var)RT.var("clojure.pprint", "process-directive-table-element");
  const__376 = (java.lang.Integer)1320;
  const__377 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "char"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "bracket-info"), Symbol.intern(null, "&"), Symbol.intern(null, "generator-fn")))));
  const__378 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "char"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "bracket-info"), Symbol.intern(null, "&"), Symbol.intern(null, "generator-fn"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1320, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__379 = (clojure.lang.Var)RT.var("clojure.pprint", "defdirectives");
  const__380 = (java.lang.Integer)1328;
  const__381 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "directives"))));
  const__382 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "&"), Symbol.intern(null, "directives")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1328, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__383 = (clojure.lang.Var)RT.var("clojure.pprint", "directive-table");
  const__384 = (java.lang.Integer)1334;
  const__385 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1334, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__386 = (clojure.lang.Var)RT.var("clojure.core", "hash-map");
  const__387 = (java.lang.Character)Character.valueOf((char)65);
  const__388 = (clojure.lang.Keyword)Keyword.intern(null, "directive");
  const__389 = (clojure.lang.Var)RT.var("clojure.core", "array-map");
  const__390 = (clojure.lang.Keyword)Keyword.intern(null, "mincol");
  const__391 = (java.lang.Long)0L;
  const__392 = (java.lang.Class)java.lang.Integer.class;
  const__393 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__394 = (clojure.lang.Keyword)Keyword.intern(null, "colinc");
  const__395 = (java.lang.Long)1L;
  const__396 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__397 = (clojure.lang.Keyword)Keyword.intern(null, "minpad");
  const__398 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__399 = (clojure.lang.Keyword)Keyword.intern(null, "padchar");
 }
 static void __init4() {
  const__400 = (java.lang.Character)Character.valueOf((char)32);
  const__401 = (java.lang.Class)java.lang.Character.class;
  const__402 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__403 = (clojure.lang.Keyword)Keyword.intern(null, "flags");
  const__404 = (clojure.lang.Keyword)Keyword.intern(null, "colon");
  const__405 = (clojure.lang.Keyword)Keyword.intern(null, "at");
  const__406 = (clojure.lang.Keyword)Keyword.intern(null, "both");
  const__407 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__408 = (clojure.lang.Keyword)Keyword.intern(null, "bracket-info");
  const__409 = (clojure.lang.Keyword)Keyword.intern(null, "generator-fn");
  const__410 = (java.lang.Character)Character.valueOf((char)83);
  const__411 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__412 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__413 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__414 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__415 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__416 = (java.lang.Character)Character.valueOf((char)68);
  const__417 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__418 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__419 = (clojure.lang.Keyword)Keyword.intern(null, "commachar");
  const__420 = (java.lang.Character)Character.valueOf((char)44);
  const__421 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)44), java.lang.Character.class);
  const__422 = (clojure.lang.Keyword)Keyword.intern(null, "commainterval");
  const__423 = (java.lang.Long)3L;
  const__424 = (clojure.lang.PersistentVector)RT.vector(3L, java.lang.Integer.class);
  const__425 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__426 = (java.lang.Character)Character.valueOf((char)66);
  const__427 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__428 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__429 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)44), java.lang.Character.class);
  const__430 = (clojure.lang.PersistentVector)RT.vector(3L, java.lang.Integer.class);
  const__431 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__432 = (java.lang.Character)Character.valueOf((char)79);
  const__433 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__434 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__435 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)44), java.lang.Character.class);
  const__436 = (clojure.lang.PersistentVector)RT.vector(3L, java.lang.Integer.class);
  const__437 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__438 = (java.lang.Character)Character.valueOf((char)88);
  const__439 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__440 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__441 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)44), java.lang.Character.class);
  const__442 = (clojure.lang.PersistentVector)RT.vector(3L, java.lang.Integer.class);
  const__443 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__444 = (java.lang.Character)Character.valueOf((char)82);
  const__445 = (clojure.lang.Keyword)Keyword.intern(null, "base");
  const__446 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__447 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__448 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__449 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)44), java.lang.Character.class);
  const__450 = (clojure.lang.PersistentVector)RT.vector(3L, java.lang.Integer.class);
  const__451 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__452 = (java.lang.Character)Character.valueOf((char)80);
  const__453 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__454 = (java.lang.Character)Character.valueOf((char)67);
  const__455 = (clojure.lang.Keyword)Keyword.intern(null, "char-format");
  const__456 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__457 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__458 = (java.lang.Character)Character.valueOf((char)70);
  const__459 = (clojure.lang.Keyword)Keyword.intern(null, "w");
  const__460 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__461 = (clojure.lang.Keyword)Keyword.intern(null, "d");
  const__462 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__463 = (clojure.lang.Keyword)Keyword.intern(null, "k");
  const__464 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__465 = (clojure.lang.Keyword)Keyword.intern(null, "overflowchar");
  const__466 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__467 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__468 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "at"));
  const__469 = (java.lang.Character)Character.valueOf((char)69);
  const__470 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__471 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__472 = (clojure.lang.Keyword)Keyword.intern(null, "e");
  const__473 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__474 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__475 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__476 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__477 = (clojure.lang.Keyword)Keyword.intern(null, "exponentchar");
  const__478 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__479 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "at"));
  const__480 = (java.lang.Character)Character.valueOf((char)71);
  const__481 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__482 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__483 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__484 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__485 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__486 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__487 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Character.class);
  const__488 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "at"));
  const__489 = (java.lang.Character)Character.valueOf((char)36);
  const__490 = (clojure.lang.PersistentVector)RT.vector(2L, java.lang.Integer.class);
  const__491 = (clojure.lang.Keyword)Keyword.intern(null, "n");
  const__492 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__493 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__494 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__495 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__496 = (java.lang.Character)Character.valueOf((char)37);
  const__497 = (clojure.lang.Keyword)Keyword.intern(null, "count");
  const__498 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__499 = (java.lang.Character)Character.valueOf((char)38);
 }
 static void __init5() {
  const__500 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__501 = (clojure.lang.Keyword)Keyword.intern(null, "pretty");
  const__502 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "pretty"));
  const__503 = (java.lang.Character)Character.valueOf((char)124);
  const__504 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__505 = (java.lang.Character)Character.valueOf((char)126);
  const__506 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__507 = (java.lang.Character)Character.valueOf((char)10);
  const__508 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"));
  const__509 = (java.lang.Character)Character.valueOf((char)84);
  const__510 = (clojure.lang.Keyword)Keyword.intern(null, "colnum");
  const__511 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__512 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__513 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "at"), Keyword.intern(null, "pretty"));
  const__514 = (java.lang.Character)Character.valueOf((char)42);
  const__515 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__516 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"));
  const__517 = (java.lang.Character)Character.valueOf((char)63);
  const__518 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "at"));
  const__519 = (java.lang.Character)Character.valueOf((char)40);
  const__520 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__521 = (clojure.lang.Keyword)Keyword.intern(null, "right");
  const__522 = (java.lang.Character)Character.valueOf((char)41);
  const__523 = (clojure.lang.Keyword)Keyword.intern(null, "allows-separator");
  const__524 = (clojure.lang.Keyword)Keyword.intern(null, "else");
  const__525 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "right"), Character.valueOf((char)41), Keyword.intern(null, "else"), null, Keyword.intern(null, "allows-separator"), null);
  const__526 = (java.lang.Character)Character.valueOf((char)91);
  const__527 = (clojure.lang.Keyword)Keyword.intern(null, "selector");
  const__528 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__529 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"));
  const__530 = (java.lang.Character)Character.valueOf((char)93);
  const__531 = (clojure.lang.Keyword)Keyword.intern(null, "last");
  const__532 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "right"), Character.valueOf((char)93), Keyword.intern(null, "else"), Keyword.intern(null, "last"), Keyword.intern(null, "allows-separator"), Boolean.TRUE);
  const__533 = (java.lang.Character)Character.valueOf((char)59);
  const__534 = (clojure.lang.Keyword)Keyword.intern(null, "min-remaining");
  const__535 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__536 = (clojure.lang.Keyword)Keyword.intern(null, "max-columns");
  const__537 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__538 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"));
  const__539 = (clojure.lang.Keyword)Keyword.intern(null, "separator");
  const__540 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "separator"), Boolean.TRUE);
  const__541 = (java.lang.Character)Character.valueOf((char)123);
  const__542 = (clojure.lang.Keyword)Keyword.intern(null, "max-iterations");
  const__543 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__544 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__545 = (java.lang.Character)Character.valueOf((char)125);
  const__546 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "right"), Character.valueOf((char)125), Keyword.intern(null, "allows-separator"), Boolean.FALSE);
  const__547 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"));
  const__548 = (java.lang.Character)Character.valueOf((char)60);
  const__549 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__550 = (clojure.lang.PersistentVector)RT.vector(1L, java.lang.Integer.class);
  const__551 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__552 = (clojure.lang.PersistentVector)RT.vector(Character.valueOf((char)32), java.lang.Character.class);
  const__553 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"), Keyword.intern(null, "pretty"));
  const__554 = (java.lang.Character)Character.valueOf((char)62);
  const__555 = (clojure.lang.Keyword)Keyword.intern(null, "first");
  const__556 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "right"), Character.valueOf((char)62), Keyword.intern(null, "else"), Keyword.intern(null, "first"), Keyword.intern(null, "allows-separator"), Boolean.TRUE);
  const__557 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"));
  const__558 = (java.lang.Character)Character.valueOf((char)94);
  const__559 = (clojure.lang.Keyword)Keyword.intern(null, "arg1");
  const__560 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__561 = (clojure.lang.Keyword)Keyword.intern(null, "arg2");
  const__562 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__563 = (clojure.lang.Keyword)Keyword.intern(null, "arg3");
  const__564 = (clojure.lang.PersistentVector)RT.vector(null, java.lang.Integer.class);
  const__565 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"));
  const__566 = (java.lang.Character)Character.valueOf((char)87);
  const__567 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"), Keyword.intern(null, "pretty"));
  const__568 = (java.lang.Character)Character.valueOf((char)95);
  const__569 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"), Keyword.intern(null, "at"), Keyword.intern(null, "both"));
  const__570 = (java.lang.Character)Character.valueOf((char)73);
  const__571 = (clojure.lang.PersistentVector)RT.vector(0L, java.lang.Integer.class);
  const__572 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "colon"));
  const__573 = (clojure.lang.Var)RT.var("clojure.pprint", "param-pattern");
  const__574 = (java.lang.Integer)1619;
  const__575 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1619, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__576 = (java.util.regex.Pattern)java.util.regex.Pattern.compile("^([vV]|#|('.)|([+-]?\\d+)|(?=,))");
  const__577 = (clojure.lang.Var)RT.var("clojure.pprint", "special-params");
  const__578 = (java.lang.Integer)1621;
  const__579 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1621, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__580 = (clojure.lang.Keyword)Keyword.intern(null, "remaining-arg-count");
  const__581 = (clojure.lang.Keyword)Keyword.intern(null, "parameter-from-args");
  const__582 = (clojure.lang.PersistentHashSet)PersistentHashSet.create(Keyword.intern(null, "remaining-arg-count"), Keyword.intern(null, "parameter-from-args"));
  const__583 = (clojure.lang.Var)RT.var("clojure.pprint", "extract-param");
  const__584 = (java.lang.Integer)1624;
  const__585 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"), Symbol.intern(null, "saw-comma")))));
  const__586 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"), Symbol.intern(null, "saw-comma"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1624, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__587 = (clojure.lang.Var)RT.var("clojure.pprint", "extract-params");
  const__588 = (java.lang.Integer)1639;
  const__589 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"))));
  const__590 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1639, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__591 = (clojure.lang.Var)RT.var("clojure.pprint", "translate-param");
  const__592 = (java.lang.Integer)1642;
  const__593 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "offset")))));
  const__594 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "offset"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Translate the string representation of a param to the internalized\n                                      representation", Keyword.intern(null, "line"), 1642, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__595 = (clojure.lang.Var)RT.var("clojure.pprint", "flag-defs");
  const__596 = (java.lang.Integer)1654;
  const__597 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1654, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__598 = (java.lang.Character)Character.valueOf((char)58);
  const__599 = (java.lang.Character)Character.valueOf((char)64);
 }
 static void __init6() {
  const__600 = (clojure.lang.IPersistentMap)RT.map(Character.valueOf((char)64), Keyword.intern(null, "at"), Character.valueOf((char)58), Keyword.intern(null, "colon"));
  const__601 = (clojure.lang.Var)RT.var("clojure.pprint", "extract-flags");
  const__602 = (java.lang.Integer)1657;
  const__603 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"))));
  const__604 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1657, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__605 = (clojure.lang.Var)RT.var("clojure.pprint", "check-flags");
  const__606 = (java.lang.Integer)1672;
  const__607 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "def"), Symbol.intern(null, "flags"))));
  const__608 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "def"), Symbol.intern(null, "flags")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1672, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__609 = (clojure.lang.Var)RT.var("clojure.pprint", "map-params");
  const__610 = (java.lang.Integer)1685;
  const__611 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "def"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "offset"))));
  const__612 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "def"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well.", Keyword.intern(null, "line"), 1685, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__613 = (clojure.lang.Var)RT.var("clojure.pprint", "compile-directive");
  const__614 = (java.lang.Integer)1715;
  const__615 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"))));
  const__616 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1715, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__617 = (clojure.lang.Var)RT.var("clojure.pprint", "compile-raw-string");
  const__618 = (java.lang.Integer)1735;
  const__619 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset"))));
  const__620 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"), Symbol.intern(null, "offset")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1735, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__621 = (clojure.lang.Var)RT.var("clojure.pprint", "right-bracket");
  const__622 = (java.lang.Integer)1738;
  const__623 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"))));
  const__624 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1738, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__625 = (clojure.lang.Var)RT.var("clojure.pprint", "separator?");
  const__626 = (java.lang.Integer)1739;
  const__627 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"))));
  const__628 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1739, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__629 = (clojure.lang.Var)RT.var("clojure.pprint", "else-separator?");
  const__630 = (java.lang.Integer)1740;
  const__631 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"))));
  const__632 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1740, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__633 = (clojure.lang.Var)RT.var("clojure.pprint", "collect-clauses");
  const__634 = (java.lang.Integer)1745;
  const__635 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "declared"), Boolean.TRUE, Keyword.intern(null, "line"), 1745, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__636 = (clojure.lang.Var)RT.var("clojure.pprint", "process-bracket");
  const__637 = (java.lang.Integer)1747;
  const__638 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "remainder"))));
  const__639 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "this"), Symbol.intern(null, "remainder")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1747, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__640 = (clojure.lang.Var)RT.var("clojure.pprint", "process-clause");
  const__641 = (java.lang.Integer)1756;
  const__642 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder"))));
  const__643 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1756, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__644 = (java.lang.Integer)1780;
  const__645 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder"))));
  const__646 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1780, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__647 = (clojure.lang.Var)RT.var("clojure.pprint", "process-nesting");
  const__648 = (java.lang.Integer)1829;
  const__649 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format"))));
  const__650 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Take a linearly compiled format and process the bracket directives to give it \n   the appropriate tree structure", Keyword.intern(null, "line"), 1829, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__651 = (java.lang.Integer)1844;
  const__652 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-str"))));
  const__653 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-str")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved \nperformance when you're using the same format string repeatedly", Keyword.intern(null, "line"), 1844, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__654 = (clojure.lang.Var)RT.var("clojure.pprint", "needs-pretty");
  const__655 = (java.lang.Integer)1865;
  const__656 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format"))));
  const__657 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing", Keyword.intern(null, "line"), 1865, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__658 = (java.lang.Integer)1878;
  const__659 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "format"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "format"), Symbol.intern(null, "args"))));
  const__660 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "stream"), Symbol.intern(null, "format"), Symbol.intern(null, "args")), RT.vector(Symbol.intern(null, "format"), Symbol.intern(null, "args")))), Keyword.intern(null, "skip-wiki"), Boolean.TRUE, Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Executes the format with the arguments.", Keyword.intern(null, "line"), 1878, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__661 = (clojure.lang.Var)RT.var("clojure.pprint", "cached-compile");
  const__662 = (java.lang.Integer)1913;
  const__663 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 1913, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__664 = (clojure.lang.Var)RT.var("clojure.core", "memoize");
  const__665 = (clojure.lang.Var)RT.var("clojure.pprint", "formatter");
  const__666 = (java.lang.Integer)1915;
  const__667 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-in"))));
  const__668 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-in")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.", Keyword.intern(null, "line"), 1915, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
  const__669 = (clojure.lang.Var)RT.var("clojure.pprint", "formatter-out");
  const__670 = (java.lang.Integer)1935;
  const__671 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-in"))));
  const__672 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "format-in")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.", Keyword.intern(null, "line"), 1935, Keyword.intern(null, "file"), "clojure/pprint/cl_format.clj");
 }
 static {
  __init0();
  __init1();
  __init2();
  __init3();
  __init4();
  __init5();
  __init6();
  clojure.lang.Compiler.pushNSandLoader(clojure.pprint.cl_format__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
