package clojure.java;

import clojure.lang.*;

public class io__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((IFn)new clojure.java.io_loading__4931__auto__()).invoke();
  if (((clojure.lang.Symbol)const__1).equals(((java.lang.Object)const__2))) {
  } else {
   clojure.lang.LockingTransaction.runInTransaction((java.util.concurrent.Callable)((java.util.concurrent.Callable)new clojure.java.io_fn__8532()));
  }
  const__3.setMeta((IPersistentMap)const__11);
  const__3.bindRoot(((IFn)const__12.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(((java.lang.Class)java.lang.Byte.TYPE), const__14)));
  const__15.setMeta((IPersistentMap)const__17);
  const__15.bindRoot(((IFn)const__12.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(((java.lang.Class)java.lang.Character.TYPE), const__14)));
  ((IFn)new clojure.java.io_fn__8538()).invoke();
  ((IFn)const__18.getRawRoot()).invoke(const__19, const__20.getRawRoot(), const__10, "Coerce between various 'resource-namish' things.");
  ((IFn)const__21).invoke(const__19, const__22);
  ((IFn)const__23.getRawRoot()).invoke(const__19, const__24.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__29, const__30, const__31, const__32, const__19, const__33, const__36, const__37, RT.map(((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__41, ((IFn)const__24.getRawRoot()).invoke(const__42, RT.mapUniqueKeys(const__43, const__19)))), new clojure.java.io_fn__8541(), ((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__44, ((IFn)const__24.getRawRoot()).invoke(const__45, RT.mapUniqueKeys(const__43, const__19)))), new clojure.java.io_fn__8552())));
  ((IFn)const__46.getRawRoot()).invoke(const__19.getRawRoot());
  const__48.setMeta((IPersistentMap)const__52);
  const__48.bindRoot(new clojure.java.io_escaped_utf8_urlstring__GT_str());
  ((IFn)const__53.getRawRoot()).invoke(const__54, const__19.getRawRoot(), RT.mapUniqueKeys(const__34, new clojure.java.io_fn__8564(), const__35, new clojure.java.io_fn__8566()));
  ((IFn)const__53.getRawRoot()).invoke(const__55, const__19.getRawRoot(), RT.mapUniqueKeys(const__34, new clojure.java.io_fn__8568(), const__35, new clojure.java.io_fn__8570()));
  ((IFn)const__53.getRawRoot()).invoke(const__56, const__19.getRawRoot(), RT.mapUniqueKeys(const__35, new clojure.java.io_fn__8572(), const__34, new clojure.java.io_fn__8574()));
  ((IFn)const__53.getRawRoot()).invoke(const__57, const__19.getRawRoot(), RT.mapUniqueKeys(const__35, new clojure.java.io_fn__8576(), const__34, new clojure.java.io_fn__8578()));
  ((IFn)const__53.getRawRoot()).invoke(null, const__19.getRawRoot(), RT.mapUniqueKeys(const__35, new clojure.java.io_fn__8580(), const__34, new clojure.java.io_fn__8582()));
  ((IFn)new clojure.java.io_fn__8592()).invoke();
  ((IFn)const__18.getRawRoot()).invoke(const__58, const__20.getRawRoot(), const__10, "Factory functions that create ready-to-use, buffered versions of\n   the various Java I/O stream types, on top of anything that can\n   be unequivocally converted to the requested kind of stream.\n\n   Common options include\n\n     :append    true to open stream in append mode\n     :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\n   Callers should generally prefer the higher level API provided by\n   reader, writer, input-stream, and output-stream.");
  ((IFn)const__21).invoke(const__58, const__59);
  ((IFn)const__23.getRawRoot()).invoke(const__58, const__24.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__62, const__30, const__63, const__32, const__58, const__33, const__68, const__37, RT.map(((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__69, ((IFn)const__24.getRawRoot()).invoke(const__70, RT.mapUniqueKeys(const__43, const__58)))), new clojure.java.io_fn__8595(), ((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__71, ((IFn)const__24.getRawRoot()).invoke(const__72, RT.mapUniqueKeys(const__43, const__58)))), new clojure.java.io_fn__8608(), ((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__73, ((IFn)const__24.getRawRoot()).invoke(const__74, RT.mapUniqueKeys(const__43, const__58)))), new clojure.java.io_fn__8621(), ((IFn)const__38.getRawRoot()).invoke(const__39.get(), ((IFn)const__40.getRawRoot()).invoke(const__75, ((IFn)const__24.getRawRoot()).invoke(const__76, RT.mapUniqueKeys(const__43, const__58)))), new clojure.java.io_fn__8634())));
  ((IFn)const__46.getRawRoot()).invoke(const__58.getRawRoot());
  const__78.setMeta((IPersistentMap)const__84);
  const__78.bindRoot(new clojure.java.io_reader());
  const__85.setMeta((IPersistentMap)const__89);
  const__85.bindRoot(new clojure.java.io_writer());
  const__90.setMeta((IPersistentMap)const__94);
  const__90.bindRoot(new clojure.java.io_input_stream());
  const__95.setMeta((IPersistentMap)const__99);
  const__95.bindRoot(new clojure.java.io_output_stream());
  const__100.setMeta((IPersistentMap)const__104);
  const__100.bindRoot(new clojure.java.io_append_QMARK_());
  const__105.setMeta((IPersistentMap)const__108);
  const__105.bindRoot(new clojure.java.io_encoding());
  const__109.setMeta((IPersistentMap)const__112);
  const__109.bindRoot(new clojure.java.io_buffer_size());
  const__113.setMeta((IPersistentMap)const__115);
  const__113.bindRoot(RT.mapUniqueKeys(const__67, new clojure.java.io_fn__8656(), const__66, new clojure.java.io_fn__8658(), const__65, new clojure.java.io_fn__8660(), const__64, new clojure.java.io_fn__8662()));
  const__116.setMeta((IPersistentMap)const__119);
  const__116.bindRoot(new clojure.java.io_inputstream__GT_reader());
  const__120.setMeta((IPersistentMap)const__123);
  const__120.bindRoot(new clojure.java.io_outputstream__GT_writer());
  ((IFn)const__53.getRawRoot()).invoke(const__124, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8666(), const__67, const__116.getRawRoot()));
  ((IFn)const__53.getRawRoot()).invoke(const__93, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8668(), const__67, const__116.getRawRoot()));
  ((IFn)const__53.getRawRoot()).invoke(const__83, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__67, new clojure.java.io_fn__8670()));
  ((IFn)const__53.getRawRoot()).invoke(const__125, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__67, new clojure.java.io_fn__8672()));
  ((IFn)const__53.getRawRoot()).invoke(const__88, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__66, new clojure.java.io_fn__8674()));
  ((IFn)const__53.getRawRoot()).invoke(const__126, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__66, new clojure.java.io_fn__8676()));
  ((IFn)const__53.getRawRoot()).invoke(const__98, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__64, new clojure.java.io_fn__8678(), const__66, const__120.getRawRoot()));
  ((IFn)const__53.getRawRoot()).invoke(const__127, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__64, new clojure.java.io_fn__8680(), const__66, const__120.getRawRoot()));
  ((IFn)const__53.getRawRoot()).invoke(const__56, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8682(), const__64, new clojure.java.io_fn__8684()));
  ((IFn)const__53.getRawRoot()).invoke(const__55, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8686(), const__64, new clojure.java.io_fn__8688()));
  ((IFn)const__53.getRawRoot()).invoke(const__54, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8690(), const__64, new clojure.java.io_fn__8692()));
  ((IFn)const__53.getRawRoot()).invoke(const__57, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8694(), const__64, new clojure.java.io_fn__8696()));
  ((IFn)const__53.getRawRoot()).invoke(const__128, const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8698(), const__64, new clojure.java.io_fn__8700()));
  ((IFn)const__53.getRawRoot()).invoke(const__3.getRawRoot(), const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__65, new clojure.java.io_fn__8702()));
  ((IFn)const__53.getRawRoot()).invoke(const__15.getRawRoot(), const__58.getRawRoot(), ((IFn)const__20.getRawRoot()).invoke(const__113.getRawRoot(), const__67, new clojure.java.io_fn__8704()));
  ((IFn)const__53.getRawRoot()).invoke(const__129, const__58.getRawRoot(), const__113.getRawRoot());
  ((IFn)new clojure.java.io_fn__8706()).invoke();
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__131), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8712()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__132), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8714()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__133), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8716()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__134), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8718()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__135), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8720()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__136), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8722()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__137), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8724()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__138), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8726()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__139), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8728()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__140), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8730()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__141), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8732()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)const__142), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8734()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__15.getRawRoot(), const__98)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8736()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__15.getRawRoot(), const__88)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8738()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__15.getRawRoot(), const__56)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8740()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__3.getRawRoot(), const__98)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8742()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__3.getRawRoot(), const__88)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8744()));
  ((clojure.lang.MultiFn)const__130.getRawRoot()).addMethod(((java.lang.Object)RT.vector(const__3.getRawRoot(), const__56)), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.java.io_fn__8746()));
  const__143.setMeta((IPersistentMap)const__146);
  const__143.bindRoot(new clojure.java.io_copy());
  const__147.setMeta((IPersistentMap)const__150);
  const__147.bindRoot(new clojure.java.io_as_relative_path());
  const__151.setMeta((IPersistentMap)const__154);
  const__151.bindRoot(new clojure.java.io_file());
  const__155.setMeta((IPersistentMap)const__158);
  const__155.bindRoot(new clojure.java.io_delete_file());
  const__159.setMeta((IPersistentMap)const__162);
  const__159.bindRoot(new clojure.java.io_make_parents());
  const__163.setMeta((IPersistentMap)const__166);
  const__163.bindRoot(new clojure.java.io_resource());
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Symbol const__2;
 private static clojure.lang.Var const__3;
 private static clojure.lang.Keyword const__4;
 private static clojure.lang.Keyword const__5;
 private static java.lang.Integer const__6;
 private static clojure.lang.Keyword const__7;
 private static java.lang.Integer const__8;
 private static clojure.lang.Keyword const__9;
 private static clojure.lang.Keyword const__10;
 private static clojure.lang.IPersistentMap const__11;
 private static clojure.lang.Var const__12;
 private static clojure.lang.Var const__13;
 private static java.lang.Long const__14;
 private static clojure.lang.Var const__15;
 private static java.lang.Integer const__16;
 private static clojure.lang.IPersistentMap const__17;
 private static clojure.lang.Var const__18;
 private static clojure.lang.Var const__19;
 private static clojure.lang.Var const__20;
 private static clojure.lang.Var const__21;
 private static clojure.lang.IPersistentList const__22;
 private static clojure.lang.Var const__23;
 private static clojure.lang.Var const__24;
 private static clojure.lang.Keyword const__25;
 private static clojure.lang.Symbol const__26;
 private static clojure.lang.Keyword const__27;
 private static java.lang.Class const__28;
 private static clojure.lang.IPersistentMap const__29;
 private static clojure.lang.Keyword const__30;
 private static clojure.lang.IPersistentMap const__31;
 private static clojure.lang.Keyword const__32;
 private static clojure.lang.Keyword const__33;
 private static clojure.lang.Keyword const__34;
 private static clojure.lang.Keyword const__35;
 private static clojure.lang.IPersistentMap const__36;
 private static clojure.lang.Keyword const__37;
 private static clojure.lang.Var const__38;
 private static clojure.lang.Var const__39;
 private static clojure.lang.Var const__40;
 private static clojure.lang.Symbol const__41;
 private static clojure.lang.IPersistentMap const__42;
 private static clojure.lang.Keyword const__43;
 private static clojure.lang.Symbol const__44;
 private static clojure.lang.IPersistentMap const__45;
 private static clojure.lang.Var const__46;
 private static clojure.lang.Symbol const__47;
 private static clojure.lang.Var const__48;
 private static java.lang.Integer const__49;
 private static clojure.lang.Keyword const__50;
 private static clojure.lang.IPersistentList const__51;
 private static clojure.lang.IPersistentMap const__52;
 private static clojure.lang.Var const__53;
 private static java.lang.Class const__54;
 private static java.lang.Class const__55;
 private static java.lang.Class const__56;
 private static java.lang.Class const__57;
 private static clojure.lang.Var const__58;
 private static clojure.lang.IPersistentList const__59;
 private static clojure.lang.Symbol const__60;
 private static java.lang.Class const__61;
 private static clojure.lang.IPersistentMap const__62;
 private static clojure.lang.IPersistentMap const__63;
 private static clojure.lang.Keyword const__64;
 private static clojure.lang.Keyword const__65;
 private static clojure.lang.Keyword const__66;
 private static clojure.lang.Keyword const__67;
 private static clojure.lang.IPersistentMap const__68;
 private static clojure.lang.Symbol const__69;
 private static clojure.lang.IPersistentMap const__70;
 private static clojure.lang.Symbol const__71;
 private static clojure.lang.IPersistentMap const__72;
 private static clojure.lang.Symbol const__73;
 private static clojure.lang.IPersistentMap const__74;
 private static clojure.lang.Symbol const__75;
 private static clojure.lang.IPersistentMap const__76;
 private static clojure.lang.Symbol const__77;
 private static clojure.lang.Var const__78;
 private static java.lang.Integer const__79;
 private static clojure.lang.IPersistentList const__80;
 private static clojure.lang.Keyword const__81;
 private static clojure.lang.Keyword const__82;
 private static java.lang.Class const__83;
 private static clojure.lang.IPersistentMap const__84;
 private static clojure.lang.Var const__85;
 private static java.lang.Integer const__86;
 private static clojure.lang.IPersistentList const__87;
 private static java.lang.Class const__88;
 private static clojure.lang.IPersistentMap const__89;
 private static clojure.lang.Var const__90;
 private static java.lang.Integer const__91;
 private static clojure.lang.IPersistentList const__92;
 private static java.lang.Class const__93;
 private static clojure.lang.IPersistentMap const__94;
 private static clojure.lang.Var const__95;
 private static java.lang.Integer const__96;
 private static clojure.lang.IPersistentList const__97;
 private static java.lang.Class const__98;
 private static clojure.lang.IPersistentMap const__99;
 private static clojure.lang.Var const__100;
 private static java.lang.Integer const__101;
 private static clojure.lang.IPersistentList const__102;
 private static java.lang.Class const__103;
 private static clojure.lang.IPersistentMap const__104;
 private static clojure.lang.Var const__105;
 private static java.lang.Integer const__106;
 private static clojure.lang.IPersistentList const__107;
 private static clojure.lang.IPersistentMap const__108;
 private static clojure.lang.Var const__109;
 private static java.lang.Integer const__110;
 private static clojure.lang.IPersistentList const__111;
 private static clojure.lang.IPersistentMap const__112;
 private static clojure.lang.Var const__113;
 private static java.lang.Integer const__114;
 private static clojure.lang.IPersistentMap const__115;
 private static clojure.lang.Var const__116;
 private static java.lang.Integer const__117;
 private static clojure.lang.IPersistentList const__118;
 private static clojure.lang.IPersistentMap const__119;
 private static clojure.lang.Var const__120;
 private static java.lang.Integer const__121;
 private static clojure.lang.IPersistentList const__122;
 private static clojure.lang.IPersistentMap const__123;
 private static java.lang.Class const__124;
 private static java.lang.Class const__125;
 private static java.lang.Class const__126;
 private static java.lang.Class const__127;
 private static java.lang.Class const__128;
 private static java.lang.Class const__129;
 private static clojure.lang.Var const__130;
 private static clojure.lang.PersistentVector const__131;
 private static clojure.lang.PersistentVector const__132;
 private static clojure.lang.PersistentVector const__133;
 private static clojure.lang.PersistentVector const__134;
 private static clojure.lang.PersistentVector const__135;
 private static clojure.lang.PersistentVector const__136;
 private static clojure.lang.PersistentVector const__137;
 private static clojure.lang.PersistentVector const__138;
 private static clojure.lang.PersistentVector const__139;
 private static clojure.lang.PersistentVector const__140;
 private static clojure.lang.PersistentVector const__141;
 private static clojure.lang.PersistentVector const__142;
 private static clojure.lang.Var const__143;
 private static java.lang.Integer const__144;
 private static clojure.lang.IPersistentList const__145;
 private static clojure.lang.IPersistentMap const__146;
 private static clojure.lang.Var const__147;
 private static java.lang.Integer const__148;
 private static clojure.lang.IPersistentList const__149;
 private static clojure.lang.IPersistentMap const__150;
 private static clojure.lang.Var const__151;
 private static java.lang.Integer const__152;
 private static clojure.lang.IPersistentList const__153;
 private static clojure.lang.IPersistentMap const__154;
 private static clojure.lang.Var const__155;
 private static java.lang.Integer const__156;
 private static clojure.lang.IPersistentList const__157;
 private static clojure.lang.IPersistentMap const__158;
 private static clojure.lang.Var const__159;
 private static java.lang.Integer const__160;
 private static clojure.lang.IPersistentList const__161;
 private static clojure.lang.IPersistentMap const__162;
 private static clojure.lang.Var const__163;
 private static java.lang.Integer const__164;
 private static clojure.lang.IPersistentList const__165;
 private static clojure.lang.IPersistentMap const__166;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "clojure.java.io")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "doc"), "This file defines polymorphic I/O utility functions for Clojure.", Keyword.intern(null, "author"), "Stuart Sierra, Chas Emerick, Stuart Halloway"));
  const__2 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__3 = (clojure.lang.Var)RT.var("clojure.java.io", "byte-array-type");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__5 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__6 = (java.lang.Integer)1;
  const__7 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__8 = (java.lang.Integer)24;
  const__9 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__10 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__11 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Type object for a Java primitive byte array.", Keyword.intern(null, "line"), 24, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__12 = (clojure.lang.Var)RT.var("clojure.core", "class");
  const__13 = (clojure.lang.Var)RT.var("clojure.core", "make-array");
  const__14 = (java.lang.Long)0L;
  const__15 = (clojure.lang.Var)RT.var("clojure.java.io", "char-array-type");
  const__16 = (java.lang.Integer)30;
  const__17 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Type object for a Java primitive char array.", Keyword.intern(null, "line"), 30, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__18 = (clojure.lang.Var)RT.var("clojure.core", "alter-meta!");
  const__19 = (clojure.lang.Var)RT.var("clojure.java.io", "Coercions");
  const__20 = (clojure.lang.Var)RT.var("clojure.core", "assoc");
  const__21 = (clojure.lang.Var)RT.var("clojure.core", "assert-same-protocol");
  const__22 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)Symbol.intern(null, "as-url")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a URL.")), ((clojure.lang.IObj)Symbol.intern(null, "as-file")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a file."))));
  const__23 = (clojure.lang.Var)RT.var("clojure.core", "alter-var-root");
  const__24 = (clojure.lang.Var)RT.var("clojure.core", "merge");
  const__25 = (clojure.lang.Keyword)Keyword.intern(null, "on");
  const__26 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.java.io.Coercions");
  const__27 = (clojure.lang.Keyword)Keyword.intern(null, "on-interface");
  const__28 = (java.lang.Class)clojure.java.io.Coercions.class;
  const__29 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "on"), Symbol.intern(null, "clojure.java.io.Coercions"), Keyword.intern(null, "doc"), "Coerce between various 'resource-namish' things.", Keyword.intern(null, "on-interface"), clojure.java.io.Coercions.class);
  const__30 = (clojure.lang.Keyword)Keyword.intern(null, "sigs");
  const__31 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "as-url"), RT.map(Keyword.intern(null, "doc"), "Coerce argument to a URL.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "as-url")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a URL.")), Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "tag"), Symbol.intern(null, "java.net.URL")), Keyword.intern(null, "as-file"), RT.map(Keyword.intern(null, "doc"), "Coerce argument to a file.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "as-file")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a file.")), Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.File")));
  const__32 = (clojure.lang.Keyword)Keyword.intern(null, "var");
  const__33 = (clojure.lang.Keyword)Keyword.intern(null, "method-map");
  const__34 = (clojure.lang.Keyword)Keyword.intern(null, "as-file");
  const__35 = (clojure.lang.Keyword)Keyword.intern(null, "as-url");
  const__36 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "as-file"), Keyword.intern(null, "as-file"), Keyword.intern(null, "as-url"), Keyword.intern(null, "as-url"));
  const__37 = (clojure.lang.Keyword)Keyword.intern(null, "method-builders");
  const__38 = (clojure.lang.Var)RT.var("clojure.core", "intern");
  const__39 = (clojure.lang.Var)RT.var("clojure.core", "*ns*");
  const__40 = (clojure.lang.Var)RT.var("clojure.core", "with-meta");
  const__41 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "as-file")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a file."));
  const__42 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Coerce argument to a file.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "as-file")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a file.")), Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.File"));
  const__43 = (clojure.lang.Keyword)Keyword.intern(null, "protocol");
  const__44 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "as-url")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a URL."));
  const__45 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Coerce argument to a URL.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "as-url")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "doc"), "Coerce argument to a URL.")), Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "tag"), Symbol.intern(null, "java.net.URL"));
  const__46 = (clojure.lang.Var)RT.var("clojure.core", "-reset-methods");
  const__47 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "Coercions")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.2"));
  const__48 = (clojure.lang.Var)RT.var("clojure.java.io", "escaped-utf8-urlstring->str");
  const__49 = (java.lang.Integer)41;
  const__50 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__51 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s"))));
  const__52 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "s")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 41, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__53 = (clojure.lang.Var)RT.var("clojure.core", "extend");
  const__54 = (java.lang.Class)java.net.URI.class;
  const__55 = (java.lang.Class)java.net.URL.class;
  const__56 = (java.lang.Class)java.io.File.class;
  const__57 = (java.lang.Class)java.lang.String.class;
  const__58 = (clojure.lang.Var)RT.var("clojure.java.io", "IOFactory");
  const__59 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)Symbol.intern(null, "make-output-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs.")), ((clojure.lang.IObj)Symbol.intern(null, "make-input-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs.")), ((clojure.lang.IObj)Symbol.intern(null, "make-writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs.")), ((clojure.lang.IObj)Symbol.intern(null, "make-reader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs."))));
  const__60 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.java.io.IOFactory");
  const__61 = (java.lang.Class)clojure.java.io.IOFactory.class;
  const__62 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "on"), Symbol.intern(null, "clojure.java.io.IOFactory"), Keyword.intern(null, "doc"), "Factory functions that create ready-to-use, buffered versions of\n   the various Java I/O stream types, on top of anything that can\n   be unequivocally converted to the requested kind of stream.\n\n   Common options include\n\n     :append    true to open stream in append mode\n     :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\n   Callers should generally prefer the higher level API provided by\n   reader, writer, input-stream, and output-stream.", Keyword.intern(null, "on-interface"), clojure.java.io.IOFactory.class);
  const__63 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "make-output-stream"), RT.map(Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-output-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2"), Keyword.intern(null, "make-input-stream"), RT.map(Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-input-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2"), Keyword.intern(null, "make-writer"), RT.map(Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2"), Keyword.intern(null, "make-reader"), RT.map(Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-reader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2"));
  const__64 = (clojure.lang.Keyword)Keyword.intern(null, "make-output-stream");
  const__65 = (clojure.lang.Keyword)Keyword.intern(null, "make-input-stream");
  const__66 = (clojure.lang.Keyword)Keyword.intern(null, "make-writer");
  const__67 = (clojure.lang.Keyword)Keyword.intern(null, "make-reader");
  const__68 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "make-output-stream"), Keyword.intern(null, "make-output-stream"), Keyword.intern(null, "make-input-stream"), Keyword.intern(null, "make-input-stream"), Keyword.intern(null, "make-writer"), Keyword.intern(null, "make-writer"), Keyword.intern(null, "make-reader"), Keyword.intern(null, "make-reader"));
  const__69 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "make-reader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs."));
  const__70 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-reader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedReader. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2");
  const__71 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "make-output-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs."));
  const__72 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-output-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedOutputStream. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2");
  const__73 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "make-input-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs."));
  const__74 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-input-stream")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedInputStream. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2");
  const__75 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "make-writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs."));
  const__76 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs.", Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "name"), ((clojure.lang.IObj)Symbol.intern(null, "make-writer")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "opts")))), Keyword.intern(null, "doc"), "Creates a BufferedWriter. See also IOFactory docs.")), Keyword.intern(null, "added"), "1.2");
  const__77 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "IOFactory")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "added"), "1.2"));
  const__78 = (clojure.lang.Var)RT.var("clojure.java.io", "reader");
  const__79 = (java.lang.Integer)90;
  const__80 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__81 = (clojure.lang.Keyword)Keyword.intern(null, "added");
  const__82 = (clojure.lang.Keyword)Keyword.intern(null, "tag");
  const__83 = (java.lang.Class)java.io.Reader.class;
  const__84 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Attempts to coerce its argument into an open java.io.Reader.\n   Default implementations always return a java.io.BufferedReader.\n\n   Default implementations are provided for Reader, BufferedReader,\n   InputStream, File, URI, URL, Socket, byte arrays, character arrays,\n   and String.\n\n   If argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the Reader is properly\n   closed.", Keyword.intern(null, "line"), 90, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.io.Reader.class);
  const__85 = (clojure.lang.Var)RT.var("clojure.java.io", "writer");
  const__86 = (java.lang.Integer)108;
  const__87 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__88 = (java.lang.Class)java.io.Writer.class;
  const__89 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Attempts to coerce its argument into an open java.io.Writer.\n   Default implementations always return a java.io.BufferedWriter.\n\n   Default implementations are provided for Writer, BufferedWriter,\n   OutputStream, File, URI, URL, Socket, and String.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the Writer is properly\n   closed.", Keyword.intern(null, "line"), 108, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.io.Writer.class);
  const__90 = (clojure.lang.Var)RT.var("clojure.java.io", "input-stream");
  const__91 = (java.lang.Integer)125;
  const__92 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__93 = (java.lang.Class)java.io.InputStream.class;
  const__94 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Attempts to coerce its argument into an open java.io.InputStream.\n   Default implementations always return a java.io.BufferedInputStream.\n\n   Default implementations are defined for OutputStream, File, URI, URL,\n   Socket, byte array, and String arguments.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the InputStream is properly\n   closed.", Keyword.intern(null, "line"), 125, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.io.InputStream.class);
  const__95 = (clojure.lang.Var)RT.var("clojure.java.io", "output-stream");
  const__96 = (java.lang.Integer)142;
  const__97 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__98 = (java.lang.Class)java.io.OutputStream.class;
  const__99 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Attempts to coerce its argument into an open java.io.OutputStream.\n   Default implementations always return a java.io.BufferedOutputStream.\n\n   Default implementations are defined for OutputStream, File, URI, URL,\n   Socket, and String arguments.\n\n   If the argument is a String, it tries to resolve it first as a URI, then\n   as a local file name.  URIs with a 'file' protocol are converted to\n   local file names.\n\n   Should be used inside with-open to ensure the OutputStream is\n   properly closed.", Keyword.intern(null, "line"), 142, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.io.OutputStream.class);
 }
 static void __init1() {
  const__100 = (clojure.lang.Var)RT.var("clojure.java.io", "append?");
  const__101 = (java.lang.Integer)159;
  const__102 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts"))));
  const__103 = (java.lang.Class)java.lang.Boolean.class;
  const__104 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 159, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.lang.Boolean.class);
  const__105 = (clojure.lang.Var)RT.var("clojure.java.io", "encoding");
  const__106 = (java.lang.Integer)162;
  const__107 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts"))));
  const__108 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 162, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__109 = (clojure.lang.Var)RT.var("clojure.java.io", "buffer-size");
  const__110 = (java.lang.Integer)165;
  const__111 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts"))));
  const__112 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 165, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__113 = (clojure.lang.Var)RT.var("clojure.java.io", "default-streams-impl");
  const__114 = (java.lang.Integer)168;
  const__115 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "line"), 168, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__116 = (clojure.lang.Var)RT.var("clojure.java.io", "inputstream->reader");
  const__117 = (java.lang.Integer)178;
  const__118 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "is")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "InputStream"))), Symbol.intern(null, "opts"))));
  const__119 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "is")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "InputStream"))), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 178, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__120 = (clojure.lang.Var)RT.var("clojure.java.io", "outputstream->writer");
  const__121 = (java.lang.Integer)182;
  const__122 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "os")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "OutputStream"))), Symbol.intern(null, "opts"))));
  const__123 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "os")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "OutputStream"))), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 182, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__124 = (java.lang.Class)java.io.BufferedInputStream.class;
  const__125 = (java.lang.Class)java.io.BufferedReader.class;
  const__126 = (java.lang.Class)java.io.BufferedWriter.class;
  const__127 = (java.lang.Class)java.io.BufferedOutputStream.class;
  const__128 = (java.lang.Class)java.net.Socket.class;
  const__129 = (java.lang.Class)java.lang.Object.class;
  const__130 = (clojure.lang.Var)RT.var("clojure.java.io", "do-copy");
  const__131 = (clojure.lang.PersistentVector)RT.vector(java.io.InputStream.class, java.io.OutputStream.class);
  const__132 = (clojure.lang.PersistentVector)RT.vector(java.io.InputStream.class, java.io.Writer.class);
  const__133 = (clojure.lang.PersistentVector)RT.vector(java.io.InputStream.class, java.io.File.class);
  const__134 = (clojure.lang.PersistentVector)RT.vector(java.io.Reader.class, java.io.OutputStream.class);
  const__135 = (clojure.lang.PersistentVector)RT.vector(java.io.Reader.class, java.io.Writer.class);
  const__136 = (clojure.lang.PersistentVector)RT.vector(java.io.Reader.class, java.io.File.class);
  const__137 = (clojure.lang.PersistentVector)RT.vector(java.io.File.class, java.io.OutputStream.class);
  const__138 = (clojure.lang.PersistentVector)RT.vector(java.io.File.class, java.io.Writer.class);
  const__139 = (clojure.lang.PersistentVector)RT.vector(java.io.File.class, java.io.File.class);
  const__140 = (clojure.lang.PersistentVector)RT.vector(java.lang.String.class, java.io.OutputStream.class);
  const__141 = (clojure.lang.PersistentVector)RT.vector(java.lang.String.class, java.io.Writer.class);
  const__142 = (clojure.lang.PersistentVector)RT.vector(java.lang.String.class, java.io.File.class);
  const__143 = (clojure.lang.Var)RT.var("clojure.java.io", "copy");
  const__144 = (java.lang.Integer)380;
  const__145 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "input"), Symbol.intern(null, "output"), Symbol.intern(null, "&"), Symbol.intern(null, "opts"))));
  const__146 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "input"), Symbol.intern(null, "output"), Symbol.intern(null, "&"), Symbol.intern(null, "opts")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Copies input to output.  Returns nil or throws IOException.\n  Input may be an InputStream, Reader, File, byte[], or String.\n  Output may be an OutputStream, Writer, or File.\n\n  Options are key/value pairs and may be one of\n\n    :buffer-size  buffer size to use, default is 1024.\n    :encoding     encoding to use if converting between\n                  byte and char streams.\n\n  Does not close any streams except those it opens itself\n  (on a File).", Keyword.intern(null, "line"), 380, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__147 = (clojure.lang.Var)RT.var("clojure.java.io", "as-relative-path");
  const__148 = (java.lang.Integer)397;
  const__149 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x"))));
  const__150 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "x")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Take an as-file-able thing and return a string if it is\n   a relative path, else IllegalArgumentException.", Keyword.intern(null, "line"), 397, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.lang.String.class);
  const__151 = (clojure.lang.Var)RT.var("clojure.java.io", "file");
  const__152 = (java.lang.Integer)407;
  const__153 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "arg")), RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child")), RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__154 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "arg")), RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child")), RT.vector(Symbol.intern(null, "parent"), Symbol.intern(null, "child"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Returns a java.io.File, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent.", Keyword.intern(null, "line"), 407, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.io.File.class);
  const__155 = (clojure.lang.Var)RT.var("clojure.java.io", "delete-file");
  const__156 = (java.lang.Integer)419;
  const__157 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), RT.vector(Symbol.intern(null, "silently")))));
  const__158 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), RT.vector(Symbol.intern(null, "silently"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Delete file f. Raise an exception if it fails unless silently is true.", Keyword.intern(null, "line"), 419, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__159 = (clojure.lang.Var)RT.var("clojure.java.io", "make-parents");
  const__160 = (java.lang.Integer)427;
  const__161 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "more"))));
  const__162 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.", Keyword.intern(null, "line"), 427, Keyword.intern(null, "file"), "clojure/java/io.clj");
  const__163 = (clojure.lang.Var)RT.var("clojure.java.io", "resource");
  const__164 = (java.lang.Integer)435;
  const__165 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")), RT.vector(Symbol.intern(null, "n"), ((clojure.lang.IObj)Symbol.intern(null, "loader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "ClassLoader"))))));
  const__166 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "n")), RT.vector(Symbol.intern(null, "n"), ((clojure.lang.IObj)Symbol.intern(null, "loader")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "ClassLoader")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "added"), "1.2", Keyword.intern(null, "doc"), "Returns the URL for a named resource. Use the context class loader\n   if no loader is specified.", Keyword.intern(null, "line"), 435, Keyword.intern(null, "file"), "clojure/java/io.clj", Keyword.intern(null, "tag"), java.net.URL.class);
 }
 static {
  __init0();
  __init1();
  clojure.lang.Compiler.pushNSandLoader(clojure.java.io__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
