package clojure;

import clojure.lang.*;

public final class test_fn__7078 extends clojure.lang.AFunction {
 public static final clojure.lang.Var const__0;
 public static final clojure.lang.Var const__1;
 public static final clojure.lang.Var const__2;
 public static final clojure.lang.Var const__3;
 public static final clojure.lang.Symbol const__4;
 static {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "commute");
  const__1 = (clojure.lang.Var)RT.var("clojure.core", "deref");
  const__2 = (clojure.lang.Var)RT.var("clojure.core", "*loaded-libs*");
  const__3 = (clojure.lang.Var)RT.var("clojure.core", "conj");
  const__4 = (clojure.lang.Symbol)((clojure.lang.IObj)Symbol.intern(null, "clojure.test")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "doc"), "A unit testing framework.\n\n    ASSERTIONS\n\n    The core of the library is the \"is\" macro, which lets you make\n    assertions of any arbitrary expression:\n\n    (is (= 4 (+ 2 2)))\n    (is (instance? Integer 256))\n    (is (.startsWith \"abcde\" \"ab\"))\n\n    You can type an \"is\" expression directly at the REPL, which will\n    print a message if it fails.\n\n    user> (is (= 5 (+ 2 2)))\n\n    FAIL in  (:1)\n    expected: (= 5 (+ 2 2))\n    actual: (not (= 5 4))\n    false\n\n    The \"expected:\" line shows you the original expression, and the\n    \"actual:\" shows you what actually happened.  In this case, it\n    shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n    \"false\" on the last line is the value returned from the\n    expression.  The \"is\" macro always returns the result of the\n    inner expression.\n\n    There are two special assertions for testing exceptions.  The\n    \"(is (thrown? c ...))\" form tests if an exception of class c is\n    thrown:\n\n    (is (thrown? ArithmeticException (/ 1 0)))\n\n    \"(is (thrown-with-msg? c re ...))\" does the same thing and also\n    tests that the message on the exception matches the regular\n    expression re:\n\n    (is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n    (/ 1 0)))\n\n    DOCUMENTING TESTS\n\n    \"is\" takes an optional second argument, a string describing the\n    assertion.  This message will be included in the error report.\n\n    (is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\n    In addition, you can document groups of assertions with the\n    \"testing\" macro, which takes a string followed by any number of\n    assertions.  The string will be included in failure reports.\n    Calls to \"testing\" may be nested, and all of the strings will be\n    joined together with spaces in the final report, in a style\n    similar to RSpec <http://rspec.info/>\n\n    (testing \"Arithmetic\"\n    (testing \"with positive integers\"\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n    (testing \"with negative integers\"\n    (is (= -4 (+ -2 -2)))\n    (is (= -1 (+ 3 -4)))))\n\n    Note that, unlike RSpec, the \"testing\" macro may only be used\n    INSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\n    DEFINING TESTS\n\n    There are two ways to define tests.  The \"with-test\" macro takes\n    a defn or def form as its first argument, followed by any number\n    of assertions.  The tests will be stored as metadata on the\n    definition.\n\n    (with-test\n    (defn my-function [x y]\n    (+ x y))\n    (is (= 4 (my-function 2 2)))\n    (is (= 7 (my-function 3 4))))\n\n    As of Clojure SVN rev. 1221, this does not work with defmacro.\n    See http://code.google.com/p/clojure/issues/detail?id=51\n\n    The other way lets you define tests separately from the rest of\n    your code, even in a different namespace:\n\n    (deftest addition\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n\n    (deftest subtraction\n    (is (= 1 (- 4 3)))\n    (is (= 3 (- 7 4))))\n\n    This creates functions named \"addition\" and \"subtraction\", which\n    can be called like any other function.  Therefore, tests can be\n    grouped and composed, in a style similar to the test framework in\n    Peter Seibel's \"Practical Common Lisp\"\n    <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n    (deftest arithmetic\n    (addition)\n    (subtraction))\n\n    The names of the nested tests will be joined in a list, like\n    \"(arithmetic addition)\", in failure reports.  You can use nested\n    tests to set up a context shared by several tests.\n\n\n    RUNNING TESTS\n\n    Run tests with the function \"(run-tests namespaces...)\":\n\n    (run-tests 'your.namespace 'some.other.namespace)\n\n    If you don't specify any namespaces, the current namespace is\n    used.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\n    By default, these functions will search for all tests defined in\n    a namespace and run them in an undefined order.  However, if you\n    are composing tests, as in the \"arithmetic\" example above, you\n    probably do not want the \"addition\" and \"subtraction\" tests run\n    separately.  In that case, you must define a special function\n    named \"test-ns-hook\" that runs your tests in the correct order:\n\n    (defn test-ns-hook []\n    (arithmetic))\n\n    Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n    OMITTING TESTS FROM PRODUCTION CODE\n\n    You can bind the variable \"*load-tests*\" to false when loading or\n    compiling code in production.  This will prevent any tests from\n    being created by \"with-test\" or \"deftest\".\n\n\n    FIXTURES\n\n    Fixtures allow you to run code before and after tests, to set up\n    the context in which tests should be run.\n\n    A fixture is just a function that calls another function passed as\n    an argument.  It looks like this:\n\n    (defn my-fixture [f]\n    Perform setup, establish bindings, whatever.\n    (f)  Then call the function we were passed.\n    Tear-down / clean-up code here.\n    )\n\n    Fixtures are attached to namespaces in one of two ways.  \"each\"\n    fixtures are run repeatedly, once for each test function created\n    with \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\n    establishing a consistent before/after state for each test, like\n    clearing out database tables.\n\n    \"each\" fixtures can be attached to the current namespace like this:\n    (use-fixtures :each fixture1 fixture2 ...)\n    The fixture1, fixture2 are just functions like the example above.\n    They can also be anonymous functions, like this:\n    (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n    The other kind of fixture, a \"once\" fixture, is only run once,\n    around ALL the tests in the namespace.  \"once\" fixtures are useful\n    for tasks that only need to be performed once, like establishing\n    database connections, or for time-consuming tasks.\n\n    Attach \"once\" fixtures to the current namespace like this:\n    (use-fixtures :once fixture1 fixture2 ...)\n\n    Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n    are using test-ns-hook, fixture functions will *never* be run.\n\n\n    SAVING TEST OUTPUT TO A FILE\n\n    All the test reporting functions write to the var *test-out*.  By\n    default, this is the same as *out*, but you can rebind it to any\n    PrintWriter.  For example, it could be a file opened with\n    clojure.java.io/writer.\n\n\n    EXTENDING TEST-IS (ADVANCED)\n\n    You can extend the behavior of the \"is\" macro by defining new\n    methods for the \"assert-expr\" multimethod.  These methods are\n    called during expansion of the \"is\" macro, so they should return\n    quoted forms to be evaluated.\n\n    You can plug in your own test-reporting framework by rebinding\n    the \"report\" function: (report event)\n\n    The 'event' argument is a map.  It will always have a :type key,\n    whose value will be a keyword signaling the type of event being\n    reported.  Standard events with :type value of :pass, :fail, and\n    :error are called when an assertion passes, fails, and throws an\n    exception, respectively.  In that case, the event will also have\n    the following keys:\n\n    :expected   The form that was expected to be true\n    :actual     A form representing what actually occurred\n    :message    The string message given as an argument to 'is'\n\n    The \"testing\" strings will be a list in \"*testing-contexts*\", and\n    the vars being tested will be a list in \"*testing-vars*\".\n\n    Your \"report\" function should wrap any printing calls in the\n    \"with-test-out\" macro, which rebinds *out* to the current value\n    of *test-out*.\n\n    For additional event types, see the examples in the code.\n    ", Keyword.intern(null, "author"), "Stuart Sierra, with contributions and suggestions by\n    Chas Emerick, Allen Rohner, and Stuart Halloway"));
 }
 public test_fn__7078() {
  super();
 }
 public java.lang.Object invoke() {
  return ((IFn)const__0.getRawRoot()).invoke(((IFn)const__1.getRawRoot()).invoke(const__2), const__3.getRawRoot(), const__4);
 }
}
