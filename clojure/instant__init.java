package clojure;

import clojure.lang.*;

public class instant__init {
 public static void load() throws Exception {
  ((IFn)const__0.getRawRoot()).invoke(const__1);
  ((IFn)new clojure.instant_loading__4931__auto__()).invoke();
  if (((clojure.lang.Symbol)const__1).equals(((java.lang.Object)const__2))) {
  } else {
   clojure.lang.LockingTransaction.runInTransaction((java.util.concurrent.Callable)((java.util.concurrent.Callable)new clojure.instant_fn__6234()));
  }
  const__3.setMeta((IPersistentMap)const__12);
  const__3.bindRoot(new clojure.instant_fail());
  ((clojure.lang.Var)const__3).setMacro();
  const__13.setMeta((IPersistentMap)const__16);
  const__13.bindRoot(new clojure.instant_verify());
  ((clojure.lang.Var)const__13).setMacro();
  const__17.setMeta((IPersistentMap)const__20);
  const__17.bindRoot(new clojure.instant_divisible_QMARK_());
  const__21.setMeta((IPersistentMap)const__24);
  const__21.bindRoot(new clojure.instant_indivisible_QMARK_());
  const__25.setMeta((IPersistentMap)const__28);
  const__25.bindRoot(new clojure.instant_parse_int());
  const__29.setMeta((IPersistentMap)const__32);
  const__29.bindRoot(new clojure.instant_zero_fill_right());
  const__33.setMeta((IPersistentMap)const__36);
  const__33.bindRoot(((IFn)new clojure.instant_fn__6242()).invoke());
  const__37.setMeta((IPersistentMap)const__40);
  const__37.bindRoot(new clojure.instant_leap_year_QMARK_());
  const__41.setMeta((IPersistentMap)const__43);
  const__41.bindRoot(((IFn)new clojure.instant_fn__6251()).invoke());
  const__44.setMeta((IPersistentMap)const__47);
  const__44.bindRoot(new clojure.instant_validated());
  const__48.setMeta((IPersistentMap)const__52);
  const__48.bindRoot(((IFn)new clojure.instant_fn__6258()).invoke());
  const__53.setMeta((IPersistentMap)const__56);
  const__53.bindRoot(new clojure.instant_print_date());
  ((clojure.lang.MultiFn)const__57.getRawRoot()).addMethod(((java.lang.Object)const__58), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6265()));
  ((clojure.lang.MultiFn)const__59.getRawRoot()).addMethod(((java.lang.Object)const__58), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6267()));
  const__60.setMeta((IPersistentMap)const__63);
  const__60.bindRoot(new clojure.instant_print_calendar());
  ((clojure.lang.MultiFn)const__57.getRawRoot()).addMethod(((java.lang.Object)const__64), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6270()));
  ((clojure.lang.MultiFn)const__59.getRawRoot()).addMethod(((java.lang.Object)const__64), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6272()));
  const__65.setMeta((IPersistentMap)const__67);
  const__65.bindRoot(((IFn)new clojure.instant_fn__6274()).invoke());
  const__68.setMeta((IPersistentMap)const__71);
  const__68.bindRoot(new clojure.instant_print_timestamp());
  ((clojure.lang.MultiFn)const__57.getRawRoot()).addMethod(((java.lang.Object)const__72), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6281()));
  ((clojure.lang.MultiFn)const__59.getRawRoot()).addMethod(((java.lang.Object)const__72), (clojure.lang.IFn)((clojure.lang.IFn)new clojure.instant_fn__6283()));
  const__73.setMeta((IPersistentMap)const__76);
  const__73.bindRoot(new clojure.instant_construct_calendar());
  const__77.setMeta((IPersistentMap)const__80);
  const__77.bindRoot(new clojure.instant_construct_date());
  const__81.setMeta((IPersistentMap)const__84);
  const__81.bindRoot(new clojure.instant_construct_timestamp());
  const__85.setMeta((IPersistentMap)const__87);
  const__85.bindRoot(((IFn)const__88.getRawRoot()).invoke(const__33.getRawRoot(), ((IFn)const__44.getRawRoot()).invoke(const__77.getRawRoot())));
  const__89.setMeta((IPersistentMap)const__91);
  const__89.bindRoot(((IFn)const__88.getRawRoot()).invoke(const__33.getRawRoot(), ((IFn)const__44.getRawRoot()).invoke(const__73.getRawRoot())));
  const__92.setMeta((IPersistentMap)const__94);
  const__92.bindRoot(((IFn)const__88.getRawRoot()).invoke(const__33.getRawRoot(), ((IFn)const__44.getRawRoot()).invoke(const__81.getRawRoot())));
 }
 private static clojure.lang.Var const__0;
 private static clojure.lang.Symbol const__1;
 private static clojure.lang.Symbol const__2;
 private static clojure.lang.Var const__3;
 private static clojure.lang.Keyword const__4;
 private static clojure.lang.Keyword const__5;
 private static java.lang.Integer const__6;
 private static clojure.lang.Keyword const__7;
 private static java.lang.Integer const__8;
 private static clojure.lang.Keyword const__9;
 private static clojure.lang.IPersistentList const__10;
 private static clojure.lang.Keyword const__11;
 private static clojure.lang.IPersistentMap const__12;
 private static clojure.lang.Var const__13;
 private static java.lang.Integer const__14;
 private static clojure.lang.IPersistentList const__15;
 private static clojure.lang.IPersistentMap const__16;
 private static clojure.lang.Var const__17;
 private static java.lang.Integer const__18;
 private static clojure.lang.IPersistentList const__19;
 private static clojure.lang.IPersistentMap const__20;
 private static clojure.lang.Var const__21;
 private static java.lang.Integer const__22;
 private static clojure.lang.IPersistentList const__23;
 private static clojure.lang.IPersistentMap const__24;
 private static clojure.lang.Var const__25;
 private static java.lang.Integer const__26;
 private static clojure.lang.IPersistentList const__27;
 private static clojure.lang.IPersistentMap const__28;
 private static clojure.lang.Var const__29;
 private static java.lang.Integer const__30;
 private static clojure.lang.IPersistentList const__31;
 private static clojure.lang.IPersistentMap const__32;
 private static clojure.lang.Var const__33;
 private static clojure.lang.Keyword const__34;
 private static java.lang.Integer const__35;
 private static clojure.lang.IPersistentMap const__36;
 private static clojure.lang.Var const__37;
 private static java.lang.Integer const__38;
 private static clojure.lang.IPersistentList const__39;
 private static clojure.lang.IPersistentMap const__40;
 private static clojure.lang.Var const__41;
 private static java.lang.Integer const__42;
 private static clojure.lang.IPersistentMap const__43;
 private static clojure.lang.Var const__44;
 private static java.lang.Integer const__45;
 private static clojure.lang.IPersistentList const__46;
 private static clojure.lang.IPersistentMap const__47;
 private static clojure.lang.Var const__48;
 private static java.lang.Integer const__49;
 private static clojure.lang.Keyword const__50;
 private static java.lang.Class const__51;
 private static clojure.lang.IPersistentMap const__52;
 private static clojure.lang.Var const__53;
 private static java.lang.Integer const__54;
 private static clojure.lang.IPersistentList const__55;
 private static clojure.lang.IPersistentMap const__56;
 private static clojure.lang.Var const__57;
 private static java.lang.Class const__58;
 private static clojure.lang.Var const__59;
 private static clojure.lang.Var const__60;
 private static java.lang.Integer const__61;
 private static clojure.lang.IPersistentList const__62;
 private static clojure.lang.IPersistentMap const__63;
 private static java.lang.Class const__64;
 private static clojure.lang.Var const__65;
 private static java.lang.Integer const__66;
 private static clojure.lang.IPersistentMap const__67;
 private static clojure.lang.Var const__68;
 private static java.lang.Integer const__69;
 private static clojure.lang.IPersistentList const__70;
 private static clojure.lang.IPersistentMap const__71;
 private static java.lang.Class const__72;
 private static clojure.lang.Var const__73;
 private static java.lang.Integer const__74;
 private static clojure.lang.IPersistentList const__75;
 private static clojure.lang.IPersistentMap const__76;
 private static clojure.lang.Var const__77;
 private static java.lang.Integer const__78;
 private static clojure.lang.IPersistentList const__79;
 private static clojure.lang.IPersistentMap const__80;
 private static clojure.lang.Var const__81;
 private static java.lang.Integer const__82;
 private static clojure.lang.IPersistentList const__83;
 private static clojure.lang.IPersistentMap const__84;
 private static clojure.lang.Var const__85;
 private static java.lang.Integer const__86;
 private static clojure.lang.IPersistentMap const__87;
 private static clojure.lang.Var const__88;
 private static clojure.lang.Var const__89;
 private static java.lang.Integer const__90;
 private static clojure.lang.IPersistentMap const__91;
 private static clojure.lang.Var const__92;
 private static java.lang.Integer const__93;
 private static clojure.lang.IPersistentMap const__94;
 static void __init0() {
  const__0 = (clojure.lang.Var)RT.var("clojure.core", "in-ns");
  const__1 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.instant");
  const__2 = (clojure.lang.Symbol)Symbol.intern(null, "clojure.core");
  const__3 = (clojure.lang.Var)RT.var("clojure.instant", "fail");
  const__4 = (clojure.lang.Keyword)Keyword.intern(null, "file");
  const__5 = (clojure.lang.Keyword)Keyword.intern(null, "column");
  const__6 = (java.lang.Integer)1;
  const__7 = (clojure.lang.Keyword)Keyword.intern(null, "line");
  const__8 = (java.lang.Integer)17;
  const__9 = (clojure.lang.Keyword)Keyword.intern(null, "arglists");
  const__10 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "msg"))));
  const__11 = (clojure.lang.Keyword)Keyword.intern(null, "private");
  const__12 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "msg")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 17, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__13 = (clojure.lang.Var)RT.var("clojure.instant", "verify");
  const__14 = (java.lang.Integer)21;
  const__15 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "msg")), RT.vector(Symbol.intern(null, "test"))));
  const__16 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "test"), Symbol.intern(null, "msg")), RT.vector(Symbol.intern(null, "test")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 21, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__17 = (clojure.lang.Var)RT.var("clojure.instant", "divisible?");
  const__18 = (java.lang.Integer)25;
  const__19 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div"))));
  const__20 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 25, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__21 = (clojure.lang.Var)RT.var("clojure.instant", "indivisible?");
  const__22 = (java.lang.Integer)29;
  const__23 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div"))));
  const__24 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "num"), Symbol.intern(null, "div")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 29, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__25 = (clojure.lang.Var)RT.var("clojure.instant", "parse-int");
  const__26 = (java.lang.Integer)37;
  const__27 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))))));
  const__28 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 37, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__29 = (clojure.lang.Var)RT.var("clojure.instant", "zero-fill-right");
  const__30 = (java.lang.Integer)40;
  const__31 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "width"))));
  const__32 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "String"))), Symbol.intern(null, "width")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 40, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__33 = (clojure.lang.Var)RT.var("clojure.instant", "parse-timestamp");
  const__34 = (clojure.lang.Keyword)Keyword.intern(null, "doc");
  const__35 = (java.lang.Integer)48;
  const__36 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "doc"), "Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n", Keyword.intern(null, "line"), 48, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__37 = (clojure.lang.Var)RT.var("clojure.instant", "leap-year?");
  const__38 = (java.lang.Integer)124;
  const__39 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "year"))));
  const__40 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "year")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 124, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__41 = (clojure.lang.Var)RT.var("clojure.instant", "days-in-month");
  const__42 = (java.lang.Integer)130;
  const__43 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 130, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__44 = (clojure.lang.Var)RT.var("clojure.instant", "validated");
  const__45 = (java.lang.Integer)136;
  const__46 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "new-instance"))));
  const__47 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "new-instance")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "doc"), "Return a function which constructs and instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.", Keyword.intern(null, "line"), 136, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__48 = (clojure.lang.Var)RT.var("clojure.instant", "thread-local-utc-date-format");
  const__49 = (java.lang.Integer)160;
  const__50 = (clojure.lang.Keyword)Keyword.intern(null, "tag");
  const__51 = (java.lang.Class)java.lang.ThreadLocal.class;
  const__52 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 160, Keyword.intern(null, "file"), "clojure/instant.clj", Keyword.intern(null, "tag"), java.lang.ThreadLocal.class);
  const__53 = (clojure.lang.Var)RT.var("clojure.instant", "print-date");
  const__54 = (java.lang.Integer)170;
  const__55 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Date"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__56 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Date"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Print a java.util.Date as RFC3339 timestamp, always in UTC.", Keyword.intern(null, "line"), 170, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__57 = (clojure.lang.Var)RT.var("clojure.core", "print-method");
  const__58 = (java.lang.Class)java.util.Date.class;
  const__59 = (clojure.lang.Var)RT.var("clojure.core", "print-dup");
  const__60 = (clojure.lang.Var)RT.var("clojure.instant", "print-calendar");
  const__61 = (java.lang.Integer)186;
  const__62 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Calendar"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__63 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.util.Calendar"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Print a java.util.Calendar as RFC3339 timestamp, preserving timezone.", Keyword.intern(null, "line"), 186, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__64 = (java.lang.Class)java.util.Calendar.class;
  const__65 = (clojure.lang.Var)RT.var("clojure.instant", "thread-local-utc-timestamp-format");
  const__66 = (java.lang.Integer)207;
  const__67 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "line"), 207, Keyword.intern(null, "file"), "clojure/instant.clj", Keyword.intern(null, "tag"), java.lang.ThreadLocal.class);
  const__68 = (clojure.lang.Var)RT.var("clojure.instant", "print-timestamp");
  const__69 = (java.lang.Integer)216;
  const__70 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ts")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.sql.Timestamp"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer"))))));
  const__71 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(((clojure.lang.IObj)Symbol.intern(null, "ts")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.sql.Timestamp"))), ((clojure.lang.IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "java.io.Writer")))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Print a java.sql.Timestamp as RFC3339 timestamp, always in UTC.", Keyword.intern(null, "line"), 216, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__72 = (java.lang.Class)java.sql.Timestamp.class;
  const__73 = (clojure.lang.Var)RT.var("clojure.instant", "construct-calendar");
  const__74 = (java.lang.Integer)239;
  const__75 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "GregorianCalendar")))));
  const__76 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(((clojure.lang.IObj)RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes"))).withMeta((IPersistentMap)RT.map(Keyword.intern(null, "tag"), Symbol.intern(null, "GregorianCalendar"))))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Construct a java.util.Calendar, preserving the timezone\noffset, but truncating the subsecond fraction to milliseconds.", Keyword.intern(null, "line"), 239, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__77 = (clojure.lang.Var)RT.var("clojure.instant", "construct-date");
  const__78 = (java.lang.Integer)252;
  const__79 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes"))));
  const__80 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Construct a java.util.Date, which expresses the original instant as\nmilliseconds since the epoch, UTC.", Keyword.intern(null, "line"), 252, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__81 = (clojure.lang.Var)RT.var("clojure.instant", "construct-timestamp");
  const__82 = (java.lang.Integer)261;
  const__83 = (clojure.lang.IPersistentList)PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes"))));
  const__84 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "arglists"), PersistentList.create(java.util.Arrays.asList(RT.vector(Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes")))), Keyword.intern(null, "column"), 1, Keyword.intern(null, "private"), Boolean.TRUE, Keyword.intern(null, "doc"), "Construct a java.sql.Timestamp, which has nanosecond precision.", Keyword.intern(null, "line"), 261, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__85 = (clojure.lang.Var)RT.var("clojure.instant", "read-instant-date");
  const__86 = (java.lang.Integer)273;
  const__87 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "doc"), "To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.", Keyword.intern(null, "line"), 273, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__88 = (clojure.lang.Var)RT.var("clojure.core", "partial");
  const__89 = (clojure.lang.Var)RT.var("clojure.instant", "read-instant-calendar");
  const__90 = (java.lang.Integer)279;
  const__91 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "doc"), "To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.", Keyword.intern(null, "line"), 279, Keyword.intern(null, "file"), "clojure/instant.clj");
  const__92 = (clojure.lang.Var)RT.var("clojure.instant", "read-instant-timestamp");
  const__93 = (java.lang.Integer)285;
  const__94 = (clojure.lang.IPersistentMap)RT.map(Keyword.intern(null, "column"), 1, Keyword.intern(null, "doc"), "To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.", Keyword.intern(null, "line"), 285, Keyword.intern(null, "file"), "clojure/instant.clj");
 }
 static {
  __init0();
  clojure.lang.Compiler.pushNSandLoader(clojure.instant__init.class.getClassLoader());
  try {
   load();
  } catch (Exception ___x) {
  throw new RuntimeException(___x);
  } finally {
   Var.popThreadBindings();
  }
 }
}
